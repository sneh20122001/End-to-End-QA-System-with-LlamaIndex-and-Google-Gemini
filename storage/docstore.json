{"docstore/metadata": {"075db9be-4db7-4235-9453-07458a0334e2": {"doc_hash": "43ec28f5ff3872bd0d7f9a639df808a5059dba0a5803319835b86cf3775f283e"}, "3c7ccae3-679c-4e79-91f1-069435b17604": {"doc_hash": "6d77accacd56c6502943de64e85a79cb85ab38fc33ac67f3b11c32af58daf581"}, "303276ac-e9ce-4e8a-ad87-2c1bee28fdc3": {"doc_hash": "f92f52d7dc6bfa2a4c1bb444e3dc32fcc1a60e095dc5c71892f979ce829a43d5"}, "7807a46c-17e6-46e5-ad3a-b0c37c7dcafa": {"doc_hash": "02ea6986780c04f9d23282668e4558b1f8dd68887e0f9bb22bf55a995692d759"}, "db822a37-39a6-45b0-9448-40e9c0b9aaf2": {"doc_hash": "7c51bc3c79e33c20c27fc09f156a5453f30b210e9cdc22fccd4c24a0b88873b7"}, "ff388589-faee-4399-b5b2-89ef549f38b7": {"doc_hash": "a3cf762baa64907d18c5a832370105dc2e4c258e09beffb3546ff2b2840bc775"}, "700e1f3d-3b73-47c4-b43d-d566d78b8348": {"doc_hash": "98f58bf893c501818f880994a39eb00133f6330c1ef29f3e9c02dcc3ff722824"}, "0ba4e9a8-7f20-427f-868d-43f0004843d2": {"doc_hash": "d2823c47137e096c2b1833f814011d6207456ec38164ed13a863273c29657562"}, "e965e958-d8f7-4c6e-8ed6-9225f92b8d2c": {"doc_hash": "97d201b513ab28c369083c5a3d8a96fc64a4ff1f2f1b1bb9ffb25ff19f78231d"}, "366147aa-09ae-407d-a9ed-1e2ed00422b2": {"doc_hash": "648ae13c62d724bb9e9d62eee610ffb0bffd7089268c5c41c24357d5457bdd69"}, "b91ed719-57ad-481b-b36f-4f486e1d960b": {"doc_hash": "b8ad6f3cd86774bf88887640b157b0b809070e5f59b7dcfd81345b4cb463dd88"}, "980a14fc-88df-47a0-b06f-9c4476a88964": {"doc_hash": "311221b84b71fa5f757317f2ca7ef014380d64b9887787de36e94edbd507f79b"}, "eb3fa8e7-0dfb-4d6f-9d67-1d340b4cc195": {"doc_hash": "ac0faa4ebd8a9efc614b94c7ee21e64b0fb20bbe717ada8c9406bc101574722a"}, "51623818-44ad-43f2-9bd0-851c7152f063": {"doc_hash": "0cb94bbab86319a508d4c916d3c1fe5d377287a54cae980efcec200b43ac0e1a"}, "647b78e3-36ab-4c7b-abf4-3277a73226d7": {"doc_hash": "a1ffa48e46e429ff89598a2eede7ba54b79920e8b31dbb0e2d681c714d9ed4d7"}, "e979c1e6-7e72-4b1b-86b9-7b5b99ee624b": {"doc_hash": "a0373674045e7ee5a8babdcba42ba4f518f77359b151ea227a2882c5eb231d3a"}, "45aea9f9-0962-4a0c-add1-d0928daa150e": {"doc_hash": "991785ddfccee994083b57077878ca7a550da12adce4762d820f52812baa9224"}, "091634d6-963b-40fe-b822-680a060e934d": {"doc_hash": "61fee8b2bb52ad6a4200564fe1faffc466f59bfb1a89254fd0206d27405df334"}, "90767b8d-058a-49f8-a42d-05f4469ea04c": {"doc_hash": "5a6d84d3d38f5a4f7204215eb27713a32f0105d549832e2e9e190797dad36252"}, "d8ef5243-6fea-472a-a550-f3cd1353883c": {"doc_hash": "57321bb23d194385c5644887cb2d0fe28808f0916d7c77cc2b465480d572a92e"}, "fec2d1e4-fd7f-40d4-b5c9-a69d722654e1": {"doc_hash": "949f4333d9cfec1989291460f54e94b1b09b0dceff613e12ae92efa3d38f7918"}, "93da667f-52c2-41cc-a649-e9ca7b46a0cf": {"doc_hash": "4667ee3470277113cfb90e704c013ab3c54c4e1c2fc845a045344e67ba63050e"}, "383bf45c-83f8-45d5-b6a5-756cae3e8989": {"doc_hash": "244e0bfa502e40415fc256aab7134eb9f51dbcff0dc657103e4befe89e0a74fb"}, "bfa0c1b9-f964-4956-a67f-12eac5f659ff": {"doc_hash": "3603c3a35b5f4aaa03466a74b3caf544f574299fb5ef857171d236338b51dd41"}, "e76c156d-3ad9-46d8-ab12-8a8ff441619a": {"doc_hash": "9240a6ecf64b4e9543f254fd4edf123f02bddacaad8967a35bb7f42106b51c99"}, "4fb35324-6458-4eb7-b08d-ce065ce9cbd4": {"doc_hash": "61a3f20f5a492b07e047e8f0c11105e4f2d8c50e394807a8b64bb425fc16cabd"}, "54848abb-2367-4766-a30e-57c75f45870d": {"doc_hash": "217f86818c7e92be8a3d41ecb7cc07d7d7ba13de5f6435b573737867bcc33a63"}, "1ff3db94-a69c-4747-9cf6-d93725161af3": {"doc_hash": "61b7898e251b49ddf0c828fb5ad95d071b9074e53f3fab266f771780dd184215"}, "34e83e49-6a80-40b7-b033-ecbd1b8f3edd": {"doc_hash": "9d9fbcd6b78237ce06e3f57a7157d06188c2212ad344c6a0f85a8dabb30230a0"}, "0e4262c3-6284-4f28-af62-08877c89c68d": {"doc_hash": "14ded0ec87a31b775aa0b08657f354995cc09b449081da2a51cc2ac8f3c91c7d"}, "64e57666-bc7b-4175-93ac-f7f13f95e214": {"doc_hash": "d453b39ce27e945abd267545e4f938b18b1fe216dce39f2e530eabc44e3ec4ef"}, "e98e7cd9-bbd0-40c9-80b2-9968238e8538": {"doc_hash": "03692df06deb2cd4b9d9e8f6483a97f13026fc591822992e044bd6414160d5bc"}, "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f": {"doc_hash": "68ca0b4594d03f03b9f37dca7e7c15de7dbb9685925cce558915f30084fea42a"}, "2dfb9ef0-3f4b-4eb0-b082-5bb853c5abc9": {"doc_hash": "6d54d6413172aa35d241747b6021e4aa66b43e3fdde4e672ac8105dbdc61803e"}, "066c3e72-7c84-4af2-9740-655bb40a354b": {"doc_hash": "41c65361705bb2a428c4275135be901c165c1e189c99a5827c731ff24c47092b"}, "2901853c-c1de-4047-bd27-e8a29c03175a": {"doc_hash": "0247ad85609f8868e93ac58f4e4f90030b5b9bf28922a869edbed69b6a0a254c"}, "7483544b-7d1d-4169-96d5-e983902e3074": {"doc_hash": "be6cbfa3cbabb2abaf71b0a741eb9a6513cc92d548087d763c8f425f91d636e0"}, "3b64a1cd-3fa4-47ff-8611-a179d5405894": {"doc_hash": "c8be80fdf4b9fe66a03a57fecb127cabf15112136546ed98bd3ab2f51d70f1e6"}, "56f07191-dfa5-4026-b635-a76198674925": {"doc_hash": "ff86583efe571744db3404c73a04f4fa3069ef86cbe20201779510f0e6346f59"}, "e0e64cb1-d8c7-4cc7-90f1-3ee0a552b5f6": {"doc_hash": "e84ab7cd62671af66cb1afc500c440f70ba7fd7a0d0824972b7b23332ee6fcb5"}, "bcbb7997-ba2a-4339-a5da-2c571bd38e24": {"doc_hash": "18a0750c41f21bdcd377ae0dfca2d35a69667fd46b82432efa85f11304e877b2"}, "e826982c-d87f-4f5e-8d0c-649292b35249": {"doc_hash": "14191ef4a81de7c2394e3cc13b8d5e894b2d09bb38223ec1ae4035286eea2e81"}, "ea553dd9-611e-4fb4-a02b-e8b1cb0747d5": {"doc_hash": "402aaaa3c7660ffca5bc3f3dd9d5383bf6b6101ae9a1baa73d7d964d994b0235"}, "900eb617-93ab-4560-9363-e2ebd3c61365": {"doc_hash": "c7574f69b73b38fa2422d2b1b371241842a5ac643cae9b940be5e9a7dd81c893"}, "80159f92-b959-44fe-aa16-52daf54003cc": {"doc_hash": "6ab50ce8db207085a902f5d18d1f42ee89bcbc34d994e5268d4c04e738feb3cc"}, "75fb3ec5-106d-4d38-89f7-9232f3efeb21": {"doc_hash": "d8c509f10f360a974818cbe44c23e98da7cca7be72b7158ebc98e0e5dab09bcc"}, "95eea06c-6e4a-4ed1-9f25-6ba620f7b527": {"doc_hash": "d2aab7b681e83644934df7a64b8a86120614eef2271e8b586a5b4af6df1e3b47"}, "0564509e-ae0f-43c6-b2c9-ffa5faf49365": {"doc_hash": "22f49ac7d901a4e7fc40aed4e43f0e7b16cb0060f1eb4d6114e6b2de77031bcd"}, "fc7405c0-20be-430f-9b50-46135d6fd268": {"doc_hash": "dbd1858794804d40ede208f95cebe0a93467876cddedd0bbb83a202cdabddf3b"}, "8a08184c-5b08-430c-86db-f6cece85978e": {"doc_hash": "21680fd9c155ff2fa27f92a02f92b1b19c83aaecc83479b01219325788419bb7"}, "f0531017-0b02-49f4-ab25-c8018e763615": {"doc_hash": "abe0d5f5b96a50618e21acf4a54827957dad434fb58410688b6360d3a44ba963"}, "5802b44d-ab6a-4047-a6fa-5dfeaae680b4": {"doc_hash": "f2fdc39505ed546746e61291fca390918d0649d04ab1a111faa4ef508004e0b2"}, "3f279c0f-c197-4ce2-b8ab-a6184a28a90f": {"doc_hash": "d2a14a625f58c66fa3769691f3fe98af14d931b0d713fc5b3a17a4ea0dad608c"}, "82476317-a5d0-4f0f-84a4-62b22410fcb4": {"doc_hash": "a705ddb835a54d85fd9b3cc7f0da10f5ecac868903b39284bac07a4f8fbec3c3"}, "90ea538b-b255-480c-8e8b-048310fd8803": {"doc_hash": "056c8c597eed3cdc1e2fe015e9b1f7371badc4332c5ec7329a75f47f2073432f"}, "71dca858-631a-477c-b413-3223854639f0": {"doc_hash": "ebda4e568fdd3e7c36f538552814674f4b8019d934200741c1f2b1173631d021"}, "2e745575-9b4d-4256-a67f-4e7cf876204d": {"doc_hash": "1bfb037af574b25330a18680579d28a2cf6e3394bfd26e2df6bb23899120b37e"}, "cfb632d3-dd2b-49a9-84d7-423771ae8a9e": {"doc_hash": "451f4e7c570da1f8e2030552eeb433164edd6372def7940ff63d82ad80f41a3e"}, "c56c1a68-488f-4835-9ff3-4db7672e8e8f": {"doc_hash": "8ba7afb48587768a8d357f3b785160fb8e0d124bffb3801a935efe2efa609ae7"}, "8cd35e64-a184-43dc-bdb2-a9ce9ec3beb6": {"doc_hash": "9453910804b3ce15421bbad94430e8fc0cddd519abf7721406e974e7fc4b254a"}, "324dcdbf-2be8-4e1c-bc86-821c1548b27f": {"doc_hash": "749760eaef6dbee38cb2c8a38b3e2d10e4402b51037c3dd90b3aa8891a631ac7"}, "940432f0-16a3-42b2-a84b-89d06c35c3b8": {"doc_hash": "381b196ec508f5c1b70d6013d4e099cf41438a1c761d4344f1573c55d6857020"}, "76a8f7dc-872b-45df-95f1-446323ae832e": {"doc_hash": "a80d1cf1531a888590df06bf8f39219d62712aeeabb6564c902a80c407b4e26a"}, "0a99e186-a6e8-451b-a995-b702e942d7d8": {"doc_hash": "9ef9700423149cf581d58cee8bf50ddd1409ce6df8fb189ada1c168496a69435"}, "6597ed24-9894-450c-b81d-2acf0e51a872": {"doc_hash": "b15082e82cb8e6420ac01eb87a50a83490f920787a4db190d63acfc4a82afba1"}, "878538be-5da7-4df1-9f3e-57f44cb10781": {"doc_hash": "85df504991de420e7a8da3698a9b6283ae72aebe9318341404691ea4f8db6a9b"}, "9c6f062b-9a97-41ac-96e3-85a628d0c559": {"doc_hash": "296ba5740c64e1560189fb153671079723967a2d9a05f63fff0e020b3f997011"}, "9cf06106-de31-4156-83e5-73df731496ba": {"doc_hash": "fe7a02ebf11a8c53fb6a5fc2426c6c9333ac89fc5477792d44aac609e9ce521f"}, "144b1a39-1b3d-4ed9-8439-18288484aac4": {"doc_hash": "0c353c50ebfcf161641551a35c1f6d0837c19d9cde9486d4c13092867e86492e"}, "8a0598a4-cfd2-436d-b7ad-8966458e1471": {"doc_hash": "f53eb98bd611870a6401da225b694cf3751ef3520fd500f42cb1c7a8944168fb"}, "adb0856b-f387-455a-9906-1f864643e493": {"doc_hash": "216baa6a0c48d816284285b8c5fd8e8530b2fca3253daec67b336f866a16a4ce"}, "0b63b601-b0bc-4ddc-9d47-975420677787": {"doc_hash": "a36242c777e80534b353846d70ff681f7fb9b6b6024ea0f230f1fba6df8730ed"}, "f0f81dfd-9dfe-410e-9b57-ccfbbdf49631": {"doc_hash": "32444a2ed68ad307471254e2e9711c8dc1fd1af0479b435a70e1ce337c2c0ea6"}, "9ff633c7-1183-4329-bb52-57fa2a400581": {"doc_hash": "f65ffd2c64c0a037c6c6151694e31b0cfdded7bd5cb9bd5850f3cfc6d79e0a75"}, "5ea4b656-39b3-40fa-aa00-8c1b23cf16e0": {"doc_hash": "346008d8e0e751109314481638afa0da4e674a9546f012a264a1b7fc12de958d"}, "e5aa79fa-2c16-4962-86d8-d67e34f342eb": {"doc_hash": "46e82db281da8388514f29a8e7e3bc42cbe7ab55ac6e03aea162eb45709b5335"}, "2dbf738b-e3eb-4456-b428-e5dadcf5faf4": {"doc_hash": "970cd67b189366e4cdaae6c32e4730c902398194e5e44342fef75c041eb0348e"}, "cfc65701-b890-408b-a641-bc27885335ad": {"doc_hash": "87e0af8f17fad3afeb9b9db97cd359f3c697ecc7c207d925fceb5ca500ffd1bf"}, "89345f47-f421-4f8d-9bca-ee4334046c3c": {"doc_hash": "ebd55c14683a1e8de99f23484592a4a58108a640a133580cf18882ce2188bcad"}, "5204f85c-1384-45b1-bcc6-0c7e701c18da": {"doc_hash": "994e609ed751c71f8ad6d3540ed16b6bf4fe7f7ddc60d632dfc1b6a9118d2384"}, "ce1807f5-fa58-44d4-ad52-ff1e9f650138": {"doc_hash": "6c20ede8e8fc999110cc2284f58babb04e260b53b5249349971d3df38a09d5c0"}, "861c7347-7699-40a3-a71e-beb5176f4823": {"doc_hash": "cb9f98ed517e95a77a43645a6134f5f38fc1bf67380ed4bdf2b7b00df2b010d3"}, "e1a27ae5-8d9c-4330-aec9-20b227981819": {"doc_hash": "5491e4dfd8428635d6ec7525e117dc7be6bd291ea114813f59dccfdccdd594d6"}, "5e98addd-2a04-4921-97f3-dfb6ffa1b013": {"doc_hash": "649ad5a8fb1580aa99547678ac5fcfeb6519c3470bae3dda2d1d3f4a525ebfec"}, "c1709054-8668-45f3-9eab-9a4e260f987f": {"doc_hash": "32a648a292f64d601a816a3a51818ca2cfaa95267c92a02cee4df61c5e089ee2"}, "696153ec-8995-42f8-a354-86d8817bfd1d": {"doc_hash": "5e5d0993c16d74f99c5f93ae571956f8a9187800d517ac0a55a07cd6f3d60eae"}, "06ae15e2-be6e-4207-8d25-2d34c5c19fb8": {"doc_hash": "21fbf25747f9d034daaf4edf818728565d16b2984d37b0444c2db9c73d5cb353"}, "9e625475-80e7-49a2-9a20-9b9a5a6f56f5": {"doc_hash": "6adc8a1c51539912823303f7dbf8fb783338c5537febdccbb108b5f97d27b13c"}, "78cee554-7b6f-4c00-801d-c6834655dc37": {"doc_hash": "a3096a26bc4d33a3389d592a9aa73a33a930e3f9b1ad912ae0d480682bd56c23"}, "ac10c795-8942-4d10-b0f9-bd0fb9115bb5": {"doc_hash": "305d017d2d1157a72373cb508ab863a2aeecd63e511c42718213303d43e36869"}, "7833e948-0bea-4be2-a28f-f7b8fd2d9d81": {"doc_hash": "e451fb7dd6cb79c638997e4fc40ed029120c203706a250ae303d49d9f851748e"}, "fefc01b9-e391-43f2-9688-a6adf7ce4991": {"doc_hash": "834027c1d6836844df2e4641c9eb31f87c70be0c8d3fbc77a13e18b0434cf0f4"}, "96ed40d4-f957-4dd1-8b71-62ad5944e4cf": {"doc_hash": "4b1aaf4a852f86fafebd0b03b5a44cf7383b9192c810fce3c1b0b7ef17b2b69b"}, "d9556498-df47-4918-ad36-bf1595044d6c": {"doc_hash": "5151232f91a20a7687298602ca9e0a16c4584d7553bac6844224f9f3cdf18bcc"}, "5225adbb-dd33-43c3-abb6-b3a31f2ba2ed": {"doc_hash": "640fb31a459638ff78a88e504a0c899c02db85b7b1dcd8481acacd0061099812"}, "6cfebddf-e926-44f2-a4d1-abda904341be": {"doc_hash": "90695b6f392aed0e721ea6d2fb85d0c8aaeb5d5f3376cc4f6994f37766ad5f3a"}, "f6ecc8c1-6a8b-4059-adaf-4ba635c13943": {"doc_hash": "94249d207740e67037a920587afaeacc497e547046107bfe341bd611a3d098ed"}, "32b8c4d9-d720-47cf-a0df-1b4e8af5e3a4": {"doc_hash": "9e90074f43bfcebbc7841ce8b08145249ad7fe35a1ec401169a67becf91af773"}, "908fb9c6-634d-4f78-a3a6-34fd213998ab": {"doc_hash": "7714472b0fcc8a50f462083b16e06914655999ddc90f7b01b32528b2ff9e7caf"}, "e23e11a9-4c5f-4e21-ae69-0b26d3563dcc": {"doc_hash": "cec04ffee5b56dda2a3e55bb0a43fe9830467de428de22cc3a39d8d250324f36"}, "6157f50a-5166-4184-a6c2-c23c153630c2": {"doc_hash": "c85045586295b16712a828f07d11958420b143a35394a4fb7d424aa493e88152"}, "dbdc7594-bd7e-4b3d-981f-9c68fb9dd3e5": {"doc_hash": "a88d3a719e58c2701e916435df2a7c685de32ffcd476aedc99b883d50d1086da"}, "a3042550-4bc6-45c1-b23e-21fffed5ae30": {"doc_hash": "a1023e1f54a408f47f5ad1a546283fc63191d0673d7a4dd46cb56e49d7200c67"}, "abfc535f-e449-483e-ae2d-024f1b220c4f": {"doc_hash": "bf44ece000886fe6c269e18164951131a6135e1f0dadbf66129adb692aa9795b"}, "b0862230-1e5b-4799-a1d4-238ae9925d7c": {"doc_hash": "e2322086c1e5f71f4e5edf65963cbe654bcd30976b0a91107d91a8561fad4fb0"}, "7235bdcb-c70f-4d80-b12d-ac6c80d89de9": {"doc_hash": "e8c2ec49e9949dfc32f6b758ededaff541a7e7f393df6c914f56287833608943"}, "a28f6c02-f15a-4b90-b459-16883fb0484d": {"doc_hash": "62b645f360bd947ebe799b1d58cfe80b9a84ef09f7d15d58416477e98aa84d40"}, "a15d4f20-a0d1-40ff-afdb-a06d16092107": {"doc_hash": "15cd019697c9e7b11264edf443b819ab8e2d03c883532667ab705f6cd7dac1fb"}, "52d5484a-0672-4188-98f8-e0ca2301263d": {"doc_hash": "281fc43b71a9782cee3eaae1c66f23c694ede62e1ac3997ea27540fcd3d5f05a"}, "78103799-7613-4407-945e-94a9150a80f0": {"doc_hash": "8a9767463cf20962e17fe8af7dd99c4f24c326b8166c7b4f9fb219056f61630b"}, "f5ed3e2a-2b50-45df-80e5-8411d92c477a": {"doc_hash": "b0a64200fce0d1fc1cb41366882274309de4320ada24d7099d509768455d2d11"}, "49d9c393-83fe-4760-a270-6657ed21cc2b": {"doc_hash": "96dd96077a3ece162f659e781c7833c2faef813a8a7ac160983c4ae8b4d35ca4"}, "1079c78f-53f1-40e0-9e5b-9e0fdaf38c44": {"doc_hash": "3a390426477bc536eb56837d9d531daba25afd6ee945f493dcb016e6b2f20976"}, "76ce7475-d630-4051-9a77-14cbb43c4a7f": {"doc_hash": "e274037b03c66ee6a41b06193c4c0091d017680f7cd0e53e373e74d43fb11931"}, "e9ad0c96-688d-4857-8d6a-3d9b9c812be9": {"doc_hash": "e912fdf0beeb8e0a92c73742cf48271a21cad995195f137303a413b03fb68a3f"}, "83567cf1-470f-4e90-b2cf-3fa62d3aa504": {"doc_hash": "cdc36f42c24f8905a926c8259e868fb7893600edc8355b2cdb98812bf45eaa15"}, "7e04ba52-0b0c-4a6d-8bce-83e9379865f3": {"doc_hash": "9cbd033fbdaeaf81ef5a1c776fa5bb394ec56dc3fe3fa524531a90eb2425c8e9"}, "fce3a458-297e-4f35-bd27-c75230b76427": {"doc_hash": "84b26c45e9d8702df1c5a6c9aae3a385c5b1d2960d9a440030662c8a724ed302"}, "564770a3-2cb1-468a-ad96-d667d0746f3a": {"doc_hash": "36599dbd300dfc6a4edb5e1f4b871818311aba60df9c83e21896b492e792d27d"}, "3a17c383-a0ae-44a0-a24a-d61cea00ba60": {"doc_hash": "7f4521e6f745acacfe26a8c6f881de145edb7a6469602995a029b0825b727578"}, "7e3a8dee-0b72-42d1-80b4-483dd1820252": {"doc_hash": "e0d7258d66f8793c05b2190f68af0158d74eab3c84b9b7f0fd24fd3b2f9b0124"}, "457124bb-7086-4e5e-982a-87329735e09b": {"doc_hash": "c12b36a10529c93bd67698a2d80770937ee079887c93c69b16a0708b9fa8fffb"}, "dae985b2-2307-42bb-b856-7066c6347b55": {"doc_hash": "e1b437f47b872edde7b9399f50451d1f9affe28fcd6e5ebbea67759c376f19f8"}, "0050b886-f95f-4df4-af3e-9c55ee983186": {"doc_hash": "d92bb6444b59cf10cd7a2620c037c0f640974a31c3abfe0dc2d40c3fae275a3a"}, "2514a873-f337-40aa-bc70-b32e5789bc96": {"doc_hash": "e8877079f0d1086772e9f755239759f36115edf11242479fa61f88400ecfee4c"}, "536ca54f-82b3-45e2-8504-c37550f6ee08": {"doc_hash": "71ec8bf7e680b757a1894cd54e4268876271e145cdefbff566c953fe203d2d09"}, "0a99f145-3fe6-486c-bdf1-bd00041c0b62": {"doc_hash": "7525d09bacc87fd498616ab4db9cad6a191820ca5d7003daf72cb460bb6b3f82"}, "d55c31d3-22e5-45e9-bc98-d7a39955f214": {"doc_hash": "50fea6e2bb0f86a96d5852dc5469e1bf95045f5b9d2d80f113406aff03183e27"}, "d8c04afa-9dc7-47d3-bab7-1b965644032f": {"doc_hash": "4a80e84dc3f68145290dc7de4d6aa632a08c33f8073c5a8448d9c7439595a3b0"}, "4ee7901a-cb2e-4af0-9e91-9ba796a8e75a": {"doc_hash": "1f10f04c1e0bc1b5511879a61ba25b625ff68e9fd04917cb07dddc51bbcfc584"}, "b8c13c66-1012-4036-9f2d-256c03117b26": {"doc_hash": "5dfec8c2f959d51021580784eaa44de906def3c936736eae9455fe71b35a9cfe"}, "c79798b1-451a-43d3-86d6-fa0df6b24c05": {"doc_hash": "c79dd3fdb686e32678dc59853abd1db5733f5a348b602d7a5232fca6a3399ae2"}, "9662899b-9ddd-4928-8fab-0c81b3b417c5": {"doc_hash": "95fe518d468437bef17d809751d8fab09124bc21ef9fcaf813851b796df89462"}, "1cf954d2-a0a2-4a90-9e97-36400b8c1652": {"doc_hash": "f36f8c812d26d6a973edf3d26b2ef13751ab24d0655c3bf504731b1601272e11"}, "fe24141f-6c6f-4216-b2b5-32ec15520587": {"doc_hash": "5dfbfc97b7af6a592998fb6c5cc66b6d4cae4446f779255f4528c7ec5c43b7db"}, "6e8c68b6-f61f-4872-92e7-504eab0132d6": {"doc_hash": "8ba7addc747957798f68792663f6d2d5f0af282900a4b8bdd8d43f59e261f53e"}, "e000f48a-aaaa-462a-aac0-0cc695c8c061": {"doc_hash": "c9fa8ebc481f73fa1a5c0758d6af7e339ac22fa2111ea7a50ea5372d55d6252e"}, "da08a124-f7fe-4afd-b64f-93b422f4b831": {"doc_hash": "2da6e18c2ea4bc4802b519c69a4b14e020e05885b736f85eb3394622379eb58b"}, "888cc36f-35ab-426b-a27b-394bbd03e02a": {"doc_hash": "6839cf654b9275cffcc37435b98bd740fed255518ee44ddfdc008eb57399676a"}, "b308015d-0bcd-426b-82fd-04c5cf0b3f69": {"doc_hash": "6733578ab8338a526d92eca49730ec6ff303374be11059efd053345ba09d940b"}, "bc5ef580-785a-4ca8-b302-b675286b71eb": {"doc_hash": "201cdbdc46c57b27aaeceb106e1a00b096f51d2742f3fae00a8194630ea41258"}, "93030057-49af-4768-9481-c5d99e024146": {"doc_hash": "d7228d6379e6cf51618d989331f39f1d77aa5afc2a3f43cd9621c5f2aa09932f"}, "dbf1fafd-2a61-4fc0-8511-97efbf8f77e4": {"doc_hash": "bed70023222fdf3c265be41d3d5d2604b543094c7d052a44c3843d3f79ac51e2"}, "5c2051a7-0c5d-4f93-b8c5-b9ab9816071a": {"doc_hash": "0ffb09d179646c609ad8ebe1d24abfd0d5c63a036f44a4471505a461a67018f4"}, "31cbb412-e76f-47e1-9990-00667bfaa5a5": {"doc_hash": "0cf2c1375700402c5ca3fd779168614e5d94a8ba92fd52ed570463a0d7cde497"}, "9632360f-3bce-4b58-9ec7-e62b86086cf1": {"doc_hash": "f67fb7a1ad9d96a6c9cd54429113172664d283a78ca28d0c96159934878bb6bd"}, "71d871bb-5f2a-4d9c-941c-6ad7aa3451f4": {"doc_hash": "e605bc875d30a9f04eaead57ab170ea83ac193ccc33804361d9386ff41471592"}, "0b939f2c-e1a0-4f73-9296-3aff5dc4e35b": {"doc_hash": "023a5b23ecb2f73d7727962f9364d36962b8baa0d6d925d78c027e8b57409d12"}, "8f5507c0-bf08-453c-8b28-8b15218dee87": {"doc_hash": "943394fd9d526aabccc2f70cd57dd4a52314edac38ef5082a0ff48681dc62fb8"}, "e80fb77f-18b0-4d0e-93c9-67f2627fc319": {"doc_hash": "4dbbf3255985c0f37a8c4a3a8d7f9a2b4241b5b3f8bb616a99f7abc9411ac667"}, "36fdc9e4-1f60-40d5-80f9-95d5324d6802": {"doc_hash": "6d4864132d1a391b8afa170402c010432e41e06e50e8337b3a364dfec8d25701"}, "08b5d0c7-3abb-4609-9f50-fc63cf85a4a6": {"doc_hash": "13b5f2967c6bf16f8204cccb142672c849595beccf807646c978046ff41498b0"}, "736c8476-3c79-47fc-baf1-ce0f6bc2c252": {"doc_hash": "6b1bc3958060088d7fa07dff51e59ad45bd8c3364348bd58f40414f30c31d4ea"}, "0d7beb1c-030c-49c9-a521-744190aa9861": {"doc_hash": "75674fbb30cc2227073e78f5f2d5e2feb8a7ba94eed59f0e9cbbed3bf4e47247"}, "5eb5dadb-c00d-4d92-851d-204296e3c65c": {"doc_hash": "1873870a15b7cdc4ab3d267077433bff0c5307ecd20b31b1cfc1f701d2f65eee"}, "094592ff-ca76-45b1-9899-d10bf5084415": {"doc_hash": "ccd956b1d195bef8bee26b27dc462c338f7c29fad6dfbd50509d9e402d295530"}, "bc83e3fb-74cb-4070-b244-b58db0fdf8fa": {"doc_hash": "ccdccd00eabb1cdf077e5bc4ccd710fe24a67984d4d08cb1dbb67edd178bf5e4"}, "c187e14d-2843-4e88-abb2-ed7ebcd97d34": {"doc_hash": "530c2361640b73df53e092f48143ad6ebc488a0556a22d3973faedc568460b0d"}, "85618e65-c3af-474d-8eb7-667f8acd02eb": {"doc_hash": "738da439224e69c3f61cdd679ee25e3b1bd3839475c5a2c4f4fe5d58703e51ca"}, "d8a18c18-56ef-4ffd-9e06-03bd4eece34c": {"doc_hash": "329d55fef3233538fb863123574c2f5ef460eef276148bc33484abf54d70ff6e"}, "4dff270a-b6a4-48a7-a91d-d4621104c33e": {"doc_hash": "e6aa39d7e91535b5bf4614baa4babb81cc5c8f0f3273a2eb0f1793c2871821f8"}, "93b1bc81-6a2a-4de7-ae6c-e18df843af9f": {"doc_hash": "8215abdef55ea15fba7041e9dcae3797bcf7f4a91e021aa06d5764b00ff9cc5d"}, "51faaea8-4329-4396-b806-f4d6117810cf": {"doc_hash": "87c3d156b4572039293f1f1e26ac1243d5eefa7667daa11a2ea95cd957b110d9"}, "f5636b0c-4054-4c3d-9129-bb4d03da6f83": {"doc_hash": "c551fc506cafc1eaaa7cdb5144dd9b425a5ad29f3da36be5f39a4655cfadcce0"}, "8ec0f30d-99a1-441d-a34d-48d6b7604b02": {"doc_hash": "89361183b8368d154ca89e88542de7424ae5d9ca91de181ec39c276278567448"}, "05e834e0-22f7-47c5-a86f-0d4ef71dd284": {"doc_hash": "bf82a7a0558cfa65e26508dcf2d22cf2e66d74f40351961a8ae32ad5a377ec75"}, "16f2c195-a0ae-41d6-a5e4-1aa991095497": {"doc_hash": "28c34248ee8fee9e48093ea3b0267edef65dc028461de717300191e9fe258586"}, "15255d20-a991-4b93-95f4-61cf1edbbfd5": {"doc_hash": "b5178af9e8ab84a3a499c6ad932eb13897767fac07be2d369d9595893a12d929"}, "cb394b6e-8745-42d9-b987-b20235bbd12c": {"doc_hash": "e284ec94e47f0c206b25779f15e1dfece89b887bbdc43d3f50d1901687326ed7"}, "91a47347-385a-4bcc-8ff9-18d119c370e5": {"doc_hash": "3549c790e92074d0b03e09cc0cdffae5938eed4b319db57fdbd020e624da42ae"}, "82cfcfb3-b754-40be-ae20-52cf132abb8b": {"doc_hash": "86b6fb149a53a7114d4cc658304f91e352a0454915be7d13fdd909339a090f70"}, "c5ff7c4d-74ea-42e1-975e-51ef995367f5": {"doc_hash": "1abce051ea3eae872a89a146126edfe9df1b978f51d36b57176447dc57dedd6b"}, "c8f94c17-6d76-47aa-a97a-745f76f2864e": {"doc_hash": "0650ea4120ad9fad104132b02f456185cfbd81875c0aa73ecff1521c97408544"}, "90c9ddc4-2748-4720-960f-381a5280db47": {"doc_hash": "db96598be099d5c4926dd146e8e14f5edab3166047345fdca67b86c9dfd7f742"}, "f281ebc7-7b94-4f30-85d6-aff0f2f404b3": {"doc_hash": "d5491a759ecf797711cb271193843b21188937fc13d5d914d6768850f955f963"}, "5319a5b9-d85d-417a-b724-d30ee5b64ca6": {"doc_hash": "3004038ba4fd654380a271b25e999cb00a285969a8ad617f102751bd024224c1"}, "671eb83d-2cbd-46c6-8cc2-46bc47146b4f": {"doc_hash": "389db89f97e12c90d0487fc2a061b5d5c846f0b63a718b76ae6aa8f25a556682"}, "ce2cdce3-5457-4e81-b2ca-ff8ed85946d9": {"doc_hash": "649c11df84233f5aed23b142fe3bbdf18de7629bbd06319d4fd47ccef766c0f2"}, "65ef7e3e-ba2a-4986-825e-c34d9a907d01": {"doc_hash": "9635d96e037d2b41d0ad8d52e6859d8e6792d542239957bce41270bc6f72e994"}, "986c7444-2e5b-40c7-8f00-35a1b20c3914": {"doc_hash": "077715a188028add7aaa5c30bb58df247285c157441f645063b958c22f8b80e4"}, "d4d345eb-ead8-4da3-a32d-62e01175934a": {"doc_hash": "18c10acbd3aa4a3442ce6aa49561c40bc0d32299db4493f0b5d357b46c55fa59"}, "3164f871-e248-4348-942f-b57f0f459974": {"doc_hash": "d7f58c1b290de7c1f38773ac8d9351506af693b83fe5e769cddc70a818179ddb"}, "e77a5c31-ee02-4d95-9054-aed9803ca9fb": {"doc_hash": "cde82324ac4ecea373b1aabeb17b9528b05ce85bcc168b66407af2f021d7365c"}, "848aa548-f1bc-4ca7-97f2-9cd6d4065210": {"doc_hash": "1cd43af9e53ee0456b1e805faf8c22f4e43988fbd6696db21b1c3af241265cb2"}, "23f769ff-7bd8-4b4f-9cdf-6acdb0f609e9": {"doc_hash": "551b140520ceb617057a711325b948bfdc80360d1d552f6ecf138d02c29f7765"}, "4971e5ef-698f-464c-8958-128f8ef4f2ef": {"doc_hash": "6bf6ffd34e04a2336b87e02336abee6c31e0e0463e4d96285dae2dbde09db770"}, "b7df6724-9d5d-4e0b-9c41-88a706675cce": {"doc_hash": "e49341f904c866d23c4994df0032a7feb16ed2043749287c79ea4c7cde90fc45"}, "3eab9638-1d48-4c0a-a80c-4ddff47d225c": {"doc_hash": "1e58a5ab87be978067b3f716837ed7af7242eab39cd6143d7b555de60e6ddedd"}, "421207d8-0e6f-484f-967f-2555d2bfcd95": {"doc_hash": "24a532085ad63201def29fde19ee4cba367d2e66ad5596f131f7144b498c1f55"}, "2c3e354b-ee7a-4678-83c8-7d7a572c298e": {"doc_hash": "26e01181d906f9c30b089cbcc8568ec6760f6a30ecb8b019270f6b6ebea718ae"}, "8c50c304-e2f3-41ef-b6b3-c32a0eeb6a4e": {"doc_hash": "5c4d822087115049b03bea4c50fa03b1e6ebc98b10ed00a0ce9c6db7d6eba5fd"}, "34f32bf2-cab4-4f29-988a-d8e3d83bb064": {"doc_hash": "fb466d09f5ea921cdab8033a043135482dd69c9c903804d84419677593766bbf"}, "4a84acb4-157e-4903-b272-0ce07c3295cb": {"doc_hash": "00f861a6278e13587fc4f91c4073e0891a3614975938cc52b42b6eb8f97e53fd"}, "759569dd-8a42-4a3a-b2ce-2b47a3da9fca": {"doc_hash": "8e608a1cc773037c1557aff43c2dad5ca9be2c1c687c2957991430e1722108d8"}, "6687b18a-5ac5-4152-8b02-86c80392a504": {"doc_hash": "bbded1310e245b321a0c18dc9482227a27b6d6daa488556b6791f4c5414b9b23"}, "04686cde-dba4-4e88-befe-d0926f8ec288": {"doc_hash": "3617b202771bb72f95970393a49d01eb4fb63e70b6ef1b2b5f3149ca1550b7e5"}, "23bd9ee1-80fa-41dd-970e-6f787832ce05": {"doc_hash": "1cf32abdc4656e4820696d68cc55db7a1e5b6776889673f5b840661dd741f671"}, "9fc7ece1-0583-4b38-b5f3-7edba87a2661": {"doc_hash": "49c082b78883e586611245e5db615a92f0e9ad52970f124093349f4d5a3e5cb0"}, "39647dc8-1c5e-4848-b5bd-fa75426bf8ed": {"doc_hash": "c0bf1200f31ac10cb48e5f298f77135ebfb74111651b672005d2c3afb7614121"}, "8a585341-1cf5-481d-8733-640349525f36": {"doc_hash": "4cacb751715857811a0b7dbca560825c34ae135958533f8b197103ce77b257cd"}, "4c5e26fa-87e9-4d59-a276-dd11e42a6171": {"doc_hash": "5253d9dc9ad7b98bec17bf92c4e7acfa18c7d6d37417eba77dd01072c4f6a1f0"}, "b640d3b8-9248-4d35-b236-1bf5ea09d95a": {"doc_hash": "98f3e84f1462436c3aa03189ae820cf1aa562926e948301da84fbd145d47105c"}, "e8b9ad8c-8c87-485b-9867-8037a19ebb71": {"doc_hash": "5b6a3de2a4a36fa709fdbbd85420262904e2058b2fb5fada5f2d23da64731a54"}, "cd794995-95cf-4b17-abc3-b99a96104a76": {"doc_hash": "09d346639dae37383ec33b508f3c6dd39ea4a1736e05839340f419bd2025e571"}, "e42c261f-57d1-4f6f-b053-d951e204452f": {"doc_hash": "8de7c10f7343e2aac7ada3717f4d42d0e66e50d6d03a3eb125a5a66ed525b3a1"}, "65ea5242-fc03-4812-9c50-d344ec8aa34e": {"doc_hash": "a8d8c1e17d4eedbfa8e4f99df8879f0ea4243ceb7d6a83e64f0c4125e8511775"}, "313caba2-2ca9-4c7d-8913-5ed637b56202": {"doc_hash": "12e24916890a4d67e0bc8a4444980d4c4cecc34df0c28d54e84f1d10ce1605b6"}, "f3c3c96c-1b5c-4b15-9dcc-6cdbe0a2b177": {"doc_hash": "b5c32b858ddee6c70face92823b4e0d412cf2ca9bd51e09cb7b647b4eb60b142"}, "c8b472e0-19d7-4920-b84e-774c179474d5": {"doc_hash": "cfe3ff376f4ef75e412d7c315ef48a79aeb014cad24d46017bff26bad34639b7"}, "6e8b8192-6f90-4f8d-a340-99aec4cfac97": {"doc_hash": "1e06e4050a61d714466b0b9cfa797b88ffa95efb587e0ea6e9942614b0f0e15d"}, "7b2420bf-3bc2-427b-aa97-d45c5986bc58": {"doc_hash": "b2e9ccaf0753e822fb894da744e8730403ba65c3fc85764b9e35a2fef2c58a2d"}, "cf2e3917-119a-4419-8e54-8178604254f1": {"doc_hash": "08f756918402ee0895f64ee395a726b677b8c9d693ecc0308aaf4143b1e4d722"}, "2e045ffb-2b21-4d98-8918-902afa0005d8": {"doc_hash": "fc4ff396e1cb056a7eebd22ab24648f9c7feb99ea7fc16ed890a5da0f2c0148a"}, "24fbf627-2dbe-4a37-a748-fa078df5340b": {"doc_hash": "4ffb3e3e75c2b31eb42d238383eebc8a62c0b847ccebb39cf07731df1164dd5c"}, "4cb3a510-74af-40b4-82c3-f91ce31dc470": {"doc_hash": "4c3eb3110c5798eb4ba2bf42852d48ff7525636c5a708598b592c0ae2c67bdf1"}, "3f0578ee-430d-4e71-a822-08e5117f7c62": {"doc_hash": "5f7e7714b2e8787a4a89b1d78cc6ad83b1561fade96aa22be2c4e2b27122e53c"}, "bba18de0-9b21-4f60-8250-90ee946924f3": {"doc_hash": "fd9c2cd49de3e6e08fba14881ac78d86dd6e504028acdfad235bf3297af31c5a"}, "7e164236-1d6e-4898-a211-b5f79a7eb159": {"doc_hash": "f1ec25ceb33987ad9293b5618fddd25623c6846e4e2a13557922b0bbc4572a71"}, "2877f444-b4f5-41b5-90a9-2c8188d18185": {"doc_hash": "400d1f4c9b0bfaac0617b09c4b4422f33cf762c1c3cb914582e258aaf81abe26"}, "8afe21ed-9eaf-4759-bf1b-1018317c3d44": {"doc_hash": "27188cf834a2e2964573f1fd3ac8f6194f4ae1a650d575fa9d181d10caa294a5"}, "41b095dd-be22-4b0d-9191-ee78173e7ea2": {"doc_hash": "754c022981e8efd694f8055d4060b5906d5e3439aefc5acb7c9535d523262745"}, "1ca2d922-1dd6-4921-9462-443f21b09d62": {"doc_hash": "afe2b153cbf18bdceacff7e0708686a999cd701c99290390722ff801d9d71b53"}, "f787c46b-f23d-42c1-a1c0-60010aebf495": {"doc_hash": "3a21311aba1542900abebf9b4a8ed137e77d996fd0d14271524c32cdea445fc1"}, "406d81d5-31e6-4e5e-8a7d-b3cae5507b91": {"doc_hash": "2aaff47efa7081b9b2b063fc245577931d02d6de0a82258ae1210dfeadb4c1f4"}, "e2bccf67-3755-475a-9275-7c4838b08f16": {"doc_hash": "f72507c27aed9e50f45b26673be32172c8f39a223f76c12c021370a066b7e7f0"}, "9c7c7579-cdb5-4587-b652-859681926de5": {"doc_hash": "308ca663f86382309bd4f64e79bc1a3872849d55792eb79632f5215013d3140e"}, "dc2b8ff5-4d14-4459-ba60-0eb9a56a0482": {"doc_hash": "0485f4555559f7fca8d94e0c2606cb046116e3a6e02bed40b9f2905c02abf689"}, "1b2e37fd-919b-4c45-a1af-2591f5a5c5dd": {"doc_hash": "84fa4b73fb9316a0358ab543d8c864e67bb117b4d5857a0ffbc393f7845368fa"}, "d439e9da-880b-4b29-8ecd-f9f7de5746b6": {"doc_hash": "29dd40d3bb032faa4aeece1ef80bf97329aef1b00200274fc59e0e4369fa6142"}, "b180d3af-fda9-47ff-aaca-fb2f9e88ff04": {"doc_hash": "3d7308f35403cc1ba55b3c97d0509a84bc2527c33b5fefa29ba415c40c133b42"}, "62ab44a7-f57e-403b-8d83-94624f97e047": {"doc_hash": "27de788046da14d148dac33895a337f7ebfc7586e63d89eb4f59f6a2c6fad0e4"}, "322b5a21-e936-4afd-850e-0827bff193da": {"doc_hash": "37fe32878ca9554c77d953f2cfa6014bc8c064341d875d4a42103aa26deeaaaf"}, "509fae49-3c78-45f2-9fe3-58ec5be78a2e": {"doc_hash": "6588b3515d10cf3a0cf92279c6cf85b637755dbb4a6c841c89ba846c93cc9845"}, "fae5ff2c-3e6c-49f4-bc28-1deb19a2b22e": {"doc_hash": "fbf22e1b48d3e1f379185260214539ea7b7138ee5ebfa9b6914aea232d5d596b"}, "6acb5c0e-d2f8-4f1b-8ce4-cc341f2fe151": {"doc_hash": "a7a18e213f42cb303cfefb3296ba16f0f0992159ec836cc2fa800bdd90e5bf9e"}, "13f6fa16-111c-47b9-a430-03c29a6529d4": {"doc_hash": "071a67fdb90a4ebbd86be3795d7f58b01f2e5e8790090926c65e57a408f8b91a"}, "d5033829-430e-4970-b337-62efb928356f": {"doc_hash": "6ea06f027720f7c99adeaf20c686bb9f630da6e081e465f6931a88653e6e4541"}, "887b71da-2a04-4b2c-852b-66fd48c2fbef": {"doc_hash": "db3a08476536e607f4487370801e482a44c12511788d376aaf2f019afe9efd8a"}, "1c14d526-eaac-4c87-9c44-dcd7563067bb": {"doc_hash": "ad41bfc8cd36c5dcf04edc799b6589f4b8df453139ac084eab14acd8a81dfe1a"}, "de39209f-2ad4-4396-a9e3-cf580373aa07": {"doc_hash": "1c0acfaa22d6e8fc4e11430d8c5e607ed24b3125d06a37c4cd272a4ac5feb4ba"}, "65778cfd-ebb6-4723-acb4-2c52e34f8b32": {"doc_hash": "64c83ac5ab94bba71bbd6109db657aa0fc5b576167e46ee2c20d97cdbf5cce82"}, "3fe721bf-5a65-43c2-bc70-5c746e91baa7": {"doc_hash": "88d5c84d735d1f566f911fef9424c67c25a1807e8435a35fca4b96fc0240e90e"}, "d2841ce0-1c11-4015-b493-a80b13234b8e": {"doc_hash": "2349842771341563948524a5103c948d671e0221e4969afb8877359db62d99e7"}, "ff3989b0-eb6b-4068-94d1-7a8ac88552f2": {"doc_hash": "1a9af8cf46d849c6315a2ed568316c67a91e3b47e6c62fb142fc28614c670528"}, "e46489f8-99dc-418e-83e7-3c8c6e7d929f": {"doc_hash": "ebfec75903ec84aef9e7cb3e4ecaf5a8979e68b4faa95a3dc0344c06e3f67bf1"}, "ac1bd129-f08d-4b65-97db-de3cee2ecd9e": {"doc_hash": "b736a993cee4602a3a5f17174ae05d4df93fe16e47137d21ee79b3661766c05b"}, "1c9c5307-7536-412e-a581-0d42fdb27a1d": {"doc_hash": "8067ae25603ba4939fa4b303cfe7f5ede1fa221bc7a193410583e37723013238"}, "6e139717-fba0-42b0-a1c1-50f9ef0c450d": {"doc_hash": "55802c2dd39019d05b19f1c2ab0771da8e7eadeb6d13faf0269d8141fff1eacb"}, "b8dccb29-1eb4-4bd2-a339-6369b49c40e8": {"doc_hash": "34a369739e4b5ab5bf35b256ef39e645cc92f2daa8f204f05f42b539fb065cf9"}, "ba85b95e-9910-4acf-85fd-c1ef99a9900d": {"doc_hash": "de787d571bd5c9d6965e2f9a295fd5e2ed9193ac61f7f56c7ecd0cb49b4d9960"}, "d3732f42-39a2-4c03-80c8-cd62bee7e5a7": {"doc_hash": "a423773037564d42511684a9b33dc22193e8a0b3e06e04b8446c12374697adf2"}, "c66222b2-690e-42ac-bcb4-b4c78a3d70cb": {"doc_hash": "d77dd840daaca60ca7661e98a9cf609614a35743fe6d94f9b82ea5d1d9a77460"}, "2056e5bb-1096-45e4-bfd5-0773d9085022": {"doc_hash": "ae40ac6db3ae3d7b02d05d72ce898940982a84e4800d8298377346adc5d2d4b7"}, "751b8b57-1a12-41a9-9423-9b93a2a8c77c": {"doc_hash": "c315ee9040f93b96469a0f5eb0190f47bd7fa62cc5041c78f9fb944bd1fb3d1d"}, "402ac11c-c255-440e-9981-5a8da6facbdd": {"doc_hash": "7cde0f6cb6bac4d0caf36dbf8636ed8d2c7b19e9f5753e0910253c74f699aa32"}, "4aad530e-3a0f-4fa7-a8d0-b8ed4e4544fc": {"doc_hash": "7e3f3536ba54ae7725228d285df7afef136e1b626c047a02b3c3373f955589d1"}, "d915967a-31b6-4121-95a6-3bc2291bf20c": {"doc_hash": "d2dcc356623445006dd95864d2a1fc3fc0c77b9efab734527f97c47462677cc0"}, "325090a3-b490-4930-9b31-406df6830450": {"doc_hash": "7ef38364191d2ca1072dc298e6c619a93704b8b25742223c6ed58c3060a95c41"}, "8c2e6927-d5e0-47f3-b11b-e575ca8b34e7": {"doc_hash": "a7a0c5cb2229cc84f7f93bf36f3299dfcaffc07ea1d3fc63dfc08dd348c92695"}, "37317fc2-ac3b-4ad7-a748-896f3b995e38": {"doc_hash": "276d567587968c301e064ea2123448afa919591e141bb2fda2985ef8d155a160"}, "09098469-d921-43ed-812b-63f532cc824d": {"doc_hash": "9d5ef5560dc0a25f02a9cb1cc4b87211eb40302bad298fe861d08ec291905cb6"}, "be438d4e-c754-4b6b-b1a7-0d67b08de814": {"doc_hash": "d5a84d5ef64f520a4266de7f43104770ef749ebeb16504e93ec5c104aea7b44b"}, "3a099732-9505-4e42-bf00-0dcc353efb07": {"doc_hash": "3fcb72a268eb42c5613d342eb440fb47c81f3b746e583868ba8a5fc6819d8339"}, "7434995a-f7d4-4671-bb11-2694345a5d0d": {"doc_hash": "8895e0b33100f9f52d963cb9603c005df77e9ad94aab669e41d44093881be141"}, "5d5484cb-5d32-4a9a-8ff2-848d2c786d5e": {"doc_hash": "17e931003392685ed67a46a25af4f817ef3ff71f7a75f6fd8eaf3bc41aa6ffc5"}, "e932be7e-0fd1-4a1d-82bd-5658d13fdace": {"doc_hash": "bea277c5edda3591bc638375661a229819a2af8b27d7526ccc5af87e3a1abd8d"}, "e6783ce8-e9d9-4c06-b016-334fd0e03277": {"doc_hash": "46a4119c7e4b03f5cf573ebbe5f943f09b290f0c2b6fb6c6798e54cdbd9f521d"}, "6d8c5f22-340f-4c6b-ad9d-c16fb0ea82e0": {"doc_hash": "979f72589b992b7b472e883df4cc493c19c08de0d92f83c7525ab6a66468a3d2"}, "c5a2620e-0cd8-45ae-83eb-498ebe8814e8": {"doc_hash": "c7245c991af3d596bf48f84319a274cf5cf036bf457b0d82ea48e3a36e4a20e5"}, "e3d4eab0-48fc-4bef-b93b-4a4b81d1cfe3": {"doc_hash": "385cb60512c9eb6b9636cea922dae244dba22efb660f0062a2a0e23d4aaf67ce"}, "9548f2d2-beb4-4605-9c43-0dcc70d802ea": {"doc_hash": "4d575cb6c7be7520fbe05ac752beeeb458b1a8523ed53efac66dd9ed39a7c53f"}, "d805dc8f-769c-4b70-bc88-5414d8f7335c": {"doc_hash": "b712be633334c4fe93dc7ceb3aced49bbad9faf5e2aa252b137e9f0f6c83eb79"}, "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a": {"doc_hash": "c15ad33790baaea20fbbd34ad2a90048befd6b80b30609bcd1bf9ce32ad8565f"}, "2fe0eb23-0aab-4a53-82ac-4a4171d3e0b5": {"doc_hash": "77afc29629e06e5a2496f027dc9695114e1742dd6bf3e2c34bbda04bb95a6e84"}, "9a21361d-21d4-4175-87e1-8c0f1882d11d": {"doc_hash": "2360e5efc7c73d82882034852bb2b0f8e5e856596a3c09b81f374754bdf4e651"}, "b35600a0-70a7-4785-86de-dfabc06a0320": {"doc_hash": "cb743e77ae012d8db03f698ef11d8d9024c23d43a89e5e3c49fe8cc95e1a871a"}, "29332cde-0296-4f75-8025-e8accf6e30c8": {"doc_hash": "44bfe79164f8a668b3679cec595224477d8d74976833e9ee7e443fabfc1b5688"}, "95168cbf-9b7f-4f67-ae55-8dc338c7524d": {"doc_hash": "1b0d2a2c22903efbd96c022edb7b880411fa37dbc353b92f95eca31d8db04f63"}, "c5a2dc22-e171-4dd3-9390-64b754e2be6a": {"doc_hash": "2ccd3405ee6c7f229fdf8b7da8d4d14692f906e85af8cf8cc0bcc8bf80d6781d"}, "ef5c9240-2a8c-44a5-ba88-f822935c979c": {"doc_hash": "39b159d1ecf288cbd978e2c29e55fd564e262d7bc9cb9026e716e947ac34d016"}, "87573574-2b28-4323-bcb4-f31c56c10833": {"doc_hash": "fd298f761e5db36903f2b1c1064a68264e709849cebf370eceb037609bf58cd0"}, "c45a1e09-0190-4dfa-8e79-0175563d5a1f": {"doc_hash": "b1e906647d031bd242b57936e996d7d6693f008d78b829fb182e0fe421ba77ff"}, "9f2fe297-37f4-47c8-a289-0616bace1614": {"doc_hash": "4ec35de1e8dd88fb0040d050a3825afff0c82c9a4f1885a11afa5e0e084c5224"}, "99b33dc8-e380-40f2-8e82-558638272fdc": {"doc_hash": "6a0a23342753614fdf81e924b170669f4a5218d1dacf9efb164b391efb478708"}, "35dd6f66-043b-436a-92bd-f5329854c232": {"doc_hash": "196561f890180285ee8e335d2abd57c921dceba1a2fe539e51df903b0f3d3697"}, "4d09ad6d-3316-4a67-a68d-e83197ea7ae5": {"doc_hash": "c2326b0f8bb548d368387df03bdcf6d9dd095484ebf794e3903e6220fc7b6073"}, "6c806eff-2488-4e7e-954b-1a632c9871ca": {"doc_hash": "dd169cbc21a83733e1c1619df0a0adcc869f941083bfb16d964f582d8e82f9fd"}, "9064fc42-fd50-4f8f-ae20-14f4c3ca5498": {"doc_hash": "3cdc918a7a2b61c07f4b850aae74c059708b0ae4ca8a333b9d475e9a31c7985e"}, "dab284ac-d324-4a92-a9db-6483b48c1060": {"doc_hash": "62e5d41c7d64b661819a2c56fbad5f9a046c1ee2d91903d0e57571aa9779d665"}, "7f1bfd5f-1d39-40fe-aaae-f1709f2bb355": {"doc_hash": "fd09e5466e7b564a242c4fdec1cfac488c09379666288e59c2eef15e71f59d75"}, "06a52a33-36c3-441a-b9db-5a7ab76ec97e": {"doc_hash": "2dbde8301d093cd8b993e2bf35852cc564c68524c094d625b66ded5f5067e60a"}, "5cda8219-3b8e-44a2-a15c-9455b5ecac31": {"doc_hash": "1e28fc99420b7eb7300702670f11397b3acc16ac64b6b572219f8592ae3843f8"}, "b0cd3c0f-10a7-4db8-9add-00d932ee09c1": {"doc_hash": "eacc43277706bcfcd9ab6f9ab6fb0c4aece49df463c4897f98c120b118425302"}, "272a27d7-5136-446b-be48-d91825820c1c": {"doc_hash": "937c8e4270308bf26f0b049bf8b4c95ed771429a2dd55a530faba08ef1acf101"}, "89d98756-092f-4f3b-8061-9719a85a345c": {"doc_hash": "48d5d1e003d698dbfe4175a67cc93e97fa997d119c44b7f4b14948eeab0af9f3"}, "f064e59e-8ffc-4464-8fee-b7544b4167d7": {"doc_hash": "c56349d6f444156f1e5b5624162e4c82bfb07264c2430eaf3295697965a766bc"}, "f6eb0495-05b0-4dee-8ad7-0cfffe291b93": {"doc_hash": "29847f8fc973f7b7eea2ff5f7805acfc606c5cb4060e0a452c313162c4409a53"}, "387d8d3d-f766-45d4-b962-0ab54bbb16aa": {"doc_hash": "e689ad11f30b3fcef8d3772f3510f87975366ccaf3629cf8b2c20fa98baee88e"}, "bbc4a50b-73af-455d-93a7-d5b349afe919": {"doc_hash": "c2c73ce972b619dca66420a9a883fe85c66dc45789586e104015bbe1c14c84de"}, "361d9bea-66c6-42e9-82ec-bb3b6ccd16dd": {"doc_hash": "0d9973161af7da3086da8aade5347b3e9d5c45387471b2226bcce52acb83d839"}, "3975ea40-3c45-42b7-b85a-497ca1880410": {"doc_hash": "148711f96bb033cb29753854c11863bd80c0f3791fbbd948b42156ce2c5f1d49"}, "68ab3efe-b49e-46e2-afc1-7ed5a93cfad0": {"doc_hash": "806f943ac08793cf51b6cf36e66331e032be5d7289fe9c5545eee95d3b2ee686"}, "ea9e7466-18c6-4ec4-8916-e97a04d0ec28": {"doc_hash": "fb168ab59a6d001e6f57ca76bec5737237ec8edaa03bda2e3bd1e454db56db0b"}, "7ce17e4b-b923-4d7b-b864-65b8e26ead2f": {"doc_hash": "b39138f17fcc87f570405354f4af70148e43b270ae6c2818084fa9030990a544"}, "8d101230-b818-4c70-9098-bd65cf03a7d6": {"doc_hash": "135b1231628a6671c7a3ec5dfdf59d42eec1d83698e3e41f5771eac78c8a8560"}, "622640e1-9a40-4d7c-b502-c5a3624a089c": {"doc_hash": "6d33156a8a4f6fc5daa2176108b5d5279964bfdd30cc495ed69f5b6de697012c"}, "1f7db7cb-027e-4cf3-86b5-a5521b134561": {"doc_hash": "fee411732585c6980a2b3a6b9a54d2218829281f9f27e2e1eeb3cffc87403f6a"}, "040820e5-4f9b-41e7-afdb-9fc9d9760eb9": {"doc_hash": "55199e2005d411bfa3fa5713efc1dde6eb6abcd7080b585ae41cf7a0b9ba1ae2"}, "6f050d70-c5f5-4633-9909-c2583ab0d73a": {"doc_hash": "a6207c125ed617439145bb9ce52a36edf9bf2171f65d06ab2db27a953e437e3c"}, "d05f5b6e-0669-4aba-8401-871f0e6e3ebb": {"doc_hash": "ff901aa2754bcf64bcf45abaf1a2fbe4bacb800aec6c6cc0566b3c5bb5ef6a11"}, "8e4bf0a7-0de2-4435-97e1-b85caf8b3ce5": {"doc_hash": "d9001d6e08dfbd5893d1595cf2fcfd8a66960b0abc1f5870a75e69457dcd7c08"}, "00601f86-0ddc-41eb-aea3-be7b32cb73c4": {"doc_hash": "10fa907c6dbfc14e6cb694093c769820ebb6b2e35f4492e77b6e8b98f8695564"}, "07c6c677-f883-4f45-a193-d6850a2c36a3": {"doc_hash": "51df93c78cb9cd1cd22bf15c189e11a91439210422976ed5ec3a65767b72c91e"}, "cabcd918-d11d-4dc2-a67d-30a33c6580c8": {"doc_hash": "1df4c2b607789ca977ba9dbbb1d06a4ccf5d5a34778e2d952fcf2ad2534b9ed4"}, "8b7a95ad-35b3-40e8-ac72-e44a682c9c08": {"doc_hash": "520736e50ca9e30de71c87e3c06d17299f15db4319a2030fd19226d00a896662"}, "7f337dec-23ad-4ed1-aa32-0fdb166b6aef": {"doc_hash": "0f8e9f669c703d5579ad318a24c0f513c9036d5d8a01a106ad4f3ae116793b69"}, "99b212b5-3e44-44cf-aad3-4be0c8c7c469": {"doc_hash": "656137aac0884a68a44e9c36267f9ee62d0b9898d86d7370c844b640fbd6bf28"}, "37519b23-1a4e-4e95-a3b6-db1ceefff985": {"doc_hash": "3f4b6b5c3258909387f6f5bd8236d093e9a62a58494c56fe9938daec8f46bf2a"}, "5feb506f-bbfb-41c9-978c-e127f107ae17": {"doc_hash": "41093fa47554f9c3fc432fb541b0c05588488db8751b2537abbab604e83c8585"}, "73efe614-f166-4c88-b88a-5c077707868a": {"doc_hash": "64670618cb4c41cca463518a30afda7d1612b1035a15bd2f856bdd04874dddcb"}, "4a66d1d9-6d1c-4d72-8169-eb138cbb475f": {"doc_hash": "8ed2569b966688df768524c731d4ddaca455c45a776fb15541603b154958eba0"}, "790fb162-3bfc-4e05-9376-8365347dc51e": {"doc_hash": "2e9d291c9a76f5c4f8f4504b50e88f17988da0b7d79a69e592440cf33208f59d"}, "40be6cf9-a223-4230-ad2e-a6a09c06cba6": {"doc_hash": "5f44f5bb9ccba81841aae3b7cbe0e06232d9701ddd3b7fdf2120dc6a3a741129"}, "1753330a-d2d2-4aaa-8430-5a2ca117b379": {"doc_hash": "b266c11668d02a4d36e0b4d0c2159b52efdf432690cf581efd1912566ddded46"}, "155fbc54-3d6b-411f-8882-0e8849b86ea7": {"doc_hash": "2db90c05fda84b667c2cee694e86cfa9a4fa0e02f238bbf9a2d528cc24230c47"}, "3b26c005-9292-43b3-90da-a56e2c2b61a4": {"doc_hash": "aaf895e72c6e30e59a1e55ed2a2632a9cb5bf0b0b1759fe5dff12314c3f6d335"}, "a1b10abf-8fb1-4ce3-9c62-3039ae62535b": {"doc_hash": "fba19232f12c1344f84f10e8ebfb104270592e9fdb7937fe96869a6e14d79bca"}, "bd2911b7-46d3-4b15-a9f6-c491ea0d4d86": {"doc_hash": "f4009493a005aa4c169a1617d169ac15fccf29322252908475d44fc7381dbb39"}, "9df8c6a3-5497-4792-95ce-6d87fef33e46": {"doc_hash": "89f490f59dd0fc9eb062b3c34c2ccc8b93c2c00a5d0640f51e2afa20a089616f"}, "08a86fc5-6879-434e-80d6-7577f1ddc50f": {"doc_hash": "8484ec603ebc0fbb03e37c8d203cecea1d68fbcec4d891f2d6f8e53afa3bc77c"}, "972b767a-d050-456a-a147-125250297d2c": {"doc_hash": "6d66c1d4fbf003b0e3e59cdf4ad930487286be18ad989d49f08a0fe0e161e407"}, "a0f8d5d5-e4ea-40af-80a6-f1233de1d67e": {"doc_hash": "7902472a4f5b85e400f3e6849286e504f424f8767342822d1c7ac73ed1619030"}, "e53fafa5-16ea-4408-95bb-d4d86913176c": {"doc_hash": "03fa33be6253f6dbe102f6f22ec98d48e699531253b4489d1645aafbd593d222"}, "fcd201db-b526-4dea-ae30-039b08a78f64": {"doc_hash": "4db18680c30b697d9c0fa2feb67aa93da9c111f5e7d4643d47da290345c0c268"}, "fcddaa29-c0e5-47a0-8ef6-873ecc40bf39": {"doc_hash": "a3ed65dfe558b2603100f8c97be2e7c7d835fb9b5fbd0a317f48c7e1ec0b7761"}, "fdc4e473-29b0-4b40-a9dc-cba672f5cec4": {"doc_hash": "b15641394bdd2232fd589e00618e7c54efe8ed07f54cb05c2424575dfb02892e"}, "526c3c5b-c4b8-44be-925c-be6af6cff93f": {"doc_hash": "148bf9bc4c213fb8da16e7f5d27d919e8851cb180a1e206caf536a094028c5ff", "ref_doc_id": "075db9be-4db7-4235-9453-07458a0334e2"}, "0aec2406-0d3b-4629-bd8b-4f4bb36c3e6e": {"doc_hash": "27b6ba94cd72ce10fcbc16a2858d4ee3b70e044b4f67460ad7d98853c17ee0c2", "ref_doc_id": "3c7ccae3-679c-4e79-91f1-069435b17604"}, "1b20119a-8194-456f-bbbb-a39c0bac45f7": {"doc_hash": "717169348d6691fb545cb601c336ee99c837cfb10a12a5299f921e46ded4318b", "ref_doc_id": "3c7ccae3-679c-4e79-91f1-069435b17604"}, "6d480239-1c8c-4d9a-9fe3-41c891d732cf": {"doc_hash": "e60858ba6d9f5c1e066eafd627f949f7c99517448eb547f562edbaaf96264156", "ref_doc_id": "303276ac-e9ce-4e8a-ad87-2c1bee28fdc3"}, "d9754a1f-10ae-4406-83b0-953064d0c9a6": {"doc_hash": "74f64db758eea78b2d697d4d96099a6700b15a7ca704d2dd9739dc42e88ce483", "ref_doc_id": "7807a46c-17e6-46e5-ad3a-b0c37c7dcafa"}, "ad35dca9-70ba-49e3-9244-4a0655101d14": {"doc_hash": "378c463dba6cdbff6ff3f2666008925ae731f21fd7eaeb27d28829f0739770a5", "ref_doc_id": "db822a37-39a6-45b0-9448-40e9c0b9aaf2"}, "2fa43c30-2f5b-44ba-9df1-1ec234872806": {"doc_hash": "9c6ad47e40436c8231b76584d4f96c5001b4201ae8faf7623ebe6d7ec0f5a119", "ref_doc_id": "ff388589-faee-4399-b5b2-89ef549f38b7"}, "afc16323-8713-4059-a052-0d9d7cbecbbc": {"doc_hash": "3a058f9a3ab9e841140dae573d110af3f32686430574c261e05108c288c4d237", "ref_doc_id": "700e1f3d-3b73-47c4-b43d-d566d78b8348"}, "32c79e46-3ec2-49f3-ae23-15f9cf115943": {"doc_hash": "e4a200ef61c7e215fbde730c30de0f39698cd421bb1373d6bae3f3b50a65f382", "ref_doc_id": "0ba4e9a8-7f20-427f-868d-43f0004843d2"}, "c6606025-9ae2-4c25-baa9-971382aeb477": {"doc_hash": "9235a410d3652d342cc4a1bf7a14d4c9a433e8be4d03dea29cc9f9d76b51cfb6", "ref_doc_id": "e965e958-d8f7-4c6e-8ed6-9225f92b8d2c"}, "1c337f11-6037-478c-b732-63b587f1e6e6": {"doc_hash": "41bcd310ca0e4a5de2e9707e788ea71af83d9863209d232cb6de377041ad7464", "ref_doc_id": "366147aa-09ae-407d-a9ed-1e2ed00422b2"}, "9a78ecd6-03d8-4716-bb72-28cea8ae65cf": {"doc_hash": "28ea554aa398cd65768384aa2787a4cc37c15c1b4836f2b419b015796b0ff059", "ref_doc_id": "b91ed719-57ad-481b-b36f-4f486e1d960b"}, "fe96715a-7994-4155-b561-11b89bb90153": {"doc_hash": "1cf01eabd11c953b8f54a3e054b1683a2c44ce42f26950c8f0dc3e238a7d068f", "ref_doc_id": "980a14fc-88df-47a0-b06f-9c4476a88964"}, "3baf100a-2600-45d8-ab1e-8a0a77aa2b28": {"doc_hash": "d6a5d67474c9da62bf7f63a1a15a62a4cecfbd24025e784a615b7d01d18b910f", "ref_doc_id": "eb3fa8e7-0dfb-4d6f-9d67-1d340b4cc195"}, "2e76992b-7e95-465c-bf0b-441968864fd3": {"doc_hash": "0cbb6cd7e7d92367e5a07af1bd169a7ef3660f84d765b299fb58f35a9ae4093a", "ref_doc_id": "51623818-44ad-43f2-9bd0-851c7152f063"}, "e2efd193-fa20-407a-b98e-13453d31ac96": {"doc_hash": "9cfae417506c24a03be0597ab98f6929efb09329ea990961f62f01a5499a85b7", "ref_doc_id": "647b78e3-36ab-4c7b-abf4-3277a73226d7"}, "8fb2257f-95b5-4d78-82a5-ec72d814bbe5": {"doc_hash": "ded8d1aa2d77d7713953d2794d5d86e2a06fdcf9ae4450fc895bc69354570a97", "ref_doc_id": "e979c1e6-7e72-4b1b-86b9-7b5b99ee624b"}, "9fe7a86d-7784-4de5-bb82-a90e7dda0667": {"doc_hash": "0915d01dc9095335a2bc298b9cf5f13ce199dc4eebed7c1dee4733ee0b816e46", "ref_doc_id": "45aea9f9-0962-4a0c-add1-d0928daa150e"}, "b9bbfd14-a892-4200-9159-a5998fef36c7": {"doc_hash": "0e55d6b4f6f7b8b85dfc5aabc9a4db8918549d111666ebb6492813c17ea2396a", "ref_doc_id": "091634d6-963b-40fe-b822-680a060e934d"}, "1b94c38d-1004-4dff-8913-b2e480f438eb": {"doc_hash": "52de825fb86faf0077d1687c6b7541b6d692befb0daf722c1fdee45f2a1c28e0", "ref_doc_id": "90767b8d-058a-49f8-a42d-05f4469ea04c"}, "72975597-5007-4a9c-a4c8-00404ccf46b6": {"doc_hash": "fea78ee49cd39462070c7d0263503f0162144920d8898e9edce022fb028fb6b1", "ref_doc_id": "d8ef5243-6fea-472a-a550-f3cd1353883c"}, "420b9361-fee8-472b-ae33-50a8887603c9": {"doc_hash": "e643d56cb0614315a59adfe588abb9d918f7f8a01678a3484ee85db262448068", "ref_doc_id": "fec2d1e4-fd7f-40d4-b5c9-a69d722654e1"}, "5ef98096-335a-46ca-a9d5-47b2f3d66aa2": {"doc_hash": "b5c193eff3b07ed0db0d1f12c41531053a7ed2df39c59f80738a377db5a80ac8", "ref_doc_id": "93da667f-52c2-41cc-a649-e9ca7b46a0cf"}, "c4020200-a44a-42bb-85ee-b2ecafe28728": {"doc_hash": "9bd14eb040d4b73e19e5a90797878acc857386089c9e20a70ad3c31c97c7bdee", "ref_doc_id": "383bf45c-83f8-45d5-b6a5-756cae3e8989"}, "458a3b13-e0a7-4b00-a0c9-a282153ed702": {"doc_hash": "cc6c2a12d4498c5401d0e7db22cd2681d8765615610b2799ba5ff4b744bbc7d3", "ref_doc_id": "bfa0c1b9-f964-4956-a67f-12eac5f659ff"}, "1122ae01-74ec-448f-8a20-7c0a4f357bf4": {"doc_hash": "90fafbefd28d8d349315357922d623eb85b1abda326098d904199763f3352dae", "ref_doc_id": "bfa0c1b9-f964-4956-a67f-12eac5f659ff"}, "2ef57f86-47fd-4240-a15e-df75846880db": {"doc_hash": "cd73ef5524f67a21f16f101c205ff5d3138d374fa389a239a36ca7ff5145fff5", "ref_doc_id": "e76c156d-3ad9-46d8-ab12-8a8ff441619a"}, "d1d51558-9f4f-46ba-ba8a-04824fb3a16c": {"doc_hash": "bd1175775c9d702461b67ecc495bd70671e61be27f548d1d1b8db2227c4946eb", "ref_doc_id": "4fb35324-6458-4eb7-b08d-ce065ce9cbd4"}, "5cb1c2ee-8cbf-4704-b578-52333804ab10": {"doc_hash": "444753734f89cb7102cedcd64068d5a253b4d881a902d356ba57fca9df55b490", "ref_doc_id": "54848abb-2367-4766-a30e-57c75f45870d"}, "c74fc8f6-f6a7-4781-a4a7-0a28b7eb3cd5": {"doc_hash": "61c93b8aa1311868ab836e70b70ff98e326b43d1e0ac02a1bd1d0f210ebe435a", "ref_doc_id": "1ff3db94-a69c-4747-9cf6-d93725161af3"}, "fc5861d4-a7e0-467a-8436-5342b71b8e0a": {"doc_hash": "12791a8239e5b215b54685dd57ac1b75744e2b0675e2366c2f52243afaa797bd", "ref_doc_id": "34e83e49-6a80-40b7-b033-ecbd1b8f3edd"}, "617b2c11-fa3d-4382-bc29-69ea80f26192": {"doc_hash": "57cad62d62ee0f56cc794ea46b305e9d12729b6f2695ae5e48cbd93d8380c3c9", "ref_doc_id": "0e4262c3-6284-4f28-af62-08877c89c68d"}, "688ae55e-c1fd-46f3-8af9-b201a88e7c08": {"doc_hash": "da974607a3c0bf6e2a9f5bd395207b9235e27859be9d7dd6d1dd12a29f3a4ad7", "ref_doc_id": "64e57666-bc7b-4175-93ac-f7f13f95e214"}, "71c2ad04-5856-4b19-b597-0b225a3ae743": {"doc_hash": "60c8d7fdceb353c52732d98e87ef5c3fc54b03b6ec6573495d3cef19fcd1c057", "ref_doc_id": "64e57666-bc7b-4175-93ac-f7f13f95e214"}, "df38a0e3-a322-464d-98d7-0bdd0a49878c": {"doc_hash": "74f580cd9314c1cc10a09de013afd8986b1550b9d8c3ac9007712f92421268ba", "ref_doc_id": "e98e7cd9-bbd0-40c9-80b2-9968238e8538"}, "efd5d951-a3bb-4598-b9fa-ac7ecc2ff03d": {"doc_hash": "1a2692fe6d75d7cfad854d6d7bba1702704b55e911725a431fdb863273872a7a", "ref_doc_id": "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f"}, "52579ebc-66ed-403b-8c02-67faaa70f2dd": {"doc_hash": "794197b2a990cd5090f703431928913fdf0822ed47d3608314100cd1ed1c403b", "ref_doc_id": "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f"}, "afbb7d91-9b80-4ace-80e5-1e92d78745a8": {"doc_hash": "17934c9a0eaa2957ec105c728078611e3df7338a9e670ba88ae1dcc720983cc0", "ref_doc_id": "2dfb9ef0-3f4b-4eb0-b082-5bb853c5abc9"}, "1351cde3-006f-4ff9-9413-52fafc10dc02": {"doc_hash": "d2803461ed08400c94ccecaf5fbe60451d0754debb261d8f6f125246035a03e5", "ref_doc_id": "066c3e72-7c84-4af2-9740-655bb40a354b"}, "15612915-915c-437d-b99e-1cc3d0a324fd": {"doc_hash": "77874b76cd10b4eb92f33f4b05a5408f405cc03c3d7ec93fa06e402ffb9f4be8", "ref_doc_id": "2901853c-c1de-4047-bd27-e8a29c03175a"}, "02921768-2819-4f45-a737-0f1ea9038902": {"doc_hash": "5c9c5aebb91bf411988165ba501672748f1c1ce4c68eeeaf0f9237972422c8ac", "ref_doc_id": "7483544b-7d1d-4169-96d5-e983902e3074"}, "39420bb5-bef6-4d9e-9aa8-660b7435b39c": {"doc_hash": "357f97592e6be353d026df5b5e30a0f8725456f06d7230b0739190d9db314b4f", "ref_doc_id": "3b64a1cd-3fa4-47ff-8611-a179d5405894"}, "9b4e38ce-6a4b-47b5-b120-d131c66820ec": {"doc_hash": "63e7bf85dd55dff9799e3898b8a8838a16992e18f1d20a066dc4dd7f7bdc88ca", "ref_doc_id": "56f07191-dfa5-4026-b635-a76198674925"}, "dc7ca1bb-41c3-4e80-83db-38e72a4637ef": {"doc_hash": "7fa7395822527d7c172fb6813e108c6686984d8229de97368f60cd1c4a1f719c", "ref_doc_id": "e0e64cb1-d8c7-4cc7-90f1-3ee0a552b5f6"}, "e15f50f9-4ee6-472d-89cc-fdf98ceaf2d3": {"doc_hash": "d05e8e708d644bf3d77604b7ccec1f20f5c632f052ed4c554fee17b6c44fbebd", "ref_doc_id": "bcbb7997-ba2a-4339-a5da-2c571bd38e24"}, "d61f18ef-ef2a-4c01-86d2-053493b44204": {"doc_hash": "a2e178af928965229c5a764242504a802ed089a5266522b54b39ab35a816066b", "ref_doc_id": "e826982c-d87f-4f5e-8d0c-649292b35249"}, "d4069b43-ec9a-421c-88fb-75fae23e0f90": {"doc_hash": "5629cd8bff74fc02a3c1bc29e8f9cd18b7eacc2d3957e7f449924f55b55b8d52", "ref_doc_id": "ea553dd9-611e-4fb4-a02b-e8b1cb0747d5"}, "14b831cb-9955-44b6-959e-ed8568fca34d": {"doc_hash": "a9a950bc9fc589a9eb884f1e8212e770c55658f82ab2258d94416b3164914f09", "ref_doc_id": "900eb617-93ab-4560-9363-e2ebd3c61365"}, "ca1d8d0a-aa0c-46b5-8da2-855c7b57e27f": {"doc_hash": "898e994607493b730eed3d0db808b8ab8c132cf1c8dec57c089b17412126837f", "ref_doc_id": "80159f92-b959-44fe-aa16-52daf54003cc"}, "dc0c0cb8-bd52-498a-adaa-46c10895c958": {"doc_hash": "93dc5312e697a7f5d12880a2f85123fd76c69ca7eba8dbbd93ebf70566d05d53", "ref_doc_id": "75fb3ec5-106d-4d38-89f7-9232f3efeb21"}, "0dae402e-c028-4729-b541-5ac6a7262eb2": {"doc_hash": "87fd544a3940ea6862f03a01b9e1fbb10e8feb262ce23a90d8c844734c7af9c5", "ref_doc_id": "95eea06c-6e4a-4ed1-9f25-6ba620f7b527"}, "63127fe8-b98f-4014-a586-0e94af2c1eff": {"doc_hash": "549b1c04717d322d4ccaf82b1f3fbd1424015fc6d118a9ccebf2524ecbdb2db0", "ref_doc_id": "0564509e-ae0f-43c6-b2c9-ffa5faf49365"}, "5ff6094f-d1d5-43c7-8203-3ab0f03ef667": {"doc_hash": "c87f7269321d44223d9467a9a532c1c3b2927fcd083f023630a0cda9e26dd0ee", "ref_doc_id": "fc7405c0-20be-430f-9b50-46135d6fd268"}, "0567755d-3673-4388-846d-d8a0ff9a3f0b": {"doc_hash": "8c9490cd40e4402613bc5485adca8c3a3cb4ca609a832a77f73972f3703884d1", "ref_doc_id": "8a08184c-5b08-430c-86db-f6cece85978e"}, "621c33a7-d2e4-4871-b21f-50244eaebb41": {"doc_hash": "58afd0219fdf94dd936d2410f8603c63d7caccf1b95a24ba52aac186625adc53", "ref_doc_id": "f0531017-0b02-49f4-ab25-c8018e763615"}, "a070f4e4-2b1b-4824-8155-f65e2caf3c06": {"doc_hash": "551d2b2930004c2c0986e187691596cb76c9a5f104d618916a6ad1a55d3cb157", "ref_doc_id": "5802b44d-ab6a-4047-a6fa-5dfeaae680b4"}, "e448223e-7d82-4079-a3dc-352947940a1b": {"doc_hash": "26cb7059e9fab5e1f2ff81887ffeda104796af0186b6e00310d300862bb00766", "ref_doc_id": "5802b44d-ab6a-4047-a6fa-5dfeaae680b4"}, "3bc161b1-54c3-4d70-b58f-5361f5aa7e65": {"doc_hash": "24a03ad8a36a2bf141b4a54a203d47b937ae0cf348474aa785a2f5cde46fdca3", "ref_doc_id": "3f279c0f-c197-4ce2-b8ab-a6184a28a90f"}, "e8743e81-a413-460b-8ade-7b919a3ceea5": {"doc_hash": "7f956cbb1dac8cb3c32b6df63255beffa1ce800e8afd58a3c10684661c23b1ff", "ref_doc_id": "82476317-a5d0-4f0f-84a4-62b22410fcb4"}, "ee23c338-f702-4027-9e16-614b15d575a5": {"doc_hash": "ac94763ddcd87c94e632a557ca114a2ad64bfc6f8ecbf73b0a41dba0f0ec4a55", "ref_doc_id": "90ea538b-b255-480c-8e8b-048310fd8803"}, "7b3d686b-1ef5-4449-90a0-4d8d79ae565d": {"doc_hash": "796651feaf503e4e518bbc87b62f7d1c14eb983dbd1b2cc13dca669f863877d9", "ref_doc_id": "71dca858-631a-477c-b413-3223854639f0"}, "798a72cf-a2c7-497f-a6e6-50b407f639bd": {"doc_hash": "5dc6a739459b4abdc1eea21699197dc8e7ab74983532e036c72a48cbc10fd197", "ref_doc_id": "71dca858-631a-477c-b413-3223854639f0"}, "f80a1ad9-0d34-4b33-95e2-556a3f977d56": {"doc_hash": "00539c0b3d54975d8b4e76fbaa83151037b9d8b02f7abf0783629d716926a8c2", "ref_doc_id": "2e745575-9b4d-4256-a67f-4e7cf876204d"}, "e948857a-c567-4fc4-b3ca-f3fbfdb9ff3e": {"doc_hash": "f58826b83344b9dad4a8ed79ba95847768754f6fe1330e66b7ffb0e9024f35cf", "ref_doc_id": "cfb632d3-dd2b-49a9-84d7-423771ae8a9e"}, "82d8b0ae-11a3-4e78-b5c7-cd8c15cb3618": {"doc_hash": "ddc161093708b4c0aa91b9ac8a760c906b7709b3d696d2f071ea5144bb2cdce4", "ref_doc_id": "cfb632d3-dd2b-49a9-84d7-423771ae8a9e"}, "b4f069d5-4d1f-446d-aca5-d4e1e77a6388": {"doc_hash": "4fd4dc3d9f2eb49abb12d7dad5d38e1eacab6b2fe4e4a8365054de2086cabc1b", "ref_doc_id": "c56c1a68-488f-4835-9ff3-4db7672e8e8f"}, "e1d26386-7e1c-4f28-88e6-7681430f12a5": {"doc_hash": "68e9c8d77b1230cf2642a113dbee5e56d5a7d816ebf7c60738706cf755c25f51", "ref_doc_id": "8cd35e64-a184-43dc-bdb2-a9ce9ec3beb6"}, "4040f999-0ddd-4386-afd8-8be89c42ff7e": {"doc_hash": "0267cbab174899562362a9429e59cf90275a8cb0e7643fc69db6ed60a35588b5", "ref_doc_id": "324dcdbf-2be8-4e1c-bc86-821c1548b27f"}, "3b47287f-89d0-4059-82fe-26daaa7c0148": {"doc_hash": "de69867afdfc3e965fde39c811911e2fcd0ede05f2f3b35ca9edd4005b806139", "ref_doc_id": "940432f0-16a3-42b2-a84b-89d06c35c3b8"}, "5cf41f68-291a-47a9-9558-6645c51d5644": {"doc_hash": "0b264adea473ad9a0072b5872a0ab6c364ceea036ae2988225d802eb4f66160b", "ref_doc_id": "76a8f7dc-872b-45df-95f1-446323ae832e"}, "aaef0a2d-a3be-4337-b844-36ba295ef9ce": {"doc_hash": "75da2c99b63a7b21baaac752aa5db5c2dc3daf396bb96370e25226464ca4a29e", "ref_doc_id": "76a8f7dc-872b-45df-95f1-446323ae832e"}, "d3527a2f-2c1f-4dfe-9f03-165eac4b7640": {"doc_hash": "4673500d97ac5cb285e29d032d54512bd2c210c5f70ce87c477118803d8ef442", "ref_doc_id": "0a99e186-a6e8-451b-a995-b702e942d7d8"}, "e5b6d6c2-bd32-44b7-865b-c8b3fd14f1dc": {"doc_hash": "51ae05ef940b98507464f525d0a9376533d28405d51e9c13e6613bf83ebb91ac", "ref_doc_id": "6597ed24-9894-450c-b81d-2acf0e51a872"}, "9b5ae2d5-0246-4e52-a95a-236e0e3be597": {"doc_hash": "d35bec86ef62fb257f1613477bde0fa646be53498132769cddd824329f90e293", "ref_doc_id": "878538be-5da7-4df1-9f3e-57f44cb10781"}, "608b586e-f845-4802-88f0-0050c6f8c2b1": {"doc_hash": "2a9dc7d9c5b3d61638d347485d32fb71bf47dba7d5bfe6c02cb725b94e3eebb8", "ref_doc_id": "9c6f062b-9a97-41ac-96e3-85a628d0c559"}, "580670f1-4006-49fc-a83b-e944356aca7f": {"doc_hash": "0cec9c99905515343e54a5832d19fd4e8b4ef10babc377b5897be8fc6ad88ff9", "ref_doc_id": "9cf06106-de31-4156-83e5-73df731496ba"}, "5af8f194-fe35-409e-adca-12377bc7cb3c": {"doc_hash": "2896ba688f6d803e4de2bb394cb9d0e4abcfe6587078dcbf238adf0ed5221f41", "ref_doc_id": "144b1a39-1b3d-4ed9-8439-18288484aac4"}, "f830c010-6a07-4fd4-9a32-75e86ea3a692": {"doc_hash": "ceedfa95680c3aae25a7ae43c2aec4cc3621b07415a2423c87263cd51a7e4f24", "ref_doc_id": "8a0598a4-cfd2-436d-b7ad-8966458e1471"}, "d8a83375-342b-475c-819b-0e6182d3a313": {"doc_hash": "c3915eed6eb313ca9f4d4744b36cda72bad5f38da9863c11a5fb4a19b5679caa", "ref_doc_id": "adb0856b-f387-455a-9906-1f864643e493"}, "e28a7288-e39f-4fc2-97a0-519ff44922c9": {"doc_hash": "d03ec59e4270e15d6187a0188729ec09ffc331d5fd11c0e4126ac8398aa3383e", "ref_doc_id": "adb0856b-f387-455a-9906-1f864643e493"}, "e7ab5664-f663-4c91-a775-6cde33bcda76": {"doc_hash": "208b477979447869507f6d0afc1a98a612fe03e8b25804e62c609a24ddac9835", "ref_doc_id": "0b63b601-b0bc-4ddc-9d47-975420677787"}, "36f88654-f2c3-465d-adb8-ad4d3a7dfba5": {"doc_hash": "b2c4af98754263a81b768f9e92ce270084e11034017a8bee6010621dd62b02f1", "ref_doc_id": "f0f81dfd-9dfe-410e-9b57-ccfbbdf49631"}, "d34f8eee-e49d-4be2-b3f9-1dac2df36b47": {"doc_hash": "93bbc153eead90e75f8de42ef3d00e82df96c12a315df85e2e1f13eae29178f1", "ref_doc_id": "9ff633c7-1183-4329-bb52-57fa2a400581"}, "5f74155d-823d-47a1-85ba-bdce22fe0b57": {"doc_hash": "1a828cbb6fe202a70bb0157a237dca88a0e663f046e17ec1015b23c393643cf9", "ref_doc_id": "5ea4b656-39b3-40fa-aa00-8c1b23cf16e0"}, "7c88de0b-00a5-4b97-8b9f-62d1e7cf72c6": {"doc_hash": "9e61bc846fb19a103d4daff7a20fc3d05a704583f2bdb41784918bed35fea20a", "ref_doc_id": "e5aa79fa-2c16-4962-86d8-d67e34f342eb"}, "d0a7255f-0600-4e38-8c9a-5c99ea8c3a2b": {"doc_hash": "25afc6faaf6779186063b43718020d52f49d809bfe0ff07fe24e4d8c05a089b9", "ref_doc_id": "e5aa79fa-2c16-4962-86d8-d67e34f342eb"}, "9173dd7f-89ec-44b6-8c8d-578ce1fc8340": {"doc_hash": "6626757df29dd5b788e48f7907bb94fb02e92f39c7a81b8b6e03b6b120d53218", "ref_doc_id": "2dbf738b-e3eb-4456-b428-e5dadcf5faf4"}, "aac797bd-48a1-4fe0-aad2-38d3c71aa0d7": {"doc_hash": "6899c068d3adb6e91848f04715d67b3b50b4797bc0b0441d810454898e57c8dd", "ref_doc_id": "cfc65701-b890-408b-a641-bc27885335ad"}, "4edca1af-596b-45b8-bb03-8bfae277ee7c": {"doc_hash": "d7413f5f467a8d01fba053e7da3cbfd72c0fec6f658848ebfa66f3b011923220", "ref_doc_id": "89345f47-f421-4f8d-9bca-ee4334046c3c"}, "a45a1268-a23b-4dd6-8386-d337db643406": {"doc_hash": "4de41aa56ce870720eeaa8fe6a1a6db14afcb7973a8a66c5c6a2413698356075", "ref_doc_id": "5204f85c-1384-45b1-bcc6-0c7e701c18da"}, "ca986b56-f434-47ee-ac26-e8091ce70991": {"doc_hash": "03807bd20a2c3b28be4fcd1cf3ffe173e19f7951c4b6e2267ec92e0259295327", "ref_doc_id": "ce1807f5-fa58-44d4-ad52-ff1e9f650138"}, "0fbd9597-9d61-4320-8a41-02de374eae69": {"doc_hash": "31d50eec724e5ade4c7e52c5705ac35fd2f314a013423cd28df8670aec988e2f", "ref_doc_id": "861c7347-7699-40a3-a71e-beb5176f4823"}, "1735010d-1585-4a4a-bc1c-b81220bd5889": {"doc_hash": "a13a4327d8851d3a91a264ff174002c6a77c153df5676e1c8afb6bae0ad3f5b2", "ref_doc_id": "e1a27ae5-8d9c-4330-aec9-20b227981819"}, "22428784-9b75-46ca-b7db-46562ba7f158": {"doc_hash": "9abc4c11068a7e7aecf3e6feaf3c83dd01c0ef3253aa4cd6ea9726cdaedfb2fd", "ref_doc_id": "5e98addd-2a04-4921-97f3-dfb6ffa1b013"}, "11e1fa9a-39d1-4e3f-ab43-fc81b536a520": {"doc_hash": "72ba9641bba2a32a10a2df436a018cdbce843afea0a7dfa98d4b26d16354a18c", "ref_doc_id": "c1709054-8668-45f3-9eab-9a4e260f987f"}, "c5139829-9765-49fa-adeb-0047468129ad": {"doc_hash": "8fbef6ba74ce6901891d5d82779a8436259545f8a0adb232c8ea44175aa56905", "ref_doc_id": "696153ec-8995-42f8-a354-86d8817bfd1d"}, "718b47a3-157a-414d-9fdd-67fbc40646ee": {"doc_hash": "949ea32113d391a7d8308f55a0ca36fadd4fefcef189e0055fca27940f704749", "ref_doc_id": "06ae15e2-be6e-4207-8d25-2d34c5c19fb8"}, "d9e89426-c090-43b1-9e40-2bf6df420dd7": {"doc_hash": "66e282acee1fc671d12afa2f31d0c8f88007b0dd34e436e1d17efe8957542ee1", "ref_doc_id": "9e625475-80e7-49a2-9a20-9b9a5a6f56f5"}, "2bcc3295-5e4f-44ed-be33-eca078f1daa7": {"doc_hash": "e966c0afe98aee98c05011acdda88b23ad6696ef2260b587b3b6861c1f3bfbee", "ref_doc_id": "78cee554-7b6f-4c00-801d-c6834655dc37"}, "70e1de84-e2b5-49ff-a92d-223e25d32867": {"doc_hash": "8d630ad4a24cd309bd52d05442eeb23ccc87119796ec2f04df459b9c098d1e29", "ref_doc_id": "ac10c795-8942-4d10-b0f9-bd0fb9115bb5"}, "d1517016-271f-4d24-9c8d-29287965a684": {"doc_hash": "2242b7323bb4f17c49779962ba9ad69783bfa6e149ada647f52abf5433439aaf", "ref_doc_id": "7833e948-0bea-4be2-a28f-f7b8fd2d9d81"}, "a356a7b9-17fe-4ab1-9278-8a8507cf6a25": {"doc_hash": "2e4c14b462f0aed567d2f846660ae58cc0c083c448d7c4444f11ab36458ae89b", "ref_doc_id": "fefc01b9-e391-43f2-9688-a6adf7ce4991"}, "ab2f3092-86f9-4a30-ba1d-1f4bf76fa8b3": {"doc_hash": "3c954215e55ed1e543b07efd6c9e6d266099b990c12cd9942b511865d7182b3a", "ref_doc_id": "96ed40d4-f957-4dd1-8b71-62ad5944e4cf"}, "dfc10e13-b91b-49f3-93d3-56fe48cfac82": {"doc_hash": "3b037435393cf150e58543c46c6ddb592e208fb398786b1c7e4066d9930c9571", "ref_doc_id": "d9556498-df47-4918-ad36-bf1595044d6c"}, "c9bb7289-dcfa-4922-a8cb-85c492f8b691": {"doc_hash": "92869c85ab9f84119066b0c6c2d905e1cac9f92a04c98e03f73a9a63954fa341", "ref_doc_id": "5225adbb-dd33-43c3-abb6-b3a31f2ba2ed"}, "b7cb82b0-5352-4950-a5e4-8823b87d95c1": {"doc_hash": "30aab246ae157cd83ac6251132678341804da83d2b816923019b8bf2bb625fb8", "ref_doc_id": "6cfebddf-e926-44f2-a4d1-abda904341be"}, "c3da5861-c3ed-4929-aa8f-df31fc0f5f92": {"doc_hash": "42d05229b180f4edd6e128a12a29780ea462d765489f85c4376654c7e5cdf202", "ref_doc_id": "f6ecc8c1-6a8b-4059-adaf-4ba635c13943"}, "7fdb741a-7973-4b5c-8af4-a3830c022963": {"doc_hash": "eee61a5f979f538cc1e7c9ec36fabca3828331469c55dc1762f95155e5d393da", "ref_doc_id": "32b8c4d9-d720-47cf-a0df-1b4e8af5e3a4"}, "4485818d-698c-4acc-9908-6033abc4c01d": {"doc_hash": "cc59b29fd500b3937c7e0f9ff340de4cb7db0c2cb1567b1c619d85c84110144a", "ref_doc_id": "908fb9c6-634d-4f78-a3a6-34fd213998ab"}, "dbe33a52-1c35-48b4-9202-462e23819459": {"doc_hash": "92b5ebfd30cf719a6321973d5d28c01344626dbaf5d5f451494afedfd272bfb9", "ref_doc_id": "e23e11a9-4c5f-4e21-ae69-0b26d3563dcc"}, "ebaa9494-4d74-4a3d-9617-0c2076295998": {"doc_hash": "a514be12ce6c35b4792a7609c82c1fe3fd725e45b576a82e8ab73f612872d593", "ref_doc_id": "6157f50a-5166-4184-a6c2-c23c153630c2"}, "b8ff9687-5a78-49a6-95c2-e3009b1b90b9": {"doc_hash": "6b3b94c7353b704e771116c9db5c4014b084caf998a3e7f1b6602d7c4aac5dd8", "ref_doc_id": "dbdc7594-bd7e-4b3d-981f-9c68fb9dd3e5"}, "2372a8e2-8c35-4e6b-b1f0-86d3ac577cdd": {"doc_hash": "95edc4214342690458fe4d4b7f01e7e3c829b0bb957ae747755f147ea05539b9", "ref_doc_id": "a3042550-4bc6-45c1-b23e-21fffed5ae30"}, "ab97a4fb-5410-406e-93bd-967003265df0": {"doc_hash": "c6e39739e8c29db1da310e44da130baf3175adb34ac9c31f6cb99f6f171425f1", "ref_doc_id": "abfc535f-e449-483e-ae2d-024f1b220c4f"}, "581ecc59-4022-41e4-b894-88c6881d1232": {"doc_hash": "fea1d554fd0e1f4c5ecda779bf3c4f04ef5db28ff93c1949656140e0b437c83a", "ref_doc_id": "b0862230-1e5b-4799-a1d4-238ae9925d7c"}, "5a0b4547-8b5a-4290-878a-4def7d1fd0b5": {"doc_hash": "f8cd9dcfd67143923c3541ac735f466e6c0e2b27c329f069d30c0d1415e8bcd1", "ref_doc_id": "7235bdcb-c70f-4d80-b12d-ac6c80d89de9"}, "ca71126b-6a6a-4139-b317-321e8999d8eb": {"doc_hash": "8e828c64bc62ffc3d92888c774f51152d08316b487e0b115d07ec21fc95fe29d", "ref_doc_id": "a28f6c02-f15a-4b90-b459-16883fb0484d"}, "6602c73b-d2ce-4c5a-8c82-1061c53a0ec5": {"doc_hash": "414e628b6040e2e09debd55821bcdfb564ac6bd5a7da43634a5e23acd2fe5d1d", "ref_doc_id": "a15d4f20-a0d1-40ff-afdb-a06d16092107"}, "73d72308-9981-4265-876d-5a7584b2f3da": {"doc_hash": "177acdac69bf8d65b3961872806bd966edbfcc539bc77e82f5f1b2c6e984e225", "ref_doc_id": "52d5484a-0672-4188-98f8-e0ca2301263d"}, "13d065cd-2386-45a4-b57a-ee34c706ae0e": {"doc_hash": "dd5ba30bd08ea4a78b987b81b87ed26f04fae1811f59a02dcb3c83cee7165362", "ref_doc_id": "78103799-7613-4407-945e-94a9150a80f0"}, "f4afc7b6-b821-4097-bf3e-33b89340266a": {"doc_hash": "d9674cb04a3a132fac5e080d77fa1115e19135ec276090726acce71cfb5ed509", "ref_doc_id": "f5ed3e2a-2b50-45df-80e5-8411d92c477a"}, "2650b159-85bc-4615-a56c-f40f098ae1f6": {"doc_hash": "2f3c3df32acb6a64a7e132b62aa6b7269808becafd89db748a66144b006f7ca8", "ref_doc_id": "49d9c393-83fe-4760-a270-6657ed21cc2b"}, "9d32ce50-43d6-412a-8645-daeef5737aee": {"doc_hash": "caedf810c24315b4fa774287b7c7834d2cfb54709735e17eec4b93f45d051862", "ref_doc_id": "1079c78f-53f1-40e0-9e5b-9e0fdaf38c44"}, "726f0e23-9128-4fe6-99bc-74fc9003fb66": {"doc_hash": "0c138b6aa73d80bb417d8445f8bd38a426e137666fc4636ab9b0ecd78f5e73f5", "ref_doc_id": "76ce7475-d630-4051-9a77-14cbb43c4a7f"}, "66058e73-8f5d-4bea-8c62-1d70ff1b6647": {"doc_hash": "1226909511e62f39a4fbd87bf059f7340e2577fd2b4e4df53c5d90382cd3e043", "ref_doc_id": "e9ad0c96-688d-4857-8d6a-3d9b9c812be9"}, "5ee7ce2c-812c-49b7-8bba-f268106518f1": {"doc_hash": "84260ec47dbd57daedc8989d77f822459f7918b8d5ef25555a1db466ad4f9609", "ref_doc_id": "83567cf1-470f-4e90-b2cf-3fa62d3aa504"}, "c133d795-5ce4-4f5a-a43d-2c0f1fab6979": {"doc_hash": "bfa1614d417cf33d285ccf401f4094c640870e5458a31e298275bb79bd947c98", "ref_doc_id": "7e04ba52-0b0c-4a6d-8bce-83e9379865f3"}, "d9bb1118-e94f-457f-91b3-5b9f2a4844e3": {"doc_hash": "66eae8eb352f7df1d347dd2fb78d75cbddc977403006b2150c62b266a509eea0", "ref_doc_id": "fce3a458-297e-4f35-bd27-c75230b76427"}, "ab68a0c6-3831-4683-9d0a-2e33e9f60866": {"doc_hash": "5f1467f753471cf8eece26203c5bcc349ce2b77547b1301c967ef9bf72cb272b", "ref_doc_id": "564770a3-2cb1-468a-ad96-d667d0746f3a"}, "dbe06757-2df7-46e3-aaa6-8a2d8c768822": {"doc_hash": "ada4f819b6e624c4124f393ffac76827f74a4aa2c77f1a134d231333a16f9cab", "ref_doc_id": "3a17c383-a0ae-44a0-a24a-d61cea00ba60"}, "fac961eb-8fdb-49d7-9e92-ec1d59e73e0a": {"doc_hash": "82cb4194f67f2ce15acab9d0ca8b195b0ef2b8d0ef423ba12279eaae6de9504c", "ref_doc_id": "7e3a8dee-0b72-42d1-80b4-483dd1820252"}, "c061e1f6-43ec-48e0-b7fc-de6548d17f2e": {"doc_hash": "350f4985e8c9006c0a1834f2c98ff6f3cb6bfdc39f6768d08b4809fbe5ff8cd0", "ref_doc_id": "457124bb-7086-4e5e-982a-87329735e09b"}, "1800ce8a-21d3-4ac7-8448-3662a737b7e1": {"doc_hash": "273dc8881a328894624401d9391eb43cbe9e1d7790d2dbba33f18bdaf310141e", "ref_doc_id": "dae985b2-2307-42bb-b856-7066c6347b55"}, "e08db5aa-26f5-4a13-a995-70619c97b946": {"doc_hash": "dc0f1733d5a5268c0697d282fdbb98c61cb20aaa216188bf1fa0fc99bd995e53", "ref_doc_id": "0050b886-f95f-4df4-af3e-9c55ee983186"}, "7b0c2ede-4f53-4069-94cc-6216b071594f": {"doc_hash": "ab32c3211e6f9f8566703d067119a285901045fd3a9f846053b0730c771f06d5", "ref_doc_id": "2514a873-f337-40aa-bc70-b32e5789bc96"}, "c8688bed-0e56-4141-a041-a3b17e1d606f": {"doc_hash": "4ec9c5a29340a196386e10d8fbc3f97589804c3705c8bbba7c203f490be07bf9", "ref_doc_id": "536ca54f-82b3-45e2-8504-c37550f6ee08"}, "32fb41df-752f-4385-8dd1-2087a2c6c18d": {"doc_hash": "5f5243c0886624054d41bf2b0f560c1fc60bc52a93faf9103d6cee8699badc25", "ref_doc_id": "0a99f145-3fe6-486c-bdf1-bd00041c0b62"}, "8862eb2e-781a-4e32-9849-3f6822c27771": {"doc_hash": "817132c2b20f1ec05982f8802d8ba6a590327b3550eb11848c9b072ea9df8133", "ref_doc_id": "d55c31d3-22e5-45e9-bc98-d7a39955f214"}, "51c0d53f-a883-4f56-8079-9bbce223ef24": {"doc_hash": "cce933e12c91d3e3c0a186bc7543491675d0345f1e53ccd1afe895d7f2fe7fb8", "ref_doc_id": "d8c04afa-9dc7-47d3-bab7-1b965644032f"}, "ece149d9-6598-4793-a254-47a5eeccc090": {"doc_hash": "173571a6182a4520b15f1852a2b72396efcae79d9ca4f9832b4161aa74f04040", "ref_doc_id": "4ee7901a-cb2e-4af0-9e91-9ba796a8e75a"}, "b3d821be-663b-4401-a243-8c41608c391b": {"doc_hash": "7b28bcd1bc74d9b0b4256f1a67e497c3a4c5bf603903e5dce39c780cb97d0421", "ref_doc_id": "b8c13c66-1012-4036-9f2d-256c03117b26"}, "6f2f7d8b-0e86-4236-afae-fd5d976d7202": {"doc_hash": "28a77094da6a9be28dffe64311aa70f48a016fe64eacbbee956719623e64a890", "ref_doc_id": "c79798b1-451a-43d3-86d6-fa0df6b24c05"}, "26db0622-eb05-4eb7-9f20-857aa91d20ee": {"doc_hash": "ac408fd573a9581feb3962c6d52d2a72a79aa1479e1be809a661b6e097ae1ed6", "ref_doc_id": "9662899b-9ddd-4928-8fab-0c81b3b417c5"}, "818b1703-eea0-4efd-8e7c-f589f16793f2": {"doc_hash": "4ee7ff3f9d3d39ca10719dbcc26460025d9d20930f424a4f4a33c2fb78fc2a79", "ref_doc_id": "1cf954d2-a0a2-4a90-9e97-36400b8c1652"}, "887c0d11-96de-4631-8bf5-a6b6fb8a1ea0": {"doc_hash": "c7ebda362784b7b0c6b15471fecf49246dbeae7b7f6140dfea625437fc437846", "ref_doc_id": "fe24141f-6c6f-4216-b2b5-32ec15520587"}, "46de473a-11bf-4f4b-b769-2cfb3d4238f0": {"doc_hash": "68adfef4a4bf69802055345d3420d5a64695378e5d995d72cd5148130b8ec7e6", "ref_doc_id": "6e8c68b6-f61f-4872-92e7-504eab0132d6"}, "1580cd8f-1013-4355-8313-efa590406574": {"doc_hash": "b19a6b17e49d97cb4f7b9da0975cdc0aaabd576668b476432c2f8b8d3737f2cd", "ref_doc_id": "e000f48a-aaaa-462a-aac0-0cc695c8c061"}, "2af48ccb-0a5e-4b83-91dc-d7067a58ae62": {"doc_hash": "e2ab87652d9302d039a1720e9003f2d2646ef1f0c133db0d65e17239a190ad6c", "ref_doc_id": "da08a124-f7fe-4afd-b64f-93b422f4b831"}, "accf1851-0c9b-4f43-b445-f4db17f9bfe7": {"doc_hash": "2f2f7be1122c8b839c265f77ccfabbad0df41f847d3b34bf63cd1f84710701a3", "ref_doc_id": "888cc36f-35ab-426b-a27b-394bbd03e02a"}, "c7937d2b-7f65-4bbd-a22f-a012fd87eb01": {"doc_hash": "0555058cde022b0498c8077d88014e2ecc2629a657858d3a70ad543897994933", "ref_doc_id": "b308015d-0bcd-426b-82fd-04c5cf0b3f69"}, "c1d84dba-339a-4c21-834a-a87379cd294c": {"doc_hash": "3ab771ef89b069b09c47b4f3f399b02f7f9e637d60b09101a61c3ae4631cb4a2", "ref_doc_id": "bc5ef580-785a-4ca8-b302-b675286b71eb"}, "f0b82ffe-7bde-4693-8057-9af248219ec7": {"doc_hash": "addc8060e71b5216547969365233909695968e12f8bee37db1628e681d0bd621", "ref_doc_id": "93030057-49af-4768-9481-c5d99e024146"}, "fff754c0-01fc-4cc2-9b62-e4dbe4b1a845": {"doc_hash": "608d199bc6f44d69f7bdd8b7271bd15237b29991c553ff34b6c37b3bb3958fcf", "ref_doc_id": "dbf1fafd-2a61-4fc0-8511-97efbf8f77e4"}, "4716bbba-4ca7-4aa8-a903-0a078c4f22cf": {"doc_hash": "ad8e235a7c6b1487066bbd3d366ec0e6fa44cd2e8716d9d1afcc4e562709f662", "ref_doc_id": "5c2051a7-0c5d-4f93-b8c5-b9ab9816071a"}, "a16c88d4-09b2-401a-b405-0eeebaef577f": {"doc_hash": "e9148ee0e8827fb96c68765bc186b85dc901ce506161348a3047669b1b437537", "ref_doc_id": "31cbb412-e76f-47e1-9990-00667bfaa5a5"}, "e74a1021-7937-4327-b921-dfe42a7d8af5": {"doc_hash": "0e2e497bcdbba0e873ccbfa16e192cc54d5ca48814727952fc1607593a223333", "ref_doc_id": "9632360f-3bce-4b58-9ec7-e62b86086cf1"}, "a491eaf2-a96c-4226-9241-b1afea6c9b6e": {"doc_hash": "b329c8b5d7a136d09161813e41228c1d0e70b4d5f5cc3c5ab52761440eba7f69", "ref_doc_id": "71d871bb-5f2a-4d9c-941c-6ad7aa3451f4"}, "b21344ef-3d24-4f30-88cb-ee868ca3cbf6": {"doc_hash": "cf2cacc137b84de79ae5c1ad2ca8bfc444249704d6bf77bea84787091ce11fa7", "ref_doc_id": "0b939f2c-e1a0-4f73-9296-3aff5dc4e35b"}, "d7792318-54fe-4d6d-8f6c-1b39e24692d3": {"doc_hash": "1d27f39de9359d9b5b737974a7d6a609440be782b874ca4cd126da188559ace6", "ref_doc_id": "8f5507c0-bf08-453c-8b28-8b15218dee87"}, "b6fae8ea-8a42-4f18-a834-c4aae19cd802": {"doc_hash": "928cde3e89de2d659f9189366c2be1f899139c11a83c9243ffc5d054bff419f1", "ref_doc_id": "e80fb77f-18b0-4d0e-93c9-67f2627fc319"}, "6294c955-8ad3-4531-bb26-6426f7f85191": {"doc_hash": "3a596beed79be58bedddec99b7d37c61d79142ff4846b595ec47ca058a852469", "ref_doc_id": "36fdc9e4-1f60-40d5-80f9-95d5324d6802"}, "b45d5071-7d46-4515-9fdb-4f9715691d1d": {"doc_hash": "24913c01241f62879ed7df4f81d0f84a3eb46b4a7aada5ce0befd1369030ef25", "ref_doc_id": "08b5d0c7-3abb-4609-9f50-fc63cf85a4a6"}, "cec251bd-fe7c-4858-845b-3ed524c8e61b": {"doc_hash": "26bd4068819e12278e7e1ba82e2c2cb6c02c2e1f1489d08dee89de419133428c", "ref_doc_id": "736c8476-3c79-47fc-baf1-ce0f6bc2c252"}, "cfc0fe45-f4a2-4cdc-b143-e1add1e1c340": {"doc_hash": "301bed91b414149153a2f774e128ee073048ae0a501bb42b35d93d0a92898a67", "ref_doc_id": "0d7beb1c-030c-49c9-a521-744190aa9861"}, "511132cf-6218-40e3-aa54-8709facdd2c0": {"doc_hash": "5fac898fb72a8df2dcc951d124c6aecca397ed15a07d221ba90aba926dd46fc7", "ref_doc_id": "5eb5dadb-c00d-4d92-851d-204296e3c65c"}, "01af1717-58fd-4770-acc9-67814326d42f": {"doc_hash": "a76fae243e6caf56b9581bf48bb9273a0991105973dbd4a5c9a27d67cccb6150", "ref_doc_id": "094592ff-ca76-45b1-9899-d10bf5084415"}, "3857dbc3-0c96-4ec7-be82-4cd2f95e1545": {"doc_hash": "af066b6983216fcd481673d2c5eafb8df23f29dc2319f0335ca05c8b0d48d237", "ref_doc_id": "bc83e3fb-74cb-4070-b244-b58db0fdf8fa"}, "e1a78f10-b94c-4952-ba60-0a74e2b59785": {"doc_hash": "6e73ebec4e1765e3caa0efa4d59bcff94c3a8cb2650fb71ade0eb2db454c419c", "ref_doc_id": "c187e14d-2843-4e88-abb2-ed7ebcd97d34"}, "0f81e678-539a-4e49-89a5-09655665aeae": {"doc_hash": "d40f081eccee58f2537fb07b6352ee3ed7881baf6cf2b316a9a376a25584447f", "ref_doc_id": "85618e65-c3af-474d-8eb7-667f8acd02eb"}, "923de7a4-2eb2-4560-a0b9-857144a3f170": {"doc_hash": "379c9949579255f802ec3ed0156610a0bda081481a71f065cc86f812310d2350", "ref_doc_id": "d8a18c18-56ef-4ffd-9e06-03bd4eece34c"}, "79f1461a-9900-494b-9a40-8df36914b427": {"doc_hash": "0282f107ee9dc22ec548c28429657aae881b2c1d276393d83f93150975c39fdb", "ref_doc_id": "4dff270a-b6a4-48a7-a91d-d4621104c33e"}, "4dffbe38-e457-427f-a9e0-f67e394086fe": {"doc_hash": "7f7028b077d6dfa161cd1083dcc232e96cd6b9f210b00140fd4a4769e69d6ed7", "ref_doc_id": "93b1bc81-6a2a-4de7-ae6c-e18df843af9f"}, "39ca05ae-168e-46d3-b778-b7fa34c9357e": {"doc_hash": "793961de6c27499c2ae65c68c34701868ace3122e61e85b846d897a75612ddc2", "ref_doc_id": "51faaea8-4329-4396-b806-f4d6117810cf"}, "9e53d180-1b2a-4c59-bff1-d49e25d0c3b3": {"doc_hash": "a2740f263453d83288030f6edcd9c5fa35a58f6812b95319bdebe14989c3289c", "ref_doc_id": "f5636b0c-4054-4c3d-9129-bb4d03da6f83"}, "84fb5f29-1d56-4bcd-8e2b-3558bea169ec": {"doc_hash": "aea4e515a417e4afd52f89e2f54012b353ed5f630eb3fbd3c5cef50029da4bc5", "ref_doc_id": "8ec0f30d-99a1-441d-a34d-48d6b7604b02"}, "752f322b-2dde-468f-a73c-21a1be3704a3": {"doc_hash": "62af83f6a7d58dcd05d1816b4a29eae5bb154dd5193debebd5fd44fc95885eb3", "ref_doc_id": "05e834e0-22f7-47c5-a86f-0d4ef71dd284"}, "80b264a6-2305-4c8f-9fc4-4c9f87a92370": {"doc_hash": "70535a1a8e1575252c2d145b29c17e86457ceb174defa11948fa392b1f128390", "ref_doc_id": "16f2c195-a0ae-41d6-a5e4-1aa991095497"}, "83a4b02f-4df5-4f9b-bb4d-693b8697eaf8": {"doc_hash": "c341bb5c3ac0a5110b63465f5ab82500b08677653aa46216d0b5a2d97a6b133d", "ref_doc_id": "15255d20-a991-4b93-95f4-61cf1edbbfd5"}, "119554d3-0087-4e74-a1fc-7743599ea83c": {"doc_hash": "66fb50b69e25e3eebf1bedc4def1c8f76caf97e503f85100bdad2bf63cc0f09b", "ref_doc_id": "cb394b6e-8745-42d9-b987-b20235bbd12c"}, "daf9808a-bf79-488b-a3da-099e81c51f3c": {"doc_hash": "ff95107560f76f0f8cb2cb86a5ab3136148c045227c1d109a8bc902985f875ee", "ref_doc_id": "91a47347-385a-4bcc-8ff9-18d119c370e5"}, "dd62a585-c02e-4a9d-aaf4-9ffd4439b7be": {"doc_hash": "d9360418a9ffafe235b7c33ac871d87fd79a49e09dc15d06deb923a4020c0eca", "ref_doc_id": "82cfcfb3-b754-40be-ae20-52cf132abb8b"}, "b2d2c724-28a3-4275-a5a1-59ef9ef713ca": {"doc_hash": "f095b42cd933c8143447acaa016f3ea2f7775027424865d0bda6c28229356cb6", "ref_doc_id": "c5ff7c4d-74ea-42e1-975e-51ef995367f5"}, "3e9ab179-3cda-4a19-8c6c-f49b88a1863f": {"doc_hash": "d6a1265d2d201e4a6282fcd5e2d9202d301c2a083580d3944bbc9ebd016f8640", "ref_doc_id": "c8f94c17-6d76-47aa-a97a-745f76f2864e"}, "5b3c5b17-dfe5-46b2-b1b7-b6dcf1512dba": {"doc_hash": "2e4389024bfb10f65f3a3c97a7f46ef062bbe74018451d17fbdee7f584979cb4", "ref_doc_id": "90c9ddc4-2748-4720-960f-381a5280db47"}, "8fc185ee-b16c-412c-b478-447cca0fe5f3": {"doc_hash": "6bd3c1c543158119f3307265bcc4fd2fb9bebb9f36b915316f9a014e5b0429b0", "ref_doc_id": "f281ebc7-7b94-4f30-85d6-aff0f2f404b3"}, "b889c51e-3104-40d0-b280-d671e50cb7a1": {"doc_hash": "940c2aa10301f287a1c0cb8f0eb3c14d10e17d8a44f9a713b8155e20915988bf", "ref_doc_id": "5319a5b9-d85d-417a-b724-d30ee5b64ca6"}, "c7af7990-8be0-4010-af47-281891342db5": {"doc_hash": "2d5b5518f7430d2e247a702e2bf7985c1cc7f1dd45774ea367ed56d26adf8036", "ref_doc_id": "671eb83d-2cbd-46c6-8cc2-46bc47146b4f"}, "92ca2f04-457e-4611-8ebd-83fb550e5937": {"doc_hash": "dc46c64afbbf9ad0d7601c72a55c34c02e4731c06cd67dccc246e75e2246f448", "ref_doc_id": "ce2cdce3-5457-4e81-b2ca-ff8ed85946d9"}, "fa80bb22-e0b4-41a2-b070-fb2171b1509b": {"doc_hash": "8a3310603036f6222a400a0541b8f6acc88e3381875e84598ba6d999b2eb189e", "ref_doc_id": "65ef7e3e-ba2a-4986-825e-c34d9a907d01"}, "d19a24ee-9587-4cbe-8f45-e7e7d8424cd6": {"doc_hash": "41973711d71b1a5dc2940fd8ad3338c0160a4d38cbcbe41121d7dc0bfc53ffe9", "ref_doc_id": "986c7444-2e5b-40c7-8f00-35a1b20c3914"}, "5a73c747-9d03-4297-b3fb-fa9131fb25ec": {"doc_hash": "aec3f0e4a60dcc72cebcef14e27d9ab51b3be43b8b37b817ac36d03b25df7504", "ref_doc_id": "d4d345eb-ead8-4da3-a32d-62e01175934a"}, "399734c1-bf89-43ae-ab1a-d8bdc76287ee": {"doc_hash": "3d18c9a6df271d928b14f2eec977bad27a46947c15aba241d9bcab9817523535", "ref_doc_id": "3164f871-e248-4348-942f-b57f0f459974"}, "720f92a0-9161-4622-a09c-173ff6a3b7da": {"doc_hash": "ca813da72343c71d441353f3a927264e599297b2f87ae6546bf13a490c7b2bae", "ref_doc_id": "e77a5c31-ee02-4d95-9054-aed9803ca9fb"}, "954c7471-d57b-46b4-9c59-9852ca881400": {"doc_hash": "b7323076d285dc7c003bebe581b9b429e63d763a2d2e88c780ef27137d41a120", "ref_doc_id": "848aa548-f1bc-4ca7-97f2-9cd6d4065210"}, "b28b651a-4b18-4489-9871-23ad11cd58a5": {"doc_hash": "4129dd74a934e0a018e8879b7c1235bd0efd01f0018b39ba659ebaf9f75bb82e", "ref_doc_id": "23f769ff-7bd8-4b4f-9cdf-6acdb0f609e9"}, "71ffe8d6-300e-48b1-b872-5fb8c54f0611": {"doc_hash": "46dca5c59fece9f8e526b2b786d4d0b687ecf0e8f0875eb5c7be80626eedf674", "ref_doc_id": "4971e5ef-698f-464c-8958-128f8ef4f2ef"}, "fc1ee5d9-61a7-44a7-8b30-2d1443b7d844": {"doc_hash": "5459ae1592ec07fd42be3e5df6c2b179df4334b69c063548c59bff6b33befb2b", "ref_doc_id": "b7df6724-9d5d-4e0b-9c41-88a706675cce"}, "21cb6b2f-5154-4c86-8113-5df0c5295112": {"doc_hash": "9a2a969f995199381a4a2e1edc5eea3d3ff0ad8e18334b64432e052e0e451e1b", "ref_doc_id": "3eab9638-1d48-4c0a-a80c-4ddff47d225c"}, "ef275ebd-cf66-4950-a016-bbd35cfb6e7d": {"doc_hash": "9e2059ad72605b33909b06b812f22462c1519490758f7c2d74c1446087008ccf", "ref_doc_id": "421207d8-0e6f-484f-967f-2555d2bfcd95"}, "3fa92031-c919-4de4-9545-f4faac7e7b39": {"doc_hash": "69ad9f6bf77823c3806e02e0c54c7d5fe641459cce4ec16a40b03869c0e41c7a", "ref_doc_id": "2c3e354b-ee7a-4678-83c8-7d7a572c298e"}, "f2eb5de4-8312-4a53-a314-4e4fea3e0cd3": {"doc_hash": "8aa6de9951b16aafa6270b583863a3f7438febfeef6aadb7b575d73a18a6f8f2", "ref_doc_id": "8c50c304-e2f3-41ef-b6b3-c32a0eeb6a4e"}, "4647e945-117a-4a58-8ff2-da92f53a862a": {"doc_hash": "d7ff8404ca57a47ac5c240d8ea423d2371eb954c69d526cb463a446a12121d2c", "ref_doc_id": "34f32bf2-cab4-4f29-988a-d8e3d83bb064"}, "2fa3c04c-622f-41f2-9ed8-09a8b662beaa": {"doc_hash": "ede45b6eb3a8861e981449e1533097180aaa48fa7215d07768ea8d37ffc90cfc", "ref_doc_id": "4a84acb4-157e-4903-b272-0ce07c3295cb"}, "036aa7d3-51dd-467e-9028-0f26ea6c4b1d": {"doc_hash": "6b47066ee1372c158db6ee1a13a2b53e390f5d2e2c1beaf21af5a603f768b7f2", "ref_doc_id": "759569dd-8a42-4a3a-b2ce-2b47a3da9fca"}, "84fdbae2-e521-4d37-a300-974d68f5502f": {"doc_hash": "04b8a4a3c4bde659735d1b0d8b56397e651b2c8a7332594ed19c5da59642a859", "ref_doc_id": "6687b18a-5ac5-4152-8b02-86c80392a504"}, "10b4ba33-ec5b-4fee-8114-fe507c446de1": {"doc_hash": "b0461c43116efee57f0b721424fcb726f404985408d0b41d12dcebed0a6bd83d", "ref_doc_id": "04686cde-dba4-4e88-befe-d0926f8ec288"}, "669a5a06-8a63-44df-bcd6-aac64626da6d": {"doc_hash": "b118dd3fa35b5157e347a916258395ad200522a6598fdf22ead6b1ed5f03e034", "ref_doc_id": "23bd9ee1-80fa-41dd-970e-6f787832ce05"}, "8fcd4ff7-8d8e-458c-9d4e-f5e79ec3f078": {"doc_hash": "999a3b6317610d57d03eaf0f0b38ebdd267d4735f1c291ac5b4c9e8abe6e6c3f", "ref_doc_id": "9fc7ece1-0583-4b38-b5f3-7edba87a2661"}, "41a756a3-df54-4afb-989e-48d3d1e16b59": {"doc_hash": "a2f29cf6ceef96f80fc699cd5795d7c92777f5c5563d7420b5c5cb59e8e0ab34", "ref_doc_id": "9fc7ece1-0583-4b38-b5f3-7edba87a2661"}, "23ff13f1-fe3b-46f0-9f27-f6b1193f10be": {"doc_hash": "d3f550819d6b89809cfed45136a4286c31bf29a837e60825867e24c32c46ef74", "ref_doc_id": "39647dc8-1c5e-4848-b5bd-fa75426bf8ed"}, "9e790f68-bbef-4c8c-857f-0412234597d4": {"doc_hash": "e1fa9fc03f7d733d3ab4e7c2d50bdb7c0366aa6ceb78f80b3479d20a13c5e548", "ref_doc_id": "8a585341-1cf5-481d-8733-640349525f36"}, "29a770ca-3da3-4766-8227-030e8e319f0c": {"doc_hash": "d41bb149248f00a41e69dbe34db2857061f9803987253fdf8979c0d72c79ca3b", "ref_doc_id": "4c5e26fa-87e9-4d59-a276-dd11e42a6171"}, "b01154d2-2de2-47b1-aa50-87543f9098a8": {"doc_hash": "a78973d6fe983918b7073575492baf9666c08df877ca17d10ba74461bb1b62f2", "ref_doc_id": "b640d3b8-9248-4d35-b236-1bf5ea09d95a"}, "32e93560-36f4-4713-bd63-9eb55be73842": {"doc_hash": "c76ddf6a66f73252bf13a9562a4fc5b39d4675a66ae141c581345f652b4d496f", "ref_doc_id": "e8b9ad8c-8c87-485b-9867-8037a19ebb71"}, "52001f1f-c916-4534-9ef8-1a08c7a1fb56": {"doc_hash": "6770889680690378e5644a4e221d86eb9ebe402beab3f9397d8088d5277f7e32", "ref_doc_id": "cd794995-95cf-4b17-abc3-b99a96104a76"}, "a28b43ba-ada3-4605-95d4-635094f890ef": {"doc_hash": "28dbdd9a9f2a5c3953677afb51addc67396900f04e95973c647bf82e63fb1023", "ref_doc_id": "e42c261f-57d1-4f6f-b053-d951e204452f"}, "a39d8ad8-3094-4d55-ad2f-9dba58ce8edf": {"doc_hash": "d4034cabeb0a5b9cce05db0025332bd84675bd04129d8e9bd321a9dfeb07f4a5", "ref_doc_id": "65ea5242-fc03-4812-9c50-d344ec8aa34e"}, "a5f22dc8-a7a2-4afa-acfe-475a497dc378": {"doc_hash": "e5d04461998142e7c1ee3acc73e39439ba2803f2ecfa2eef15b707c225aaea1f", "ref_doc_id": "313caba2-2ca9-4c7d-8913-5ed637b56202"}, "3f9e2976-7e8e-48e4-bdc2-c497350f6c11": {"doc_hash": "9ce9b2a30f7929cd80d3a312bd2f22cbe15202d455a604d4c2883b7f86384888", "ref_doc_id": "f3c3c96c-1b5c-4b15-9dcc-6cdbe0a2b177"}, "146a297a-4b40-4215-9c97-454783f0ac7f": {"doc_hash": "0cf6b7cd8bde9485166e24bc6a47acbd1beff170502d73c2ce21b4db6f6e6257", "ref_doc_id": "c8b472e0-19d7-4920-b84e-774c179474d5"}, "bb53ea6c-c216-486c-af25-b879cd5057ee": {"doc_hash": "6cad61b421abacfe6c208755a092b97d058cd10482b80c50d4a4fff0355e6e95", "ref_doc_id": "6e8b8192-6f90-4f8d-a340-99aec4cfac97"}, "fa44957c-3f09-42f1-bfdd-ebb20e592eb3": {"doc_hash": "b9c7165e02ef24c49106e9f53bde1e1e2d508c916e967c0635dca45954607966", "ref_doc_id": "7b2420bf-3bc2-427b-aa97-d45c5986bc58"}, "d34329d4-e72a-4d94-a7c2-41b1eb37a7a3": {"doc_hash": "7b848a02f51c0839a038a0c239bc9c470d95d5437d098f2982d158213cd6dcb1", "ref_doc_id": "cf2e3917-119a-4419-8e54-8178604254f1"}, "7c6cc4aa-0006-4808-a29b-3ec3a18077b2": {"doc_hash": "d5f7054f629cf98b984733bd8fbe5693ddb85821ecc09a2df3317a2eccb23c05", "ref_doc_id": "2e045ffb-2b21-4d98-8918-902afa0005d8"}, "899ff6e6-bbb6-45d0-91ae-2482977323d0": {"doc_hash": "55268bc37c43d50c57cf44023c0aa1c85381567003bba31548c5eb2bb4f5255a", "ref_doc_id": "24fbf627-2dbe-4a37-a748-fa078df5340b"}, "106007db-a340-470d-93fb-7f6e3ede7b04": {"doc_hash": "6b40cd585795cc9f8e2b6efdc3f899a7d6043d959e4c1e6b2f055d31584faff2", "ref_doc_id": "4cb3a510-74af-40b4-82c3-f91ce31dc470"}, "05e1f3f0-2aa9-4c8b-a195-0e04e5b5027d": {"doc_hash": "d54e067c909a6b12274f115348db5efeff496a708fc6eb97c1fec9c19a1c5386", "ref_doc_id": "3f0578ee-430d-4e71-a822-08e5117f7c62"}, "c96a04ad-990b-4065-a0d8-c67816fc1eec": {"doc_hash": "f04607421aeb81fc7244a4fa8017997723fa888e104ef568028bcc49f6509f1c", "ref_doc_id": "bba18de0-9b21-4f60-8250-90ee946924f3"}, "cff6cc55-3fbf-4704-ad6b-1407e28c02a0": {"doc_hash": "7b77f83d5d3724bbb46ac08b1a38c2c3c32103db77b9d6e3fe22548201906ab3", "ref_doc_id": "7e164236-1d6e-4898-a211-b5f79a7eb159"}, "643eb482-426e-454f-b0fe-5d4312b69889": {"doc_hash": "86ebe8a2cb2f1fe38a3cb151bb550c6a1ac951a6a9ccd28f70eaa130a054791c", "ref_doc_id": "2877f444-b4f5-41b5-90a9-2c8188d18185"}, "8fecb449-e6dc-4663-84d1-075f1bdcd716": {"doc_hash": "30906fdd7cef1235639339c7a013df99e3a617c2686f44a3dee3a8785f7876a0", "ref_doc_id": "8afe21ed-9eaf-4759-bf1b-1018317c3d44"}, "98a22333-59d6-4d2a-8798-b658894e1111": {"doc_hash": "925a1c3e6d4b9d5ced25aa97643719dd646e2272031e100c5a1721beea7542ab", "ref_doc_id": "41b095dd-be22-4b0d-9191-ee78173e7ea2"}, "76c55d8a-c8c0-4c77-8ece-99b42e6b81cf": {"doc_hash": "1ce466629039ca7e6423ef1e10db7f1a7a3c0c73be39d53095512a5a1c861c8d", "ref_doc_id": "1ca2d922-1dd6-4921-9462-443f21b09d62"}, "63bfa806-2daf-41c2-87a7-1ff5ca8042d6": {"doc_hash": "12b6ccebb4317566ef4d46189c14b8b854b41e2307b523771d6b77ef5d2046c2", "ref_doc_id": "f787c46b-f23d-42c1-a1c0-60010aebf495"}, "c10e25a2-a13e-42af-a7ce-1e2494505c2a": {"doc_hash": "c5880e7959e59a844d7d8ea95e10a01fa88bf500fa1b4f9aad1d6b4a92d27db5", "ref_doc_id": "406d81d5-31e6-4e5e-8a7d-b3cae5507b91"}, "539b269e-fa99-4b1e-9dc2-c57baad0d963": {"doc_hash": "b02e6ca9b430b77500e8aff62f59d6624e53b7f6863467efc599331e4bb86193", "ref_doc_id": "e2bccf67-3755-475a-9275-7c4838b08f16"}, "f795a631-e2b4-4507-81bd-7d37afab3087": {"doc_hash": "c58aa673abbbcefcd5015a8f6d4c2fc9e871e9810392e223be1d4eaa3e64387c", "ref_doc_id": "9c7c7579-cdb5-4587-b652-859681926de5"}, "5c7d3978-4b77-445e-8539-db353a8d7257": {"doc_hash": "21523b5b9edcc768e3a511869fa0c1cf0d87334597a5a471f5f3ace3e9dc9ad1", "ref_doc_id": "dc2b8ff5-4d14-4459-ba60-0eb9a56a0482"}, "b639ef65-d996-4a98-b1da-4a875d361ef8": {"doc_hash": "91c559e7f6e61fe1c7c4a0a8ed3a7d131863792610735b6bee3d7633cc5c3f3b", "ref_doc_id": "1b2e37fd-919b-4c45-a1af-2591f5a5c5dd"}, "b482b793-da6f-4b48-b851-8b6c1e9a9b39": {"doc_hash": "8f60f2b6bb4eeb34544b2b765f3c1d3626bf6665b7df453796d48ceffbb3df55", "ref_doc_id": "d439e9da-880b-4b29-8ecd-f9f7de5746b6"}, "53e2ca6d-31c5-437e-8b78-b911b7804f05": {"doc_hash": "81291d3cf04de933e51635e44fffee2cd18c7300e9f2bfc02a44655dec1b4420", "ref_doc_id": "b180d3af-fda9-47ff-aaca-fb2f9e88ff04"}, "e6b1c302-8b5e-4ff2-b255-a1c5465a9fc8": {"doc_hash": "8b5e3958c02cbc9510b324ec8cd30cd9e0b8c7526bf60f9dd6de4aa66ddcb9c2", "ref_doc_id": "62ab44a7-f57e-403b-8d83-94624f97e047"}, "350b05f6-a561-4109-845b-74e379989c4e": {"doc_hash": "efda4dfc7f827eab6764c08729604a049a19fd5953619b94a54de93f6cf10618", "ref_doc_id": "322b5a21-e936-4afd-850e-0827bff193da"}, "d97b9eb6-cd07-4e09-9e02-513aa247b054": {"doc_hash": "8699eec0456d34b42cd2c9063653e98c9480c8743413455f29949cf6311be15b", "ref_doc_id": "509fae49-3c78-45f2-9fe3-58ec5be78a2e"}, "20191aeb-f118-466e-8a59-3b1652f7f1f2": {"doc_hash": "abab130e2630bd31fd075b23b8cfa815107b85712329f5b00e100f605d565fe6", "ref_doc_id": "fae5ff2c-3e6c-49f4-bc28-1deb19a2b22e"}, "68e68186-69c2-43c9-87fd-d05aa153eff2": {"doc_hash": "350d9382b6eb84fc49b51968090c8561b07c1f2df9345043f9cab765ec88f7b0", "ref_doc_id": "6acb5c0e-d2f8-4f1b-8ce4-cc341f2fe151"}, "9f09f6e1-2467-419f-95eb-e0d73a7cd922": {"doc_hash": "2458af01400504bbe606ffad8412088b9e4706c03529e20d196dc5cfc6e0f177", "ref_doc_id": "13f6fa16-111c-47b9-a430-03c29a6529d4"}, "69d3ced4-1cc1-4bf6-b4c0-b0b22b910fc4": {"doc_hash": "994fc6a515ee4f2abd4acd0c25042a5f2e5dc78a1eebe834d62df4b0e4806936", "ref_doc_id": "d5033829-430e-4970-b337-62efb928356f"}, "e5471d4c-1f54-46c4-9186-3860628ffe7d": {"doc_hash": "16d522e4ad5d8d2408bcffdafc7cf820ab8210bbada1d33c698f3682702c4515", "ref_doc_id": "887b71da-2a04-4b2c-852b-66fd48c2fbef"}, "2ce58c41-4e12-4b99-b33e-a3145c806201": {"doc_hash": "fe355b70453fa7936b9891bb40bef2039cc8a193e73f9b690084ae16cba7ffd2", "ref_doc_id": "1c14d526-eaac-4c87-9c44-dcd7563067bb"}, "1aac1b31-4527-40b6-b43a-ac4743532287": {"doc_hash": "2b38431f5d3c4e4272829027cbe4b0dd4cd56778747e4784186e65b0b0d1f567", "ref_doc_id": "de39209f-2ad4-4396-a9e3-cf580373aa07"}, "7cd9dced-4269-49c2-8da1-7ca84aa3990f": {"doc_hash": "ca2ce192847135d660bb955e81db7f9f8422ca9c87f51991fe9064f05a505f43", "ref_doc_id": "65778cfd-ebb6-4723-acb4-2c52e34f8b32"}, "f9767c89-8ce2-4e78-84fc-ef7532110351": {"doc_hash": "b54bd395b577b6472e30652554dcb6219e786adecbeb9e1e85aceb7ccab4bbc3", "ref_doc_id": "3fe721bf-5a65-43c2-bc70-5c746e91baa7"}, "873e644e-4a4d-42c3-a35e-3f083ff33f66": {"doc_hash": "2250f105355a830671e911ce81dd015e7817913e99876bd04ef178ec450950a7", "ref_doc_id": "d2841ce0-1c11-4015-b493-a80b13234b8e"}, "7bce55f4-3019-4cc1-92ba-45092fce0ffc": {"doc_hash": "32b5a497c9ad085dc1b5edef03d55ac478692c03ca2f4b4938ad1302e7bfa291", "ref_doc_id": "ff3989b0-eb6b-4068-94d1-7a8ac88552f2"}, "84948ac8-0359-4306-a2a0-30e063ea0d05": {"doc_hash": "2a3a9ff453ba00509ace1164e0dea91d2fce4e9ef5f397f48f7ad95335b4881d", "ref_doc_id": "e46489f8-99dc-418e-83e7-3c8c6e7d929f"}, "471fa105-2b1b-44fd-a3b7-7425f2cae55a": {"doc_hash": "aa208ce9f2acdbdb0e7576111a7725b7bb6d02d5be8d70280461612f29597205", "ref_doc_id": "ac1bd129-f08d-4b65-97db-de3cee2ecd9e"}, "227ae7b0-f03e-4405-b7ac-3c15a4843ebd": {"doc_hash": "2b179b0d0569f1751e701ba0126e3cc7f179f1945991f99c9976e5a62151a092", "ref_doc_id": "1c9c5307-7536-412e-a581-0d42fdb27a1d"}, "72c1712a-5cc0-4ae2-a405-3dab32d0b970": {"doc_hash": "d09e3f2f4e1c2babc58d0df075fe2892323b51af77b9713708c2bbe6db64ed5c", "ref_doc_id": "6e139717-fba0-42b0-a1c1-50f9ef0c450d"}, "43adff97-0bb2-4e77-8809-d9f84544c2aa": {"doc_hash": "554b150e94fcc10ba8cfc3ad6a0c94ed777888ed7cf2990ebd99f0176e267fd0", "ref_doc_id": "b8dccb29-1eb4-4bd2-a339-6369b49c40e8"}, "44cfc5f6-96c0-485d-871f-c26189ffccaf": {"doc_hash": "81ef31ef53cf0250d6090c04f2cdde7080e671b971f82790a0d64d6e881da46b", "ref_doc_id": "ba85b95e-9910-4acf-85fd-c1ef99a9900d"}, "730077b9-bcff-4bdb-99fd-31de7688b1a3": {"doc_hash": "96df0389168ad40c693bd0ea4f436236fab264188c82ecb09055c8d48d265814", "ref_doc_id": "d3732f42-39a2-4c03-80c8-cd62bee7e5a7"}, "1b528f48-b9c6-4f8c-ae19-e6d908c8e5a9": {"doc_hash": "93379d8f3274105d8abf206ece27fc2c5b2c45fcb77330c877a60bcaa8b98b95", "ref_doc_id": "c66222b2-690e-42ac-bcb4-b4c78a3d70cb"}, "496c9156-aa33-40b5-8cc1-71943c523ed6": {"doc_hash": "cd266947cd05ef6f9b345f67992d3892cbc4f8a8a46a5034a292a5549cbd825e", "ref_doc_id": "2056e5bb-1096-45e4-bfd5-0773d9085022"}, "b4f8a8d8-32f0-4673-a3c8-b8764d7e56e4": {"doc_hash": "30651ce19aedb2739514e35b692935ae419627f78e75408c91652a548a319b04", "ref_doc_id": "751b8b57-1a12-41a9-9423-9b93a2a8c77c"}, "454535a8-012f-4406-81d2-6aa7d907a49d": {"doc_hash": "5709c85d7478cf047c29dd2098d770d7f33c8e0e4b545e43c39b43b7c19c8d9c", "ref_doc_id": "402ac11c-c255-440e-9981-5a8da6facbdd"}, "1450a50a-2097-46ef-be30-f0115149c071": {"doc_hash": "d03385f95fe9652f05890c399c8e05bafd6ce9982ab851024091482f9f64a01f", "ref_doc_id": "4aad530e-3a0f-4fa7-a8d0-b8ed4e4544fc"}, "f4e514c0-0641-4668-804e-c1dc9147f419": {"doc_hash": "0fcbb483c37474533616d7bda10bc5b8d46cb06e406840a5b6074bb264da8b89", "ref_doc_id": "d915967a-31b6-4121-95a6-3bc2291bf20c"}, "6d68f731-ba18-43ee-8b9b-983b823b1d38": {"doc_hash": "85e8b18800655b7da0219497be68e85a575470132bf2371308d8ccd1cf1ac964", "ref_doc_id": "325090a3-b490-4930-9b31-406df6830450"}, "1a937ce0-1a78-47a2-924b-15d8a4cb57a5": {"doc_hash": "ef64df05a8b66cee8001f3d902c9ec4a913d948a39f93b90cf4c1fe4b55f0440", "ref_doc_id": "8c2e6927-d5e0-47f3-b11b-e575ca8b34e7"}, "bf739ad9-ade9-4105-a0e9-b5ed8cced777": {"doc_hash": "6fa8fe93df8573cb5c63b621f1d8b85cca87e75a2cc305b73323af781f1bbaaf", "ref_doc_id": "37317fc2-ac3b-4ad7-a748-896f3b995e38"}, "98c479b9-63b3-42a7-b98b-b2269ebb233d": {"doc_hash": "ad1018b108b9cf1b00d6d85a2315f43a5591cd4c098141f507a8087d33ce4ffb", "ref_doc_id": "09098469-d921-43ed-812b-63f532cc824d"}, "8cfa3901-2bee-4375-a9fc-e771b5757261": {"doc_hash": "0c65f445f6cc953baf82dd5dcb55fd509d4ba59c977ca08ba9c6cec4ceed6d47", "ref_doc_id": "be438d4e-c754-4b6b-b1a7-0d67b08de814"}, "fee4591e-6a54-4536-a6a6-9dec9b02b7d4": {"doc_hash": "a5a4edca573fbe4e9c18417609b8ea5ebce6e334faf942f6a115239a8e9af3b8", "ref_doc_id": "3a099732-9505-4e42-bf00-0dcc353efb07"}, "c783b6d6-2e3d-4624-b3ea-44bc50ab9b82": {"doc_hash": "f5b21a2e77a1667630abe98bce7eb279bad8bf509143edc9fcc6cfd9b5123b81", "ref_doc_id": "7434995a-f7d4-4671-bb11-2694345a5d0d"}, "49c70a22-f2e9-4be9-856b-3536cbd3caaa": {"doc_hash": "aa56ecdf8f69d239880582ebeb4ce41708e161fae529f5476a7f6ffd08b69636", "ref_doc_id": "5d5484cb-5d32-4a9a-8ff2-848d2c786d5e"}, "03d740d4-7bb4-4227-8c40-f5f867a5fea3": {"doc_hash": "78a2de5f700fff6541e18c72c86a3fd7feb27f692295be07291baca0902639d7", "ref_doc_id": "e932be7e-0fd1-4a1d-82bd-5658d13fdace"}, "2777bd7c-8627-4e86-931f-2cd58ac2b35c": {"doc_hash": "9d9008d80498ca9126c7a9cd157664ea0ac245541e624428b7b0719bb462edf8", "ref_doc_id": "e6783ce8-e9d9-4c06-b016-334fd0e03277"}, "fb151534-eaab-4a98-b86c-08fa0ed44dd3": {"doc_hash": "57f3565701ac17d5c5ff0d07bc30e6e977515541ca18984798e741136ae6732d", "ref_doc_id": "6d8c5f22-340f-4c6b-ad9d-c16fb0ea82e0"}, "80df4762-ffe4-499f-9fab-90d0eb43804c": {"doc_hash": "7f0573f5a44c07805135d8cb714c8a44774684b0669fc68c7c591fb01d50d613", "ref_doc_id": "c5a2620e-0cd8-45ae-83eb-498ebe8814e8"}, "93ae1d16-79ef-4c89-96a1-d7a772f44694": {"doc_hash": "b8f274fb7237fbcc601942e65d6f89dfa3bf3ee8a9641026842d70c544bd8cd9", "ref_doc_id": "e3d4eab0-48fc-4bef-b93b-4a4b81d1cfe3"}, "63bf7b77-7f25-4581-a570-30ba6a9730b9": {"doc_hash": "ab71026fa55fd1e99b2315301d04ebd9413ab09e1f929322ce5f775ba68fda59", "ref_doc_id": "9548f2d2-beb4-4605-9c43-0dcc70d802ea"}, "d17c55f0-5bfa-426c-b3b6-63d37dd2a634": {"doc_hash": "4ae3fda673734e16b8ff953446140cfb6bc6784bfa50a05f625f39d43c7c0d7b", "ref_doc_id": "d805dc8f-769c-4b70-bc88-5414d8f7335c"}, "32675d9a-9da2-4f0f-8339-ac9d7390ef59": {"doc_hash": "138159a65551626a3f5b231b1f0be21561e4d11f75589be0d1f6b2184f202869", "ref_doc_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a"}, "b457072b-45cb-41cb-b904-0603839c9cb7": {"doc_hash": "b0a53c59818f9dcc4959df41246a82ca4031ebf8655c91f94670486aea9c908e", "ref_doc_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a"}, "0a285d43-a9ab-4f59-bc1a-875cab137a7c": {"doc_hash": "a069332dd6f73528d3747644c1f8d4a35aef86c914680a83d3bc7c6c036f0bfc", "ref_doc_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a"}, "0074b5a6-fb47-43a9-ae98-0b5206139740": {"doc_hash": "74f84c73b6f263407392e988c213473c5a7e444697fee3201701cb847055ee3d", "ref_doc_id": "2fe0eb23-0aab-4a53-82ac-4a4171d3e0b5"}, "24466767-56e3-4421-bab1-e7e72318521b": {"doc_hash": "b4f30d6acae0438a5091e3470473ee252bab2fd1f1ff3d33504a5d7c65739731", "ref_doc_id": "9a21361d-21d4-4175-87e1-8c0f1882d11d"}, "1df07e0a-1c43-435b-80bb-29fb84cc61d3": {"doc_hash": "19087f541c943979badb6654bb8ef1548fced090343bb3c5d5cde5e3ec4c64d9", "ref_doc_id": "b35600a0-70a7-4785-86de-dfabc06a0320"}, "81f07e4f-4779-4f5f-9ee3-3f4efa30583b": {"doc_hash": "44ad8a5e1d8ac2a8e5887e13f46bfed3de591713c16dfd1b4e37e8ed9329863d", "ref_doc_id": "29332cde-0296-4f75-8025-e8accf6e30c8"}, "ffd4f6c6-7803-4c7b-86b4-823ea5524d94": {"doc_hash": "85f15f142c5507b49e888dc82ccab30aa0e32abf1724901cb953c9ab5afda290", "ref_doc_id": "95168cbf-9b7f-4f67-ae55-8dc338c7524d"}, "31e54fcc-7fed-476c-ba89-06b572e3a5d3": {"doc_hash": "02f8af9165a1da2dd4b805af12a2ed032f48461d31d35eb47594f55724ea545e", "ref_doc_id": "c5a2dc22-e171-4dd3-9390-64b754e2be6a"}, "b7d90a8e-6731-4442-a89c-637b9899c710": {"doc_hash": "75c422ffec0b41464103f75a8f8b9f5e9f07eaab973ae4af50709ab25814ec7b", "ref_doc_id": "ef5c9240-2a8c-44a5-ba88-f822935c979c"}, "643ab2f8-fe1a-4781-9886-25d6e423a29a": {"doc_hash": "12db690a994a3fa366e71358c7c13da7e94eda389fc0357d82e9efc535a7551a", "ref_doc_id": "87573574-2b28-4323-bcb4-f31c56c10833"}, "84a9412a-0a75-43f7-b05c-52580a5cacc5": {"doc_hash": "007b407f75bfe531facabb8c321c91dbb1f5aad4a69dc0bc6a1581bdf83e6503", "ref_doc_id": "c45a1e09-0190-4dfa-8e79-0175563d5a1f"}, "7a74cd87-9767-4436-b515-228be70f816b": {"doc_hash": "cf7c14832acc2a7ed1aad73bbba36efb927edfd3b0e46b746caee9c99e7e01bb", "ref_doc_id": "9f2fe297-37f4-47c8-a289-0616bace1614"}, "d9566454-accc-4724-bf9e-da0349b1a854": {"doc_hash": "4e7231ed40738e37c583c7ecf521fc4d8c4e4f2c11c0dca33f970a1503d2682f", "ref_doc_id": "99b33dc8-e380-40f2-8e82-558638272fdc"}, "e15c2109-9d40-47c1-aebf-b09bfabd4b73": {"doc_hash": "4250670e7a8cb0252483db804778cc33e7e9a2881a4d5523956ce9509ab70056", "ref_doc_id": "35dd6f66-043b-436a-92bd-f5329854c232"}, "842c3f5d-1ffe-44bf-a129-24ea711566ca": {"doc_hash": "99047d85287b85e9d2f57f2b127dba9f4419b8174c3eeccc01edf4e8a121b117", "ref_doc_id": "4d09ad6d-3316-4a67-a68d-e83197ea7ae5"}, "da3046a4-4e7f-4e14-9de8-5ba58423846a": {"doc_hash": "ff49705b0abc432ea0ac98a532cb2283c12ef4d9bc9c68ac4f27bb4e562d8935", "ref_doc_id": "6c806eff-2488-4e7e-954b-1a632c9871ca"}, "94e88b1b-0056-4e01-bd96-6a9321d17aad": {"doc_hash": "6d81670938f40fc1a944d56d07033d894229d320db7640d405a4290bb7da3487", "ref_doc_id": "9064fc42-fd50-4f8f-ae20-14f4c3ca5498"}, "8a05d447-9f83-43f7-84be-d0e7606a5e87": {"doc_hash": "7a0c6634514833868a1bb20595d020b75fa06aa91d5e009cac3125e1622813b4", "ref_doc_id": "dab284ac-d324-4a92-a9db-6483b48c1060"}, "50ee10c6-2613-42af-b7b9-b89595f70905": {"doc_hash": "9f5565834ca60035a35a39ed7850cf77e9f40a632aa9277998e23846757bb0ea", "ref_doc_id": "7f1bfd5f-1d39-40fe-aaae-f1709f2bb355"}, "b140ddde-6734-4b59-8d42-1129490956ca": {"doc_hash": "a3874e02507c0260f8bff28a4b8cf4ccc66bc11bff73ca74dc23be83f21cacba", "ref_doc_id": "06a52a33-36c3-441a-b9db-5a7ab76ec97e"}, "1525135f-84b3-47d5-bfd3-fe7d6750bc02": {"doc_hash": "93364a7e416de4410f2f4a60c05ef93d64ba2d06b9206d9ace1c9e5e072bcd1f", "ref_doc_id": "5cda8219-3b8e-44a2-a15c-9455b5ecac31"}, "16bc54ff-113a-4ad0-8f67-b8e16eaaeca8": {"doc_hash": "43f27a9b51779cdaf9e20d8396751e0ee13c30655a4faaa3588cb6f443dfd86c", "ref_doc_id": "b0cd3c0f-10a7-4db8-9add-00d932ee09c1"}, "1a6545d6-b0b1-45f9-ab5f-181ee4167e7a": {"doc_hash": "5b55d04f765a5c6c38117597304fbc6a2c291675118dd9110783f94c098fb3f8", "ref_doc_id": "272a27d7-5136-446b-be48-d91825820c1c"}, "4327605e-1a35-403c-9ab4-895483afe13b": {"doc_hash": "640632b3c7ae225eda6fb8dd86dd4146ceb47a91fc7ab6c24523ba56aca8f6bd", "ref_doc_id": "89d98756-092f-4f3b-8061-9719a85a345c"}, "d40f77fe-1663-41c4-b63d-e4f0c7977f9f": {"doc_hash": "5afd3de3cbf3935e3f77205ebce0414a1efad6a82a57349ecc5ed41cc16cb8bf", "ref_doc_id": "f064e59e-8ffc-4464-8fee-b7544b4167d7"}, "c29c7a8b-09aa-46f9-934e-1fcc54bf1b6b": {"doc_hash": "a4ebef8915a54c6e37f3c5cb6d31316faaddba1c0045d2b0908e584612d98d6d", "ref_doc_id": "f6eb0495-05b0-4dee-8ad7-0cfffe291b93"}, "f2073696-243f-49e9-a67a-dd17cbfc60a0": {"doc_hash": "2dc05a9a7907f741302d82c0a4d22349a691b586169112d4aef5831bb404a1da", "ref_doc_id": "387d8d3d-f766-45d4-b962-0ab54bbb16aa"}, "5a599e4c-473d-446e-9cd7-5216c49dd792": {"doc_hash": "679f4e55fda7cf291c2d1dad70fb1d979b35e287099fcbbbcd43e47503fd5727", "ref_doc_id": "bbc4a50b-73af-455d-93a7-d5b349afe919"}, "ce4639f5-ac76-42b7-8594-f5803977c812": {"doc_hash": "403c79559f3ea3fe5fe6595712c95804b1b8b39221a300408e638951ba8cbaca", "ref_doc_id": "361d9bea-66c6-42e9-82ec-bb3b6ccd16dd"}, "ff3ab2bc-e78b-4db0-8198-cbcc8eb142b8": {"doc_hash": "07ba2092e123bfe45a71fdde985f24c61be65a8b5a60e1b3a7b0b5034b1de871", "ref_doc_id": "3975ea40-3c45-42b7-b85a-497ca1880410"}, "c57ab38e-0b1a-46fd-802b-de65f4f8aa1e": {"doc_hash": "a99a2c7a5302f4c0c66b814ae0b8e0740226403658ba21ec671e2a5b8b430319", "ref_doc_id": "68ab3efe-b49e-46e2-afc1-7ed5a93cfad0"}, "7b45e66e-84c0-4963-8bd1-ba2612135cc2": {"doc_hash": "a6c0577839e9be21af1071c5143671ec37a2bc1a2e10964d2d009da691eb2213", "ref_doc_id": "ea9e7466-18c6-4ec4-8916-e97a04d0ec28"}, "d10b53c1-6e0a-4c7d-bdd2-1deae9e1c1fc": {"doc_hash": "7a94fd9e5fad8e9683040e4ecd04657e937b87300f6f385115f6227b09f39d33", "ref_doc_id": "7ce17e4b-b923-4d7b-b864-65b8e26ead2f"}, "60986e95-24b7-48a6-9824-239f4303b9a6": {"doc_hash": "967a6224bf809e4efe7ef31736d3cfcc57bedb279c43676afa344c57eb8972ee", "ref_doc_id": "8d101230-b818-4c70-9098-bd65cf03a7d6"}, "f5ec3f61-f1c2-422e-b449-8b2de31e5e30": {"doc_hash": "2c382e1ad436989e2d6a20b3e27336cbfa3e768dd5519eee51d86f4ba1445cfb", "ref_doc_id": "622640e1-9a40-4d7c-b502-c5a3624a089c"}, "170009c3-b70e-441b-a7db-fa3838c315cf": {"doc_hash": "117184b07d4a984ceeb6d2c1891a5e1b6774d6b4aae99e5d8ca37078b4187123", "ref_doc_id": "1f7db7cb-027e-4cf3-86b5-a5521b134561"}, "14a3de3e-550c-4b44-9c6a-d40a900ecf25": {"doc_hash": "b576090dac147982a55b668ef3a454e6af71c91cd2ba4a2be3f53711866807df", "ref_doc_id": "040820e5-4f9b-41e7-afdb-9fc9d9760eb9"}, "3c9a9215-f79b-469f-83bf-12a60ef5b5db": {"doc_hash": "3dfb3fd363b4505788c899151b8d003b7777040d45a042191ef49aaee50b4c16", "ref_doc_id": "6f050d70-c5f5-4633-9909-c2583ab0d73a"}, "23fc28da-0dca-440b-8eb2-b833e99c8ddd": {"doc_hash": "44c5a137e82a6138bb6f83aea4929e65adf08645a2e7873f007b0622bd41388e", "ref_doc_id": "d05f5b6e-0669-4aba-8401-871f0e6e3ebb"}, "8f51513b-c02e-4d99-8d7d-15e8363ca37b": {"doc_hash": "8c39d357aeafb7809f2885fe9645e80ae464f22ba9d0aca0f3d125b99d7b9807", "ref_doc_id": "8e4bf0a7-0de2-4435-97e1-b85caf8b3ce5"}, "c8fe4afb-0120-469e-b3d9-8acd70435704": {"doc_hash": "e5e3e636237c54cb155d013eff1a45d3f1d363e1538b0c4eec92213b6d312b0c", "ref_doc_id": "00601f86-0ddc-41eb-aea3-be7b32cb73c4"}, "01cee4fa-a19b-4ae1-a29e-acbd449247f2": {"doc_hash": "3b054a5815aa04186fc149bb56967a83733d724ca7dc122cfe21c1bd5eeff539", "ref_doc_id": "07c6c677-f883-4f45-a193-d6850a2c36a3"}, "a42ab1d0-19d0-4489-9959-443103cc76d2": {"doc_hash": "4b75339c6c8c636bfdbcfef46406d6a14699b774f7d3746ecb0797f22c0ab6e9", "ref_doc_id": "cabcd918-d11d-4dc2-a67d-30a33c6580c8"}, "d9469ba2-4254-49a0-a3ff-a828d5eab037": {"doc_hash": "a8d9c727d9cf30222ce3e1f6dae5c20bc221fbd789f23bf00fcede83789831db", "ref_doc_id": "8b7a95ad-35b3-40e8-ac72-e44a682c9c08"}, "f9ad2093-95ca-41e6-ae39-ca6aa71a9199": {"doc_hash": "39b6c75ecb8a10aa395818d24f5e651ba5ae74461ea2c3941b1279243baa84a1", "ref_doc_id": "7f337dec-23ad-4ed1-aa32-0fdb166b6aef"}, "aadf292f-1c9b-471d-9c31-7097d6fb4a7c": {"doc_hash": "055b56ebbff32e74b09a5706b49f03374b71f8609eb55e60e821ae5c615e176d", "ref_doc_id": "99b212b5-3e44-44cf-aad3-4be0c8c7c469"}, "1122aa84-02ba-417e-8e14-43b80a0c6668": {"doc_hash": "96031a0c27fddc8d9f4b80f7c1bce960a2962891038f245f872a1f62f511305e", "ref_doc_id": "37519b23-1a4e-4e95-a3b6-db1ceefff985"}, "a4c44890-ec60-47e0-bcf9-6a6081485382": {"doc_hash": "acf2845e36d2800528ae9947ebe6a69501166b6714412c2fab3b84150cf0254f", "ref_doc_id": "5feb506f-bbfb-41c9-978c-e127f107ae17"}, "ada2288a-9a75-4312-98ba-6c62da74f612": {"doc_hash": "12dd7f38b650767c51a238e467255d3fb033662cd15123e2258b9d332e3dc9c2", "ref_doc_id": "73efe614-f166-4c88-b88a-5c077707868a"}, "d2f90e3c-d419-4e88-a1b5-e17b4a6a54d7": {"doc_hash": "fce3fe7200a4ef6edc24d21f24dd34d46cc7ffae4ef1bc6acf8e43a80d8c3679", "ref_doc_id": "4a66d1d9-6d1c-4d72-8169-eb138cbb475f"}, "c2fc2d23-e86d-4677-b7dd-23d94081cdb1": {"doc_hash": "aa7ae4acf0c3dc57f71c000ca6e85c0202d71f7dc85b91adf296b583c2c3582c", "ref_doc_id": "790fb162-3bfc-4e05-9376-8365347dc51e"}, "3c61ac5d-dfa7-4a13-b79c-76fa5dd4652a": {"doc_hash": "cab23a38a6f8f7c0a705d174df015c61047abfc2f2c5711a2403dc2fa0900637", "ref_doc_id": "40be6cf9-a223-4230-ad2e-a6a09c06cba6"}, "7603c2e9-7e80-459f-9316-5f59b4ec481f": {"doc_hash": "85c52d0929b0aee3dcf886705f3a3c094fc96d98df91ce30cab3950bda0b8de6", "ref_doc_id": "1753330a-d2d2-4aaa-8430-5a2ca117b379"}, "e81adcc1-02ee-449e-b9c6-e743272944e5": {"doc_hash": "a7faa2d361610da583132e12c1858ccfc0a2e64f592d3d230c92b584914bbc44", "ref_doc_id": "155fbc54-3d6b-411f-8882-0e8849b86ea7"}, "4fd1c5a1-ba57-4fcc-b20c-0cf4153ab007": {"doc_hash": "7693b545e1b74e8ad37995cb6b69d65e5b4f604587f96a513f500c248880e621", "ref_doc_id": "3b26c005-9292-43b3-90da-a56e2c2b61a4"}, "28b84a9e-e5ae-48ac-9e38-e21828f75c79": {"doc_hash": "2cc49e6d215d2773be52dfb6467a1432c40c7433fe9e2a5352037efdf132ad9c", "ref_doc_id": "a1b10abf-8fb1-4ce3-9c62-3039ae62535b"}, "25e21a8c-0747-4ff0-8c25-fe2555db3075": {"doc_hash": "76bf0a89d44a553d6089ebcb114d9655041bf8bb8f258d50680315b75c6bf5e8", "ref_doc_id": "bd2911b7-46d3-4b15-a9f6-c491ea0d4d86"}, "ccc1933d-be8d-42af-ba6c-7a46f1fe144c": {"doc_hash": "85e009c4992e0d95e74bbfe3762f5746a13911b6d45e753590d5261611136de0", "ref_doc_id": "9df8c6a3-5497-4792-95ce-6d87fef33e46"}, "7c7e130a-6225-4973-9ed0-e63bcfa3f10c": {"doc_hash": "783c1f52881d02c9da7800ad59bcdbe6b7a9005afe29ffe34b384ded2825b611", "ref_doc_id": "08a86fc5-6879-434e-80d6-7577f1ddc50f"}, "8f076627-8f17-49f4-8625-5f45c6b77d5d": {"doc_hash": "947fe9ab0da9fdfdfc8be3803d33cd336a728a8259f17cecb2f151e26297c65f", "ref_doc_id": "972b767a-d050-456a-a147-125250297d2c"}, "8fdfe103-77c7-4fe5-b8a7-9dff98c8fb03": {"doc_hash": "a8b1aa330abe146f401b587d0772e325921e9df824ee48a973ec71fb3946cd67", "ref_doc_id": "a0f8d5d5-e4ea-40af-80a6-f1233de1d67e"}, "e8cde47f-b80e-4659-bebb-82d9ece23fef": {"doc_hash": "c44729eefa35fff7865a02fb4fbb0c656604a9ce07e71fc829d288a7d4745f3a", "ref_doc_id": "e53fafa5-16ea-4408-95bb-d4d86913176c"}, "5d4e8af8-5959-4f10-9ebe-9d285cd67c1f": {"doc_hash": "6a78aa43d2bbae92cf5f75f040c5c1617ef971923e96718c318198ec7fbde8c2", "ref_doc_id": "fcd201db-b526-4dea-ae30-039b08a78f64"}, "afe32d30-e775-4dec-a0e2-a9dc03956058": {"doc_hash": "ac7d1fe6493615cf18c61744cebbf35d0ec8858eaff08e4aa8aa641d1f85c781", "ref_doc_id": "fcddaa29-c0e5-47a0-8ef6-873ecc40bf39"}, "b5b3e09b-460c-4034-a25f-4010a53198f7": {"doc_hash": "5cc2905384066b9fedf5f9aaccfc1e4f1ce4735f2d1c762599d638611bda500c", "ref_doc_id": "fdc4e473-29b0-4b40-a9dc-cba672f5cec4"}}, "docstore/data": {"526c3c5b-c4b8-44be-925c-be6af6cff93f": {"__data__": {"id_": "526c3c5b-c4b8-44be-925c-be6af6cff93f", "embedding": null, "metadata": {"page_label": "1", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "075db9be-4db7-4235-9453-07458a0334e2", "node_type": "4", "metadata": {"page_label": "1", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "43ec28f5ff3872bd0d7f9a639df808a5059dba0a5803319835b86cf3775f283e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nCloud Computing \n\uf0b7 Cloud computing is the delivery of  on-demand computing services, from applications to  storage and \nprocessing power, typically over the internet and on a pay-as-you-go basis. \nIntroduction to Cloud Computing \n \nFig. Cloud Computing \n\uf0b7 Cloud Computing is the delivery of computing services such as servers, storage, databases, networking, \nsoftware, analytics, intelligence, and more, over the Cloud (Internet). \n\uf0b7 Cloud Computing provides an alternative to the on-premises datacenter.  \n\uf0b7 With an on -premises datacenter, we have to manage everything, such as purchasing and installing \nhardware, virtualization, installing the operating syst em, and any other required applications, setting up \nthe network, configuring the firewall, and setting up storage for data.  \n\uf0b7 After doing all the set-up, we become responsible for maintaining it through its entire lifecycle. \n\uf0b7 But if we choose Cloud Computing , a cloud vendor is responsible for the hardware purchase and \nmaintenance.  \n\uf0b7 They also provide a wide variety of software and platform as a service.  \n\uf0b7 We can take any required services on rent.  \n\uf0b7 The cloud computing services will be charged based on usage. \n\uf0b7 The cloud environment provides an easily accessible online portal that makes handy for the user to \nmanage the compute, storage, network, and application resources. \nCharacteristics (Features) of Cloud Computing \nThe five essential characteristics of cloud computing: \n1. On-demand self -service: A consumer can separately provision computing capabilities, such as server \ntime and network storage, as needed automatically without requiring human interaction with each \nservice provider. \n2. Broad network access:  Capabilities are available over the network and accessed through standard \nmechanisms that promote use by heterogeneous thin or thick client platforms (e.g.,  mobile phones, \ntablets, laptops and workstations). \n3. Resource pooling: The provider's computing resources are p ooled to serve multiple consumers using a \nmulti-tenant model, with different physical and virtual resources dynamically assigned and reassigned", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2269, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0aec2406-0d3b-4629-bd8b-4f4bb36c3e6e": {"__data__": {"id_": "0aec2406-0d3b-4629-bd8b-4f4bb36c3e6e", "embedding": null, "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c7ccae3-679c-4e79-91f1-069435b17604", "node_type": "4", "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d77accacd56c6502943de64e85a79cb85ab38fc33ac67f3b11c32af58daf581", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b20119a-8194-456f-bbbb-a39c0bac45f7", "node_type": "1", "metadata": {}, "hash": "895f479a06177befb0930d5b554aa514bf78b04d26e50a026b14fd7cc6d5c41f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \naccording to consumer demand. There is a sense of location independence in that the customer \ngenerally has no control or knowledge over the exact location of the provided resources but may be able \nto specify location at a higher level of abstraction (e.g., country, state or datacenter). Examples of \nresources include storage, processing, memory and network bandwidth. \n4. Rapid elasticity: Capabilities can be elastically provisioned and released, in some cases automatically, to \nscale rapidly outward and inward matching with demand. To the consumer, the capabilities available for \nprovisioning often appear to be unlimited and can be appropriated in any quantity at any time. \n5. Measured service:  Cloud systems automatically control and optimize resource use by leveraging a \nmetering capability at some level of abstraction appropriate to the type of service (e.g., storage, \nprocessing, bandwidth and active user accounts). Resource usage can be monitored, controlled and \nreported, providing transparency for the provider and consumer. \nAdvantages of Cloud Computing \n\uf0b7 Cost: It reduces the huge capital costs of buying hardware and software. \n\uf0b7 Speed: Resources can be accessed in minutes, typically within a few clicks. \n\uf0b7 Scalability: We can increase or decrease the requirement of resources according to the business \nrequirements. \n\uf0b7 Productivity: While using cloud computing, we put less operational eff ort. We do not need to apply \npatching, as well as no need to maintain hardware and software. So, in this way, the IT team can be \nmore productive and focus on achieving business goals. \n\uf0b7 Reliability: Backup and recovery of data are less expensive and very fast for business continuity. \n\uf0b7 Security: Many cloud vendors offer a broad set of policies, technologies, and controls that strengthen \nour data security. \nDisadvantages of Cloud Computing \n\uf0b7 Requires good speed internet with good bandwidth : To access your cloud ser vices, you need to have a \ngood internet connection always with good bandwidth to upload or download files to/from the cloud \n\uf0b7 Downtime: Since the cloud requires high internet speed and good bandwidth, there is always a \npossibility of service outage, which ca n result in business downtime. Today, no business can afford \nrevenue or business loss due to downtime or slow down from an interruption in critical business \nprocesses. \n\uf0b7 Limited control of infrastructure : Since you are not the owner of the infrastructure of the cloud, hence \nyou don\u2019t have any control or have limited access to the cloud infra. \n\uf0b7 Restricted or limited flexibility : The cloud provides a huge list of services, but consuming them comes \nwith a lot of restrictions and limited flexibility for your appli cations or developments. Also, platform \ndependency or \u2018vendor lock-in\u2019 can sometimes make it difficult for you to migrate from one provider to \nanother. \n\uf0b7 Ongoing costs: Although you save your cost of spending on whole infrastructure and its management, \non the cloud, you need to keep paying for services as long as you use them. But in traditional methods, \nyou only need to invest once. \n\uf0b7 Security: Security of data is a big concern for everyone. Since the public cloud utilizes the internet, your \ndata may become vulnerable. In the case of a public cloud, it depends on the cloud provider to take care \nof your data.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3502, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b20119a-8194-456f-bbbb-a39c0bac45f7": {"__data__": {"id_": "1b20119a-8194-456f-bbbb-a39c0bac45f7", "embedding": null, "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c7ccae3-679c-4e79-91f1-069435b17604", "node_type": "4", "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d77accacd56c6502943de64e85a79cb85ab38fc33ac67f3b11c32af58daf581", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0aec2406-0d3b-4629-bd8b-4f4bb36c3e6e", "node_type": "1", "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "27b6ba94cd72ce10fcbc16a2858d4ee3b70e044b4f67460ad7d98853c17ee0c2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Since the public cloud utilizes the internet, your \ndata may become vulnerable. In the case of a public cloud, it depends on the cloud provider to take care \nof your data. So, before opting for cloud services, it is required that you find a provider who follows \nmaximum compliance policies for data security.", "mimetype": "text/plain", "start_char_idx": 3331, "end_char_idx": 3640, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d480239-1c8c-4d9a-9fe3-41c891d732cf": {"__data__": {"id_": "6d480239-1c8c-4d9a-9fe3-41c891d732cf", "embedding": null, "metadata": {"page_label": "3", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "303276ac-e9ce-4e8a-ad87-2c1bee28fdc3", "node_type": "4", "metadata": {"page_label": "3", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f92f52d7dc6bfa2a4c1bb444e3dc32fcc1a60e095dc5c71892f979ce829a43d5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Vendor Lock-in: Although the cloud service providers assure you that they will allow you to switch or \nmigrate to any other service provider whenever you want, it is a very difficult process. You will find it \ncomplex to migrate all the cloud services from one service provide r to another. During migration, you \nmight end up facing compatibility, interoperability and support issues. To avoid these issues, many \ncustomers choose not to change the vendor. \n\uf0b7 Technical issues : Even if you are a tech whiz, the technical issues can occur, and everything can\u2019t be \nresolved in -house. To avoid interruptions, you will need to contact your service provider for support. \nHowever, not every vendor provides 24/7 support to their clients. \nDifference between Conventional Computing and Cloud Computing \nConventional Computing Cloud Computing \nIn conventional computing environment more time \nis needed for installation, set up, and configuration. \nOnce the cloud computing environment is set up \ninitially, you can gain access faster than conventional \ncomputing \nCost must be paid in advance Pay-as-you-go \nCost is fixed Cost is variable \nEconomic to scale for all organization Economic to scale for large organization only \nFor Scaling manual effort is needed Scaling can be elastic and automatic \nEnvironment is mix of physical and virtualized Usually environment is virtualized \nHistory of Cloud Computing \n\uf0b7 Before emerging the cloud computing, there was Client/Server computing which is basically a centralized \nstorage in which all the software applications, all t he data and all the controls are resided on the server \nside. \n\uf0b7 If a single user wants to access specific data or run a program, he/she need to connect to the server and \nthen gain appropriate access, and then he/she can do his/her business. \n\uf0b7 Then after, distri buted computing came into picture, where all the computers are networked together \nand share their resources when needed. \n\uf0b7 On the basis of above computing, there was emerged of cloud computing concepts that later \nimplemented. \n\uf0b7 At around in 1961, John MacChart y suggested in a speech at MIT that computing can be sold like a \nutility, just like a water or electricity.  \n\uf0b7 It was a brilliant idea, but like all brilliant ideas, it was ahead of its time, as for the next few decades, \ndespite interest in the model, the technology simply was not ready for it. \n\uf0b7 But of course time has passed and the technology caught that idea and after few years we mentioned \nthat: \no In 1999, Salesforce.com started delivering of applications to users using a simple website. The \napplications were delivered to enterprises over the Internet, and this way the dream of computing \nsold as utility were true. \no In 2002, Amazon started Amazon Web Services, providing services like storage, computation and \neven human intelligence. However, only starting with t he launch of the Elastic Compute Cloud in \n2006 a truly commercial service open to everybody existed. \no In 2009, Google Apps also started to provide cloud computing enterprise applications. \no Of course, all the big players are present in the cloud computing evolution, some were earlier and \nsome were later. In 2009, Microsoft launched Windows Azure, and companies like Oracle and HP \nhave all joined the game. This proves that today, cloud computing has become mainstream.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9754a1f-10ae-4406-83b0-953064d0c9a6": {"__data__": {"id_": "d9754a1f-10ae-4406-83b0-953064d0c9a6", "embedding": null, "metadata": {"page_label": "4", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7807a46c-17e6-46e5-ad3a-b0c37c7dcafa", "node_type": "4", "metadata": {"page_label": "4", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "02ea6986780c04f9d23282668e4558b1f8dd68887e0f9bb22bf55a995692d759", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nCloud Orchestration \n\uf0b7 Cloud Orchestration i s a way to manage, co -ordinate, and provision all the components of a cloud \nplatform automatically from a common interface.  \n\uf0b7 It orchestrates the physical as well as virtual resources of the cloud platform.  \n\uf0b7 Cloud orchestration is a must because cloud servi ces scale up arbitrarily and dynamically, include \nfulfillment assurance and billing, and require workflows in various business and technical domains. \n\uf0b7 Orchestration tools combine automated tasks by interconnecting the processes running across the \nheterogeneous platforms in multiple locations.  \n\uf0b7 Orchestration tools create declarative templates to convert the interconnected processes into a single \nworkflow.  \n\uf0b7 The processes are so orchestrated that the new environment creation workflow is achieved with a single \nAPI call.  \n\uf0b7 Creation of these declarative templates, though complex and time consuming, is simplified by the \norchestration tools. \n\uf0b7 Cloud orchestration includes two types of models:  \no Single Cloud model \no Multi-cloud model \n\uf0b7 In Single cloud model, all the applications designed for a system run on the same IaaS platform (same \ncloud service provider).  \n\uf0b7 Applications, interconnected to create a single workflow, running on various cloud platforms for the \nsame organization define the concept of multi-cloud model.  \n\uf0b7 IaaS requirement for some applications, though designed for same system, might vary. This results in \navailing services of multiple cloud service providers.  \n\uf0b7 For example, application with patient\u2019s sensitive medical data mig ht reside in some IaaS, whereas the \napplication for online OPD appointment booking might reside in another IaaS, but they are \ninterconnected to form one system. This is called multi-cloud orchestration.  \n\uf0b7 Multi-cloud models provide high redundancy as compared to single IaaS deployments.  \n\uf0b7 This reduces the risk of down time. \nElasticity in Cloud \n\uf0b7 Elasticity covers the ability to scale up but also the ability to scale down.  \n\uf0b7 The idea is that you can quickly provision new infrastructure to handle a high load of traffic.  \n\uf0b7 But what happens after that rush? If you leave all of these new instances running, your bill will skyrocket \nas you will be paying for unused resources.  \n\uf0b7 In the worst case scenario, these resources can even cancel out revenue from the sudden rush.  \n\uf0b7 An elastic system prevents this from happening. After a scaled up period, your infrastructure can scale \nback down, meaning you will only be paying for your usual resource usage and some extra for the high \ntraffic period. \n\uf0b7 The key is that this all happens automatically.  \n\uf0b7 When resource needs meet a certain threshold (usually measured by traffic), the system \u201cknows\u201d that it \nneeds to de-provision a certain amount of infrastructure, and does so.  \n\uf0b7 With a couple hours of training, anyone can use the AWS web console to manually add or subtract \ninstances.  \n\uf0b7 But it takes a true Solutions Architect to set up monitoring, account for provisioning time, and configure \na system for maximum elasticity.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad35dca9-70ba-49e3-9244-4a0655101d14": {"__data__": {"id_": "ad35dca9-70ba-49e3-9244-4a0655101d14", "embedding": null, "metadata": {"page_label": "5", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "db822a37-39a6-45b0-9448-40e9c0b9aaf2", "node_type": "4", "metadata": {"page_label": "5", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7c51bc3c79e33c20c27fc09f156a5453f30b210e9cdc22fccd4c24a0b88873b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nCloud Service Options / Cloud Service Models / Cloud Computing Stack \n \nFig. : Cloud Services \n\uf0b7 Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared \npool of configurable computing resources (e.g., networks, servers, sto rage, applications, and services) \nthat can be rapidly provisioned and released with minimal management effort or service provider \ninteraction. \n\uf0b7 Although cloud computing has evolved over the time it has been majorly divided into three broad \nservice categories:  \n1. Infrastructure as a Service(IAAS),  \n2. Platform as a Service (PAAS) and  \n3. Software as a Service (SAAS)  \n1. Infrastructure as a Service (IAAS) \n\uf0b7 Infrastructure as a Service (IAAS) is a form of  cloud computing  that provides virtualized computing \nresources over the internet.  \n\uf0b7 In an IAAS model, a third party provider hosts hardware, software, servers, storage and other \ninfrastructure components on the behalf of its users.  \n\uf0b7 IAAS providers also host users\u2019 applicat ions and handle tasks including system maintenance backup and \nresiliency planning. \n\uf0b7 IAAS platforms offer highly scalable resources that can be adjusted on -demand which makes it a well -\nsuited for workloads that are temporary, experimental or change unexpectedly.  \n\uf0b7 Other characteristics of IAAS environments include the automation of administrative tasks, dynamic \nscaling, desktop virtualization and policy based services.  \n\uf0b7 Technically, the IaaS market has a relatively low barrier of entry, but it may require subs tantial financial \ninvestment in order to build and support the cloud infrastructure.  \n\uf0b7 Mature open -source cloud management frameworks like OpenStack are available to everyone, and \nprovide strong a software foundation for companies that want to build their p rivate cloud or become a \npublic cloud provider. \nIAAS- Network: \n\uf0b7 There are two major network services offered by public cloud service providers:  \n1. load balancing and  \n2. DNS (domain name systems).", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2154, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2fa43c30-2f5b-44ba-9df1-1ec234872806": {"__data__": {"id_": "2fa43c30-2f5b-44ba-9df1-1ec234872806", "embedding": null, "metadata": {"page_label": "6", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff388589-faee-4399-b5b2-89ef549f38b7", "node_type": "4", "metadata": {"page_label": "6", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a3cf762baa64907d18c5a832370105dc2e4c258e09beffb3546ff2b2840bc775", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Load balancing provides a single point of access to multiple servers that run behind it. A load balancer is \na network device that distributes network traffic among servers using specific load balancing algorithms.  \n\uf0b7 DNS is a hierarchical naming system for computers, or any other naming devices that use IP addressing \nfor network identification \u2013 a DNS system associates domain names with IP addresses. \n2. Platform as a Service (PAAS) \n\uf0b7 Platform as a Service (PAAS) is a cloud computing model that delivers applications over the internet.  \n\uf0b7 In a PAAS model, a cloud provider deliv ers hardware and software tools, usually those needed for \napplication development, to its users as a service.  \n\uf0b7 A PAAS provider hosts the hardware and software on its own infrastructure. As a result, PAAS frees users \nfrom having to install in-house hardware and software to develop or run a new application. \n\uf0b7 PAAS doesn\u2019t replace a business' entire infrastructure but instead a business relies on PAAS providers for \nkey services, such as Java development or application hosting.  \n\uf0b7 A PAAS provider, however, supports all the underlying computing and software, users only need to login \nand start using the platform-usually through a Web browser interface.  \n\uf0b7 PAAS providers then charge for that access on a per-use basis or on monthly basis. \n\uf0b7 Some of the main characteristics of PAAS are : \n1) Scalability and auto-provisioning of the underlying infrastructure. \n2) Security and redundancy. \n3) Build and deployment tools for rapid application management and deployment. \n4) Integration with other infrastructure components such as web services, databases, and LDAP. \n5) Multi-tenancy, platform service that can be used by many concurrent users. \n6) Logging, reporting, and code instrumentation. \n7) Management interfaces and/or API. \n3. Software as a Service (SAAS) \n\uf0b7 Software as a Service (SAAS) is a software distribution model in which applications are hosted by a \nvendor or service provider and made available to customers over a network, typically the Internet.  \n\uf0b7 SAAS has become increasingly prevalent delivery model as  underlying technologies that support Web \nservices and service - oriented architecture (SOA) mature and new development approaches, such as \nAjax, become popular.  \n\uf0b7 SAAS is closely related to the ASP (Application service provider) and on demand computing soft ware \ndelivery models.  \n\uf0b7 IDC identifies two slightly different delivery models for SAAS which are \n1) the hosted application model and  \n2) the software development model.   \n\uf0b7 Some of the core benefits of using SAAS model are: \n1) Easier administration. \n2) Automatic updates and patch management. \n3) Compatibility: all users will have the same version of software. \n4) Easier collaboration, for the same reason. \n5) Global accessibility.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2979, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afc16323-8713-4059-a052-0d9d7cbecbbc": {"__data__": {"id_": "afc16323-8713-4059-a052-0d9d7cbecbbc", "embedding": null, "metadata": {"page_label": "7", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "700e1f3d-3b73-47c4-b43d-d566d78b8348", "node_type": "4", "metadata": {"page_label": "7", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "98f58bf893c501818f880994a39eb00133f6330c1ef29f3e9c02dcc3ff722824", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nIssues of SaaS \nPermanent Internet connection \n\uf0b7 Employees using SaaS software services must be permanently connected to the Internet.  \n\uf0b7 Working offline is no longer an option in this situation.  \n\uf0b7 We all know an Internet connection is not a problem anymore nowadays for those working in offices or \nhome.   \n\uf0b7 Companies needing assurance that their employees always have  a connection to their SaaS provider \nshould consider redundant high speed Internet connections.   \n\uf0b7 Are you using mobile devices or travelling constantly? The best solution might be Software plus Service. \nData security \n\uf0b7 When it comes to migrating traditional local software applications to a cloud based platform, data \nsecurity may be a problem.  \n\uf0b7 When a computer and application is compromised the SaaS multi -tenant application supporting many \ncustomers could be exposed to the hackers. \n\uf0b7 Any provider will promise that it will do the best in order for the data to be secure in any circumstances.  \n\uf0b7 But just to make sure, you should ask about their infrastructure and application security. \nData control \n\uf0b7 Many businesses have no idea how their SaaS provider will secure their data or what backup procedures \nwill be applied when needed.  \n\uf0b7 To avoid undesirable effects, before choosing a SaaS vendor, managers should research for providers \nwith good reputations and that the vendor has backup sol utions which are precisely described in the \nService Level Agreement contract. \nData location \n\uf0b7 This means being permanently aware where exactly in the world your data is located.  \n\uf0b7 Although the Federal Information Security Management Act in the USA requires cu stomers to keep \nsensitive data within the country, in virtualized systems, data can move dynamically from one country to \nanother.  \n\uf0b7 Ask about the laws for your customers data in respect to where they are located. \nCloud Deployment Models \nFollowing are the four types of Cloud Deployment Models identified by NIST. \n1. Private Cloud \n2. Community Cloud \n3. Public Cloud \n4. Hybrid Cloud", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2186, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32c79e46-3ec2-49f3-ae23-15f9cf115943": {"__data__": {"id_": "32c79e46-3ec2-49f3-ae23-15f9cf115943", "embedding": null, "metadata": {"page_label": "8", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ba4e9a8-7f20-427f-868d-43f0004843d2", "node_type": "4", "metadata": {"page_label": "8", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d2823c47137e096c2b1833f814011d6207456ec38164ed13a863273c29657562", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n1. Private Cloud \n \nFig.: Private Cloud \n\uf0b7 The cloud infrastructure is operated solely for an organization. \n\uf0b7 Contrary to popular belief, private cloud may exist off premises and can be managed by a third party. \nThus, two private cloud scenarios exist, as follows: \nOn-site Private Cloud \n\uf0b7 Applies to private clouds implemented at a customer\u2019s premises. \nOutsourced Private Cloud \n\uf0b7 Applies to private clouds where the server side is outsourced to a hosting company. \nExamples of Private Cloud: \n\uf0b7 Eucalyptus, Ubuntu Enterprise Cloud - UEC (powered by Eucalyptus) , Amazon VPC (Virtual Private \nCloud), VMware Cloud Infrastructure Suite, Microsoft ECI data center etc. \n2. Community Cloud \n  \nFig. Community Cloud", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 857, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c6606025-9ae2-4c25-baa9-971382aeb477": {"__data__": {"id_": "c6606025-9ae2-4c25-baa9-971382aeb477", "embedding": null, "metadata": {"page_label": "9", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e965e958-d8f7-4c6e-8ed6-9225f92b8d2c", "node_type": "4", "metadata": {"page_label": "9", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "97d201b513ab28c369083c5a3d8a96fc64a4ff1f2f1b1bb9ffb25ff19f78231d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 9 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 The cloud infrastructure is shared by several organizations and supports a specific community that has \nshared concerns (e.g., mission, security requirements, policy, and compliance considerations).   \n\uf0b7 Government departments, universities, central banks etc. often find this type of cloud useful.  \n\uf0b7 Community cloud also has two possible scenarios: \nOn-site Community Cloud Scenario \n\uf0b7 Applies to community clouds implemented on the premises of the customers composing a community \ncloud. \nOutsourced Community Cloud \n\uf0b7 Applies to community clouds where the server side is outsourced to a hosting company. \nExamples of Community Cloud: \n\uf0b7 Google Apps for Government, Microsoft Government Community Cloud, etc. \n3. Public Cloud \n \nFig. : Public Cloud \n\uf0b7 The most ubiquitous, and almost a synonym for, cloud computing.  \n\uf0b7 The cloud infrastructure is made available to the general public or a large industry group and is owned \nby an organization selling cloud services. \nExamples of Public Cloud: \n\uf0b7 Google App Engine, Microsoft Windows Azure, IBM Smart Cloud, Amazon EC2, etc. \n4. Hybrid Cloud \n \nFig. : Hybrid Cloud \n\uf0b7 The cloud infrastructure is a composition of two or more clouds (private, community, or public) that \nremain unique entities but are bound together by standardized or proprietary technology that enables \ndata and application portability (e.g., cloud bursting for load-balancing between clouds). \nExamples of Hybrid Cloud: \n\uf0b7 Windows Azure (capable of Hybrid Cloud), VMware vCloud (Hybrid Cloud Services), etc.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1675, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1c337f11-6037-478c-b732-63b587f1e6e6": {"__data__": {"id_": "1c337f11-6037-478c-b732-63b587f1e6e6", "embedding": null, "metadata": {"page_label": "10", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "366147aa-09ae-407d-a9ed-1e2ed00422b2", "node_type": "4", "metadata": {"page_label": "10", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "648ae13c62d724bb9e9d62eee610ffb0bffd7089268c5c41c24357d5457bdd69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 10 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nEucalyptus \n\uf0b7 Eucalyptus is an open source software platform for implementing Infrastructure as a Service (IaaS) in a \nprivate or hybrid cloud computing environment. \n\uf0b7 The Eucalyptus cloud platform pools together existing virtualized infrastructu re to create cloud \nresources for infrastructure as a service, network as a service and storage as a service.  \n\uf0b7 The name Eucalyptus is an acronym for Elastic Utility Computing Architecture for Linking Your Programs \nto Useful Systems. \n\uf0b7 Eucalyptus was founded out of a research project in the Computer Science Department at the University \nof California, Santa Barbara, and became a for-profit business called Eucalyptus Systems in 2009.  \n\uf0b7 Eucalyptus Systems announced a formal agreement with Amazon Web Services (AWS) in March 2012, \nallowing administrators to move instances between a Eucalyptus private cloud and the Amazon Elastic \nCompute Cloud (EC2) to create a hybrid cloud.  \n\uf0b7 The partnership also allows Eucalyptus to work with Amazon\u2019s product teams to develop unique A WS-\ncompatible features. \nEucalyptus features \n\uf0b7 Supports both Linux and Windows virtual machines (VMs). \n\uf0b7 Application program interface- (API) compatible with Amazon EC2 platform. \n\uf0b7 Compatible with Amazon Web Services (AWS) and Simple Storage Service (S3). \n\uf0b7 Works with multiple hypervisors including VMware, Xen and KVM. \n\uf0b7 Can be installed and deployed from source code or DEB and RPM packages. \n\uf0b7 Internal processes communications are secured through SOAP and WS-Security. \n\uf0b7 Multiple clusters can be virtualized as a single cloud. \n\uf0b7 Administrative features such as user and group management and reports. \nBusiness Concerns in the Cloud \nSecurity \n\uf0b7 Due to the nature of cloud computing services and how they involve storing data without knowing its \nprecise physical location, data security remains a concern for both prospective adopters of the \ntechnology and existing users. \n\uf0b7 However, the security concerns associated with storing things in the cloud are more nuanced than \nmerely not being able to see where data is stored. A number of data breaches involving cloud systems \nmade the headlines in 2017, including the story of financial giant Deloitte having its cloud data \ncompromised. \n\uf0b7 These combined with the natural carefulness of trusting third parties with data makes information \nsecurity a persistent challenge in cloud computing. However, with each breach comes enhanced security \nin cloud systems designed to ensure similar breaches never happen again. Improvements include the use \nof multi-factor authentication, implemented to ensure users are who they claim to be. \n\uf0b7 Truth be told, security for most cloud providers is watertight, and breaches in the cloud are rare\u2014when \nthey do occur, though, they get all the headlines. To minimize risk, double-check that your cloud \nprovider uses secure user identity management and access controls. It\u2019s also important to check which \ndata security laws your cloud provider must follow. On the whole, cloud data security is as safe, if not \nsafer, than on premise data security.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3225, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9a78ecd6-03d8-4716-bb72-28cea8ae65cf": {"__data__": {"id_": "9a78ecd6-03d8-4716-bb72-28cea8ae65cf", "embedding": null, "metadata": {"page_label": "11", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b91ed719-57ad-481b-b36f-4f486e1d960b", "node_type": "4", "metadata": {"page_label": "11", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b8ad6f3cd86774bf88887640b157b0b809070e5f59b7dcfd81345b4cb463dd88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 11 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nOutages \n\uf0b7 Performance is a consistent challenge in cloud computing, particularly for businesses that rely on cloud \nproviders to help them run mission-critical applications. When a business moves to the cloud it becomes \ndependent on the cloud provider, meaning that any outages suffered by the cloud provider also affect \nthe business. \n\uf0b7 The risk of outages in the cloud is not negligible\u2014even the major players in cloud computing are \nsusceptible. In February 2017, an AWS Amazon S3 outage caused disruptions for many websites and \napplications, and even sent them offline. \n\uf0b7 There is a need, therefore, for some kind of site recovery solution for data held in cloud-based services. \nDisaster recovery as a service (DRaaS)\u2014the replication and hosting of servers by a third party to provide \nfailover in the event of a man-made or natural catastrophe\u2014is a way companies can maintain business \ncontinuity even when disaster strikes. \nExpertise \n\uf0b7 The success of any movement towards cloud adoption comes down to the expertise at your disposal. \nThe complexity of cloud technology and the sheer range of tools makes it difficult to keep up with the \noptions available for all your use cases. \n\uf0b7 Organizations need to strike a balance between having the right expertise and the cost of hiring \ndedicated cloud specialists. The optimum solution to this challenge is to work with a trusted cloud \nManaged Service Provider (MSP). Cloud MSPs have the manpower, tools and experience to manage \nmultiple and complex customer environments simultaneously. The MSP takes complete responsibility for \ncloud processes and implementing them as the customer desires. This way, organizations can stay \nfocused on their business goals. \nCost Management \n\uf0b7 All the main cloud providers have quite detailed pricing plans for their services that explicitly define costs \nof processing and storage data in the cloud. The problem is that cost management is often an issue \nwhen using cloud services because of the sheer range of options available. \n\uf0b7 Businesses often waste money on unused workloads or unnecessarily expensive storage, and 26 percent \nof respondents in this cloud survey cited cost management as a major challenge in the cloud. The \nsolution is for organizations to monitor their cloud usage in detail and constantly optimize their choice of \nservices, instances, and storage. You can monitor and optimize cloud implementation by using a cloud \ncost management tool such as CloudHealth or consulting a cloud cost expert. \n\uf0b7 There are also some practical cost calculators available which clarify cloud costs, including Amazon\u2019s \nAWS Simple Monthly Calculator, and NetApp\u2019s calculators for both AWS and Azure cloud storage. \nGovernance \n\uf0b7 Cloud governance, meaning the set of policies and methods used to ensure data security and privacy in \nthe cloud, is a huge challenge. Confusion often arises about who takes responsibility for data stored in \nthe cloud, who should be allowed use cloud resources without first consulting IT personnel, and how \nemployees handle sensitive data. \n\uf0b7 The only solution is for the IT department at your organization to adapt its existing governance and \ncontrol processes to incorporate the cloud and ensure everyone is on the same page. This way, proper \ngovernance, compliance, and risk management can be enforced.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3487, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fe96715a-7994-4155-b561-11b89bb90153": {"__data__": {"id_": "fe96715a-7994-4155-b561-11b89bb90153", "embedding": null, "metadata": {"page_label": "12", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "980a14fc-88df-47a0-b06f-9c4476a88964", "node_type": "4", "metadata": {"page_label": "12", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "311221b84b71fa5f757317f2ca7ef014380d64b9887787de36e94edbd507f79b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 12 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nCloud Optimization Strategy \n\uf0b7 Finding the right strategy for cloud adoption is another important challenge. Many businesses moved to \nthe cloud using a segmented approach in which isolated use cases, projects, and applications were \nmigrated to cloud providers. The problem then for many companies is a lack of any holistic organization-\nwide cloud strategy. \n\uf0b7 Finding the right strategy for cloud adoption comes back to the issue of cloud governance. With \neveryone on the same page thanks to robust cloud governance and clear policies, organizations can \ncreate a unified and optimized strategy for how they use the cloud. \nSteps to Launch an Application with AWS Elastic Beanstalk \nStep 1: Create a New Application \n\uf0b7 Now that you\u2019re in the AWS Elastic Beanstalk dashboard, click on Create New Application to create and \nconfigure your application. \n \nStep 2: Configure your Application \n\uf0b7 Fill out the Application name with \u201cYour -sample-app\u201d and Description field with \u201cSample App\u201d . Click \nNext to continue.  \n \nStep 3: Configure your Environment \n\uf0b7 For this tutorial, we will be creating a web server environment for our sample PHP application. Click on \nCreate web server. \n \n\uf0b7 Click on Select a platform next to Predefined configuration, then select \u201cYour Plateform\u201d. Next, click on \nthe drop-down menu next to Environment type, then select Single instance.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1510, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3baf100a-2600-45d8-ab1e-8a0a77aa2b28": {"__data__": {"id_": "3baf100a-2600-45d8-ab1e-8a0a77aa2b28", "embedding": null, "metadata": {"page_label": "13", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb3fa8e7-0dfb-4d6f-9d67-1d340b4cc195", "node_type": "4", "metadata": {"page_label": "13", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ac0faa4ebd8a9efc614b94c7ee21e64b0fb20bbe717ada8c9406bc101574722a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 13 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n \n\uf0b7 Under Source, select the Upload your own option, then click Choose File to select the \u201cYour-sample-app-\nv1.zip\u201d file we downloaded earlier. \n \n\uf0b7 Fill in the values for Environment name with \u201cYourSampleApp-env\u201d. For Environment URL, fill in a \nglobally unique value since this will be your pu blic-facing URL; we will use \u201cYourS ampleApp-env\u201d in this \ntutorial, so please choose something different from this one. Lastly, fill Description with \u201cYour Sample \nApp\u201d. For the Environment URL, make sure to click Check availa bility to make sure that the URL is not \ntaken. Click Next to continue. \n \n\uf0b7 Check the box next to Create this environment inside a VPC. Click Next to continue. \n \n\uf0b7 On the Configuration Details step, you can set configuration options for the instances in your st ack. Click \nNext. \n\uf0b7 On the Environment Tags step, you can tag all the resources in your stack. Click Next. \n\uf0b7 On the VPC Configuration step, select the first AZ listed by checking the box under the EC2 column. Your \nlist of AZs may look different than the one sho wn as Regions can have different number of AZs. Click \nNext.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1255, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e76992b-7e95-465c-bf0b-441968864fd3": {"__data__": {"id_": "2e76992b-7e95-465c-bf0b-441968864fd3", "embedding": null, "metadata": {"page_label": "14", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51623818-44ad-43f2-9bd0-851c7152f063", "node_type": "4", "metadata": {"page_label": "14", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0cb94bbab86319a508d4c916d3c1fe5d377287a54cae980efcec200b43ac0e1a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-1 \u2013 Introduction to Cloud Technologies \n \n 14 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n \n\uf0b7 At the Permissions step, leave everything to their default values, then click Next to continue. Then \nreview your environment configuration on the next screen and then click Launch to deploy your  \napplication. \nStep 4: Accessing your Elastic Beanstalk Application \n\uf0b7 Go back to the main Elastic Beanstalk dashboard page by clicking on Elastic Beanstalk. When your \napplication successfully launched, your application\u2019s environment, \u201cYourSampleApp-env\u201d, will show up \nas a green box. Click on \u201cYourSampleApp-env\u201d, which is the green box. \n \n\uf0b7 At the top of the page, you should see a URL field, with a value that contains the Environment URL you \nspecified in step 3. Click on this URL field, and you should see a Congratulations page. \n \n\uf0b7 Congratulations! You have successfully launched a sample PHP application using AWS Elastic Beanstalk.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e2efd193-fa20-407a-b98e-13453d31ac96": {"__data__": {"id_": "e2efd193-fa20-407a-b98e-13453d31ac96", "embedding": null, "metadata": {"page_label": "15", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "647b78e3-36ab-4c7b-abf4-3277a73226d7", "node_type": "4", "metadata": {"page_label": "15", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a1ffa48e46e429ff89598a2eede7ba54b79920e8b31dbb0e2d681c714d9ed4d7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nVirtualization \n\uf0b7 Virtualization is changing the mindset from physical to logical. \n \nFig. : Virtualization \n\uf0b7 What virtualization means is creating more logical IT resources, called virtual systems, within one \nphysical system. That\u2019s called system virtualization.  \n\uf0b7 It most commonly uses the hypervisor for managing the resources for every virtual system. The \nhypervisor is a software that can virtualize the hardware resources. \nBenefits of Virtualization \n\uf0b7 More flexible and efficient allocation of resources. \n\uf0b7 Enhance development productivity. \n\uf0b7 It lowers the cost of IT infrastructure. \n\uf0b7 Remote access and rapid scalability. \n\uf0b7 High availability and disaster recovery. \n\uf0b7 Pay per use of the IT infrastructure on demand. \n\uf0b7 Enables running multiple operating system. \nTypes of Virtualization \n1. Application Virtualization: \n\uf0b7 Application virtualization helps a user to have a remote access of an application from a server.  \n\uf0b7 The server stores all personal information and other characteristics of the application but can still run on \na local workstation through internet.  \n\uf0b7 Example of this would be a user who needs to run two different versions of the same software.  \n\uf0b7 Technologies that use application virtualization are hosted applications and packaged applications. \n2. Network Virtualization: \n\uf0b7 The ability to run multiple virtual networks with each has a separate control and data plan.  \n\uf0b7 It co-exists together on top of one physical network.  \n\uf0b7 It can be managed by individual parties that potentially confidential to each other.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1702, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fb2257f-95b5-4d78-82a5-ec72d814bbe5": {"__data__": {"id_": "8fb2257f-95b5-4d78-82a5-ec72d814bbe5", "embedding": null, "metadata": {"page_label": "16", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e979c1e6-7e72-4b1b-86b9-7b5b99ee624b", "node_type": "4", "metadata": {"page_label": "16", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a0373674045e7ee5a8babdcba42ba4f518f77359b151ea227a2882c5eb231d3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Network virtualization provides a facility to create and provision v irtual networks \u2014logical switches, \nrouters, firewalls, load balancer, Virtual Private Network (VPN), and workload security within days or \neven in weeks. \n3. Desktop Virtualization: \n\uf0b7 Desktop virtualization allows the users\u2019 OS to be remotely stored on a server in the data center. \n\uf0b7 It allows the user to access their desktop virtually, from any location by different machine.  \n\uf0b7 Users who wants specific operating systems other than Windows Server will need to have a virtual \ndesktop. \n\uf0b7 Main benefits of desktop virtualizati on are user mobility,  portability, and easy management of software \ninstallation, updates and patches. \n4. Storage Virtualization: \n\uf0b7 Storage virtualization is an array of servers that are managed by a virtual storage system.  \n\uf0b7 The servers aren\u2019t aware of exactly w here their data is stored, and instead function more like worker \nbees in a hive.  \n\uf0b7 It makes managing storage from multiple sources to be managed and utilized as a single repository.  \n\uf0b7 Storage virtualization software maintains smooth operations, consistent pe rformance and a continuous \nsuite of advanced functions despite changes, break down and differences in the underlying equipment. \nFull Virtualization \n\uf0b7 Virtual machine simulates hardware to allow an unmodified guest OS to be run in isolation.  \n\uf0b7 There is two type of Full virtualizations in the enterprise market. \n1. Software assisted full virtualization \n2. Hardware-assisted full virtualization \n\uf0b7 On both full virtualization types, guest operating system\u2019s source information will not be modified. \n1. Software Assisted \u2013 Full Virtualization (BT \u2013 Binary Translation) \n\uf0b7 It completely relies on binary translation to trap and virtualize the execution of sensitive, non -\nvirtualizable instructions sets.  \n\uf0b7 It emulates the hardware using the software instruction sets.  \n\uf0b7 Due to binary translation, it often criticized for performance issue.  \n\uf0b7 Here is the list of software which will fall under software assisted (BT). \no VMware workstation (32Bit guests) \no Virtual PC \no VirtualBox (32-bit guests) \no VMware Server \n2. Hardware-Assisted \u2013 Full Virtualization (VT) \n\uf0b7 Hardware-assisted full virtualization eliminates the binary translation and it directly interrupts with \nhardware using the virtualization technology which has been integrated on X86 processors since 2005 \n(Intel VT-x and AMD-V).   \n\uf0b7 Guest OS\u2019s instructions m ight allow a virtual context execute privileged instructions directly on the \nprocessor, even though it is virtualized. \n\uf0b7 Here is the list of enterprise software which supports hardware -assisted \u2013 Full virtualization which falls \nunder hypervisor type 1  (Bare metal )", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2888, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9fe7a86d-7784-4de5-bb82-a90e7dda0667": {"__data__": {"id_": "9fe7a86d-7784-4de5-bb82-a90e7dda0667", "embedding": null, "metadata": {"page_label": "17", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45aea9f9-0962-4a0c-add1-d0928daa150e", "node_type": "4", "metadata": {"page_label": "17", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "991785ddfccee994083b57077878ca7a550da12adce4762d820f52812baa9224", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \no VMware ESXi /ESX \no KVM \no Hyper-V \no Xen \n\uf0b7 The following virtualization type of virtualization falls under hypervisor type 2 (Hosted). \no VMware Workstation  (64-bit guests only ) \no Virtual Box (64-bit guests only ) \no VMware Server (Retired ) \nParavirtualization \n\uf0b7 Paravirtualization works differently from the full virtualization.  \n\uf0b7 It doesn\u2019t need to simulate the hardware for the virtual machines.  \n\uf0b7 The hypervisor is installed on a physical server (host) and a guest OS is installed into the environment.  \n\uf0b7 Virtual guests aware that it has been virtualized, unlike the full virtualization (where the guest doesn\u2019t \nknow that it has been virtualized) to take advantage of the functions.  \n\uf0b7 In this virtualization method, guest source codes will be modified with sensi tive information to \ncommunicate with the host.  \n\uf0b7 Guest Operating systems require extensions to make API calls to the hypervisor.  \n\uf0b7 In full virtualization, guests will issue a hardware calls but in paravirtualization, guests will directly \ncommunicate with the host (hypervisor) using the drivers.  \n\uf0b7 Here is the lisf of products which supports paravirtualization. \no Xen \no IBM LPAR \no Oracle VM for SPARC  (LDOM) \no Oracle VM for X86  (OVM) \nHybrid Virtualization (Hardware Virtualized with PV Drivers) \n\uf0b7 In Hardware assisted full virtualization, Guest operating systems are unmodified and it involves many \nVM traps and thus high CPU overheads which limit the scalability.   \n\uf0b7 Paravirtualization is a complex method where guest kernel needs to be modified to inject the API.  \n\uf0b7 By considering these issues, engineers have come with hybrid paravirtualization.  \n\uf0b7 It\u2019s a combination of both Full & Paravirtualization. The virtual machine uses paravirtualization for \nspecific hardware drivers (where there is a bottleneck with full virtualization, espe cially with I/O & \nmemory intense workloads), and the host uses full virtualization for other features.  \n\uf0b7 The following products support hybrid virtualization. \no Oracle VM for x86 \no Xen \no VMware ESXi \nOS level Virtualization \n\uf0b7 Operating system-level virtualization is widely used. \n\uf0b7 It also known as \u201ccontainerization\u201d.  \n\uf0b7 Host Operating system kernel allows multiple user spaces also known as instance. \n\uf0b7 In OS-level virtualization, unlike other virtualization technologies, there will be very little or no overhead \nsince its uses the host operating system kernel for execution.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2578, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9bbfd14-a892-4200-9159-a5998fef36c7": {"__data__": {"id_": "b9bbfd14-a892-4200-9159-a5998fef36c7", "embedding": null, "metadata": {"page_label": "18", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "091634d6-963b-40fe-b822-680a060e934d", "node_type": "4", "metadata": {"page_label": "18", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "61fee8b2bb52ad6a4200564fe1faffc466f59bfb1a89254fd0206d27405df334", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Oracle Solaris zone is one of the famous containers in the enterprise market.   \n\uf0b7 Here is the list of other containers. \no Linux LCX \no Docker \no AIX WPAR \nVirtual computing \n\uf0b7 Virtual computing refers to the use of a r emote computer from a local computer where the actual \ncomputer user is located.  \n\uf0b7 For example, a user at a home computer could log in to a remote office computer (via the Internet or a \nnetwork) to perform job tasks.  \n\uf0b7 Once logged in via special software, the  remote computer can be used as though it were at the user's \nlocation, allowing the user to perform tasks via the keyboard, mouse, or other tools. \nVirtual Machine \n\uf0b7 A virtual machine (VM) is an operating system (OS) or application environment that is install ed on \nsoftware, which reproduces dedicated hardware. The end user has the same experience on a virtual \nmachine as they would have on dedicated hardware. \nVirtual Machine Conversions in VMM (Virtual Machine Migration) \n\uf0b7 When you use cloud computing, you are ac cessing pooled resources using a technique called \nvirtualization. \n\uf0b7 Virtualization assigns a logical name for a physical resource and then provides a pointer to that physical \nresource when a request is made.  \n\uf0b7 Virtualization provides a means to manage resources efficiently because the mapping of virtual \nresources to physical resources can be both dynamic and facile. \n\uf0b7 Virtualization is dynamic in that the mapping can be assigned based on rapidly changing conditions, and \nit is facile because changes to a mapping assignment can be nearly instantaneous. \n\uf0b7 These are among the different types of virtualization that are characteristic of cloud computing: \no Access: A client can request access to a cloud service from any location. \no Application: A cloud has multiple app lication instances and directs requests to an instance based on \nconditions. \no CPU: Computers can be partitioned into a set of virtual machines with each machine being assigned a \nworkload. Alternatively, systems can be virtualized through load-balancing technologies. \no Storage: Data is stored across storage devices and often replicated for redundancy. To enable these \ncharacteristics, resources must be highly configurable and flexible.  \n\uf0b7 You can define the features in software and hardware that enable this flexibility as conforming to one or \nmore of the following mobility patterns: \no P2V: Physical to Virtual \no V2V: Virtual to Virtual \no V2P: Virtual to Physical \no P2P: Physical to Physical \no D2C: Datacenter to Cloud \no C2C: Cloud to Cloud \no C2D: Cloud to Datacenter \no D2D: Datacenter to Datacenter", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2756, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b94c38d-1004-4dff-8913-b2e480f438eb": {"__data__": {"id_": "1b94c38d-1004-4dff-8913-b2e480f438eb", "embedding": null, "metadata": {"page_label": "19", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90767b8d-058a-49f8-a42d-05f4469ea04c", "node_type": "4", "metadata": {"page_label": "19", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5a6d84d3d38f5a4f7204215eb27713a32f0105d549832e2e9e190797dad36252", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nVirtual Machine Types \n1. General Purpose \n\uf0b7 This family includes the M1 and M3 VM types.  \n\uf0b7 These types provide a balance of CPU, memory, and network resources, which makes them a good \nchoice for many applications.  \n\uf0b7 The VM types in this family range in size from one virtual CPU with two GB of RAM to eight virtual CPUs \nwith 30 GB of RAM.  \n\uf0b7 The balance of resources makes them ideal for running small and mid -size databases, more memory -\nhungry data processing tasks, caching fleets, and backend servers. \n\uf0b7 M1 types offer smaller instance sizes with moderate CPU performance.  \n\uf0b7 M3 types offer larger number of virtual CPUs that provide higher performance.  \n\uf0b7 It is recommended to  use M3 instances if you need general -purpose instances with demanding CPU \nrequirements. \n2. Compute Optimized \n\uf0b7 This family includes the C1 and CC2 instance types, and is geared towards applications that benefit from \nhigh compute power.  \n\uf0b7 Compute-optimized VM types have a higher ratio of virtual CPUs to memory than o ther families but \nshare the NCs (Node Controllers) with non-optimized ones.  \n\uf0b7 It is recommended to use these type if you are running any CPU-bound scale-out applications.  \n\uf0b7 CC2 instances provide high core count (32 virtual CPUs) and support for cluster networking.  \n\uf0b7 C1 instances are available in smaller sizes and are ideal for scaled-out applications at massive scale. \n3. Memory Optimized \n\uf0b7 This family includes the CR1 and M2 VM types and is designed for memory-intensive applications.  \n\uf0b7 It is recommended to use these VM types for performance-sensitive database, where your application is \nmemory-bound.  \n\uf0b7 CR1 VM types provide more memory and faster CPU than do M2 types.  \n\uf0b7 CR1 instances also support cluster networking for bandwidth intensive applications.  \n\uf0b7 M2 types are avai lable in smaller sizes, and are an excellent option for many memory -bound \napplications. \n4. Micro \n\uf0b7 This Micro family contains the T1 VM type.  \n\uf0b7 The T1 micro provides a small amount of consistent CPU resources and allows you to increase CPU \ncapacity in short bursts when additional cycles are available.  \n\uf0b7 It is recommended to use  this type  of VM  for lower throughput applications like a proxy server or \nadministrative applications, or for low -traffic websites that occasionally require additional compute \ncycles. It is not recommended for applications that require sustained CPU performance. \nLoad Balancing \n\uf0b7 In computing, load balancing improves the distribution of workloads across multiple computing \nresources, such as computers, a computer cluster, network links, central processing units, or disk drives.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2788, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72975597-5007-4a9c-a4c8-00404ccf46b6": {"__data__": {"id_": "72975597-5007-4a9c-a4c8-00404ccf46b6", "embedding": null, "metadata": {"page_label": "20", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8ef5243-6fea-472a-a550-f3cd1353883c", "node_type": "4", "metadata": {"page_label": "20", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "57321bb23d194385c5644887cb2d0fe28808f0916d7c77cc2b465480d572a92e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nNeed of load balancing in cloud computing \n(i) High Performing applications \no Cloud load balancing techniques, unlike their traditional on premise counterparts, are less expensive \nand simple to implement. Enterprises can make the ir client applications work faster and deliver \nbetter performances, that too at potentially lower costs. \n(ii) Increased scalability \no Cloud balancing takes help of cloud\u2019s scalability and agility to maintain website traffic. By using \nefficient load balancers, you  can easily match up the increased user traffic and distribute it among \nvarious servers or network devices. It is especially important for ecommerce websites, who deals \nwith thousands of website visitors every second. During sale or other promotional offer s they need \nsuch effective load balancers to distribute workloads. \n(iii) Ability to handle sudden traffic spikes \no A normally running University site can completely go down during any result declaration. This is \nbecause too many requests can arrive at the same tim e. If they are using cloud load balancers, they \ndo not need to worry about such traffic surges. No matter how large the request is, it can be wisely \ndistributed among different servers for generating maximum results in less response time. \n(iv) Business continuity with complete flexibility \no The basic objective of using a load balancer is to save or protect a website from sudden outages. \nWhen the workload is distributed among various servers or network units, even if one node fails the \nburden can be shifted to another active node. \no Thus, with increased redundancy, scalability and other features load balancing easily handles \nwebsite or application traffic. \nNetwork resources that can be load balanced \n\uf0b7 Servers \n\uf0b7 Routing mechanism \nHypervisors \n\uf0b7 It is the part of the private c loud that manages the virtual machines, i.e. it is the part (program) that \nenables multiple operating systems to share the same hardware.  \n\uf0b7 Each operating system could use all the hardware (processor, memory, etc.) if no other operating system \nis on. That is the maximum hardware available to one operating system in the cloud. \n\uf0b7 Nevertheless, the hypervisor is what controls and allocates what portion of hardware resources each \noperating system should get, in order every one of them to get what they need and not  to disrupt each \nother.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2512, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "420b9361-fee8-472b-ae33-50a8887603c9": {"__data__": {"id_": "420b9361-fee8-472b-ae33-50a8887603c9", "embedding": null, "metadata": {"page_label": "21", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fec2d1e4-fd7f-40d4-b5c9-a69d722654e1", "node_type": "4", "metadata": {"page_label": "21", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "949f4333d9cfec1989291460f54e94b1b09b0dceff613e12ae92efa3d38f7918", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nThere are two types of hypervisors \n \nFig. : Types of Hypervisors \n\uf0b7 Type 1 hypervisor : hypervisors run directly on the system hardware \u2013 A \u201cbare metal\u201d embedded \nhypervisor. Examples are:  \n1) VMware ESX and ESXi \n2) Microsoft Hyper-V \n3) Citrix XenServer \n4) Oracle VM \n\uf0b7 Type 2 hypervisor: hypervisors run on a host operating system that provides virtualization services, such \nas I/O device support and memory management. Examples are: \n1) VMware Workstation/Fusion/Player \n2) Microsoft Virtual PC \n3) Oracle VM VirtualBox \n4) Red Hat Enterprise Virtualization \nMachine Imaging \n\uf0b7 Machine imaging is a process that is used to achieve the goal of system portability, provision, and deploy \nsystems in the cloud through capturing the state of systems using a system image. \n\uf0b7 A system image makes a copy or a clone of the entire computer system inside a single file.  \n\uf0b7 The image is made by using a program called system imaging program and can be used later to restore a \nsystem image.  \n\uf0b7 For example Amazon Machine Image (AMI) is a system image that is used in the cloud computing.  \n\uf0b7 The Amazon Web Services uses AMI to store copies of a virtual machine.  \n\uf0b7 An AMI is a file system image that contains an operating system, all device drivers, and any applications \nand state information that the working virtual machine would have.  \n\uf0b7 The AMI files are encrypted and compressed for security purpose and stored in Amazon S3 (Simple \nStorage System) buckets as a set of 10MB chunks.  \n\uf0b7 Machine imaging is mostly run on virtualization platform due to this it is also calle d as Virtual Appliances \nand running virtual machines are called instances. \n\uf0b7 Because many users share clouds, the cloud helps you track information about images, such as \nownership, history, and so on.  \n\uf0b7 The IBM SmartCloud Enterprise knows what organization you belong to when you log in.  \n\uf0b7 You can choose whether to keep images private, exclusively for your own use, or to share with other \nusers in your organization.  \n\uf0b7 If you are an independent software vendor, you can also add your images to the public catalog.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2247, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ef98096-335a-46ca-a9d5-47b2f3d66aa2": {"__data__": {"id_": "5ef98096-335a-46ca-a9d5-47b2f3d66aa2", "embedding": null, "metadata": {"page_label": "22", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93da667f-52c2-41cc-a649-e9ca7b46a0cf", "node_type": "4", "metadata": {"page_label": "22", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4667ee3470277113cfb90e704c013ab3c54c4e1c2fc845a045344e67ba63050e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nCloud Marketplace Overview \n\uf0b7 A cloud marketplace is an online storefront operated by a cloud service provider. \n\uf0b7 A cloud marketplace provides customers with access to software applications and services that are built \non, integrate with or complement the cloud provider's offerings.  \n\uf0b7 A marketplace typically provides customers with native cloud applications and approved apps created by \nthird-party developers.  \n\uf0b7 Applications from third -party developers not only help the cloud provider fill niche gaps in its portfoli o \nand meet the needs of more customers, but they also provide the customer with peace of mind by \nknowing that all purchases from the vendor's marketplace will integrate with each other smoothly. \nExamples of cloud marketplaces \n\uf0b7 AWS Marketplace - helps custom ers find, buy and use software and services that run in the Amazon \nElastic Compute Cloud (EC2). \n\uf0b7 Oracle Marketplace - offers a comprehensive list of apps for sales, service, marketing, talent \nmanagement and human capital management. \n\uf0b7 Microsoft Windows Azure Marketplace - an online market for buying and selling Software as a Service \n(SaaS) applications and research datasets. \n\uf0b7 Salesforce.com's AppExchange - provides business apps for sales representatives and customer \nrelationship management (CRM). \nComparison of Cloud Providers \n Amazon Web Service Azure Rackspace \nIntroduction Amazon Web Services \n(AWS) is a collection of \nremote computing services \n(also called web services) \nthat together make up a \ncloud computing platform, \noffered over the Internet by \nAmazon.com. \nAzure is a cloud computing \nplatform and \ninfrastructure, created by \nMicrosoft, for building, \ndeploying and managing \napplications and services \nthrough a global network \nof Microsoft-managed \ndatacenters. \nRackspace is a managed \ncloud computing provider \noffering high percentage \navailability of applications \nbased on RAID10. \nDistinguishing \nFeatures \nRich set of services and \nintegrated monitoring tools; \ncompetitive pricing model. \nEasy-to-use administration \ntool, especially for \nWindows admins. \nEasy to use control panel, \nespecially for non-system \nadministrators. \nVirtualization Xen hypervisor Microsoft Hyper-V Opensource (Xen, Kvm ) \nand VMware \nBase OS Linux (+QEMU) and \nWindows \nWindows and Linux Ubuntu \nPricing model Pay-as-you-go, then \nsubscription \nPay-as-you-go Pay-as-you-go \nMajor products Elastic block store, IP  \naddresses, virtual private \ncloud, cloud watch, Cloud \nFront, clusters etc. \nServer Failover Clustering, \nNetwork Load Balancing, \nSNMP Services, Storage \nManager for SANs, \nWindows Internet Name \nService, Disaster Recovery \nto Azure, Azure Caching \nand Azure Redis Cache. \nManaged cloud, block \nstorage, monitoring", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2885, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c4020200-a44a-42bb-85ee-b2ecafe28728": {"__data__": {"id_": "c4020200-a44a-42bb-85ee-b2ecafe28728", "embedding": null, "metadata": {"page_label": "23", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "383bf45c-83f8-45d5-b6a5-756cae3e8989", "node_type": "4", "metadata": {"page_label": "23", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "244e0bfa502e40415fc256aab7134eb9f51dbcff0dc657103e4befe89e0a74fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-2 \u2013 Virtualization and Cloud Platforms \n \n 9 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n Amazon Web Service Azure Rackspace \nCDN Features Origin-Pull, Purge, Gzip \ncompression, Persistent \nconnections, Caching \nheaders, Custom CNAMEs, \nControl Panel & stats, \nAccess Logs. \nRobust security, Lower \nlatencies, Massively \nscalable, Capacity on \ndemand. \nRackspace provide CDN \nservices through a \npartnership with Akamai\u2019s \nservice. \nAccess interface Web-based, API, console Web interface Web-based control panel \nPreventive \nmeasures \nModerate Basic Basic \nReactive \nmeasures \nModerate Basic Basic \nReliability Good Average Good \nScalability Good Good Good \nSupport Good and chargeable Good Excellent \nAvailability (%) 99.95 99.95 99.99 \nServer \nPerformance \n(Over a period) \nGood Excellent and consistent Average \nTools/ \nframework \nAmazon machine image \n(AMI), Java,  PHP,  Python, \nRuby \nPHP, ASP.NET, Node.js, \nPython \n    - \nDatabase RDS MySQL, MsSQL, Oracle Microsoft SQL Database MySQL", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1044, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "458a3b13-e0a7-4b00-a0c9-a282153ed702": {"__data__": {"id_": "458a3b13-e0a7-4b00-a0c9-a282153ed702", "embedding": null, "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfa0c1b9-f964-4956-a67f-12eac5f659ff", "node_type": "4", "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3603c3a35b5f4aaa03466a74b3caf544f574299fb5ef857171d236338b51dd41", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1122ae01-74ec-448f-8a20-7c0a4f357bf4", "node_type": "1", "metadata": {}, "hash": "b07ea9a338f5e34d07ad94d760c162861bc2df23c163fc3edaadebfe16068472", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-3 \u2013 Introduction to AWS \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAWS History \n\uf0b7 The AWS platform was launched in July 2002.  \n\uf0b7 In its early stages, the platform consisted of only a few disparate tools and services.  \n\uf0b7 Then in late 2003, the AWS concept was publicly reformulated when Chris Pinkham and Benjamin Black \npresented a paper describing a vision for Amazon's retail computing infrastructure that was completely \nstandardized, completely automated, and would rely ext ensively on web services for services such as \nstorage and would draw on internal work already underway.  \n\uf0b7 Near the end of their paper, they mentioned the possibility of selling access to virtual servers as a \nservice, proposing the company could generate revenue from the new infrastructure investment. \n\uf0b7 In November 2004, the first AWS service launched for public usage: Simple Queue Service (SQS). \n\uf0b7 Thereafter Pinkham and lead developer Christopher Brown developed the Amazon EC2 service, with a \nteam in Cape Town, South Africa. \n\uf0b7 Amazon Web Services was officially re -launched on March 14, 2006, combining the three initial service \nofferings of Amazon S3 cloud storage, SQS, and EC2.  \n\uf0b7 The AWS platform finally provided an integrated suite of core online services, as Chris  Pinkham and \nBenjamin Black had proposed back in 2003, as a service offered to other developers, web sites, client -\nside applications, and companies. \n\uf0b7 Andy Jassy, AWS founder and vice president in 2006, said at the time that Amazon S3 (one of the first \nand most scalable elements of AWS) helps free developers from worrying about where they are going to \nstore data, whether it will be safe and secure, if it will be available when they need it, the costs \nassociated with server maintenance, or whether they have enough storage available.  \n\uf0b7 Amazon S3 enables developers to focus on innovating with data, rather than figuring out how to store it. \n\uf0b7 In 2016 Jassy was promoted to CEO of the division. \n\uf0b7 Reflecting the success of AWS, his annual compensation in 2017 hit nearly $36 million. \n\uf0b7 In 2014, AWS launched its partner network entitled APN (AWS Partner Network) which is focused on \nhelping AWS-based companies grow and scale the success of their business with close collaboration and \nbest practices. \n\uf0b7 To support industry-wide training and skills standardization, AWS began offering a certification program \nfor computer engineers, on April 30, 2013, to highlight expertise in cloud computing. \n\uf0b7 In January 2015, Amazon Web Services acquired Annapurna Labs, an Israel -based microelectronics  \ncompany reputedly for US$350\u2013370M. \n\uf0b7 James Hamilton, an AWS engineer, wrote a retrospective article in 2016 to highlight the ten -year history \nof the online service from 2006 to 2016. As an early fan and outspoken proponent of the technology, he \nhad joined the AWS engineering team in 2008. \n\uf0b7 In January 2018, Amazon launched an auto scaling service on AWS. \n\uf0b7 In November 2018, AWS announced customized ARM cores for use in its servers. \n\uf0b7 Also in November 2018, AWS is developing ground stations to communicate with customer's satellites.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3187, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1122ae01-74ec-448f-8a20-7c0a4f357bf4": {"__data__": {"id_": "1122ae01-74ec-448f-8a20-7c0a4f357bf4", "embedding": null, "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bfa0c1b9-f964-4956-a67f-12eac5f659ff", "node_type": "4", "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3603c3a35b5f4aaa03466a74b3caf544f574299fb5ef857171d236338b51dd41", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "458a3b13-e0a7-4b00-a0c9-a282153ed702", "node_type": "1", "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cc6c2a12d4498c5401d0e7db22cd2681d8765615610b2799ba5ff4b744bbc7d3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 Also in November 2018, AWS is developing ground stations to communicate with customer's satellites. \nAWS Infrastructure \n\uf0b7 Amazon Web Services (AWS) is a global public cloud provider, and as such, it has to have a global \nnetwork of infrastructure to run and manage its many growing cloud services that support customers \naround the world.  \n\uf0b7 Now we\u2019ll take a look at the components that make up the AWS Global Infrastructure. \n1) Availability Zones (AZs)", "mimetype": "text/plain", "start_char_idx": 3086, "end_char_idx": 3544, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ef57f86-47fd-4240-a15e-df75846880db": {"__data__": {"id_": "2ef57f86-47fd-4240-a15e-df75846880db", "embedding": null, "metadata": {"page_label": "25", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e76c156d-3ad9-46d8-ab12-8a8ff441619a", "node_type": "4", "metadata": {"page_label": "25", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9240a6ecf64b4e9543f254fd4edf123f02bddacaad8967a35bb7f42106b51c99", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-3 \u2013 Introduction to AWS \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n2) Regions \n3) Edge Locations \n4) Regional Edge Caches \n\uf0b7 If you are deploying services on AWS, you\u2019ll want to have a clear understanding of each of these \ncomponents, how they are linked, and how you can use them within your solution to YOUR maximum \nbenefit. Let\u2019s take a closer look. \n1) Availability Zones (AZ) \n\uf0b7 AZs are essentially the physical data centers of AWS. This is where the actual compute, storage, network, \nand database resources are hosted that we as consumers provision within our Virtual Private Clouds \n(VPCs).  \n\uf0b7 A common misconception is that a single availability zone is equal to a single data center. This is not the \ncase. In fact, it\u2019s likely that multiple data centers located close together form a single availability zone. \n\uf0b7 Each AZ will always have at least one other AZ that is geographically located within the same area, \nusually a city, linked by highly resilient and very low latency private fiber optic co nnections. However, \neach AZ will be isolated from the others using separate power and network connectivity that minimizes \nimpact to other AZs should a single AZ fail. \n\uf0b7 These low latency links between AZs are used by many AWS services to replicate data for h igh \navailability and resilience purposes.  \n\uf0b7 Multiple AZs within a region allows you to create highly available and resilient applications and services.  \n\uf0b7 By architecting your solutions to utilize resources across more than one AZ ensures that minimal or no \nimpact will occur to your infrastructure should an AZ experience a failure, which does happen. \n\uf0b7 Anyone can deploy resources in the cloud, but architecting them in a way that ensures your \ninfrastructure remains stable, available, and resilient when faced with a disaster is a different matter.  \n\uf0b7 Making use of at least two AZs in a region helps you maintain high availability of your infrastructure and \nit\u2019s always a recommended best practice. \n \nFig. : Availability Zone and Region \n2) Regions \n\uf0b7 Region is a collection of availability zones that are geographically located close to one other.  \n\uf0b7 This is generally indicated by AZs within the same city. AWS has deployed them across the globe to allow \nits worldwide customer base to take advantage of low latency connections.  \n\uf0b7 Each Region will act independently of the others, and each will contain at least two Availability Zones.  \n\uf0b7 Example: if an organization based in London was serving customers throughout Europe, there would be \nno logical sense to deploy s ervices in the Sydney Region simply due to the latency response times for its", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2702, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d1d51558-9f4f-46ba-ba8a-04824fb3a16c": {"__data__": {"id_": "d1d51558-9f4f-46ba-ba8a-04824fb3a16c", "embedding": null, "metadata": {"page_label": "26", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fb35324-6458-4eb7-b08d-ce065ce9cbd4", "node_type": "4", "metadata": {"page_label": "26", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "61a3f20f5a492b07e047e8f0c11105e4f2d8c50e394807a8b64bb425fc16cabd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-3 \u2013 Introduction to AWS \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \ncustomers. Instead, the company would select the region most appropriate for them and their customer \nbase, which may be the London, Frankfurt, or Ireland Region. \n\uf0b7 Having global regions also allows for compliance with regulations, laws, and governance relating to data \nstorage (at rest and in transit).  \n\uf0b7 Example: you may be required to keep all data within a specific location, such as Europe. Having multiple \nregions within this location allows an organization to meet this requirement. \n\uf0b7 Similarly to how utilizing multiple AZs within a region creates a level of high availability, the same can be \napplied to utilizing multiple regions.  \n\uf0b7 You may want to use multiple regions if you are a glob al organization serving customers in different \ncountries that have specific laws and governance about the use of data.  \n\uf0b7 In this case, you could even connect different VPCs together in different regions.  \n\uf0b7 The number of regions is increasing year after year as AWS works to keep up with the demand for cloud \ncomputing services.  \n\uf0b7 In July 2017, there are currently 16 Regions and 43 Availability Zones, with 4 Regions and 11 AZs \nplanned. \n3) Edge Locations \n\uf0b7 Edge Locations are AWS sites deployed in major cities and highl y populated areas across the globe. They \nfar outnumber the number of availability zones available. \n\uf0b7 While Edge Locations are not used to deploy your main infrastructures such as EC2 instances, EBS \nstorage, VPCs, or RDS resources like AZs, they are used by A WS services such as AWS CloudFront and \nAWS Lambda@Edge (currently in Preview) to cache data and reduce latency for end user access by using \nthe Edge Locations as a global Content Delivery Network (CDN). \n\uf0b7 As a result, Edge Locations are primarily used by end users who are accessing and using your services. \n\uf0b7 For example, you may have your website hosted on EC2 instances and S3 (your origin) within the Ohio \nregion with a configured CloudFront distribution associated. When a user accesses your website from \nEurope, they would be re-directed to their closest Edge Location (in Europe) where cached data could be \nread on your website, significantly reducing latency. \n \nFig. : Edge Location and Regional Edge Cache \n4) Regional Edge Cache \n\uf0b7 In November 2016, AWS announced a new type of Edge Location, called a Regional Edge Cache.  \n\uf0b7 These sit between your CloudFront Origin servers and the Edge Locations.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2544, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cb1c2ee-8cbf-4704-b578-52333804ab10": {"__data__": {"id_": "5cb1c2ee-8cbf-4704-b578-52333804ab10", "embedding": null, "metadata": {"page_label": "27", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54848abb-2367-4766-a30e-57c75f45870d", "node_type": "4", "metadata": {"page_label": "27", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "217f86818c7e92be8a3d41ecb7cc07d7d7ba13de5f6435b573737867bcc33a63", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-3 \u2013 Introduction to AWS \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 A Regional Edge Cache has a larger cache -width than each of the individual Edge Locations , and because \ndata expires from the cache at the Edge Locations, the data is retained at the Regional Edge Caches. \n\uf0b7 Therefore, when data is requested at the Edge Location that is no longer available, the Edge Location can \nretrieve the cached data from the Regional Edge Cache instead of the Origin servers, which would have a \nhigher latency. \nPods, Aggregation, Silos \n\uf0b7 Workloads support a certain no. of user when the workload reaches the limit of largest virtual machine \ninstance possible, a copy or clone of the i nstance is required. A group of users within a particular \ninstance is called a pod. \n\uf0b7 Sizing limitation of pod need to be considered when building large cloud -based application. Pods are \naggregated into pools within IaaS region or site called an availability zone. \n\uf0b7 When the computing infrastructure isolates user clouds from one another, so that interoperating is \nimpossible this creates an information silo, or simply silo. \nAWS Services \n\uf0b7 This AWS services list covers the huge catalog of services offered by Amazon  Web Services (AWS). These \nservices range from the core compute products like EC2 to newer releases like AWS Deepracer for \nmachine learning. \n\uf0b7 There are currently 190 unique services  provided by AWS which divided into 24 categories which are \nlisted below: \no Analytics \no Application Integration \no AR & VR \no AWS Cost Management \no Blockchain \no Business Applications \no Compute \no Customer Engagement \no Database \no Developer Tools \no End User Computing \no Game Tech \no Internet of Things \no Machine Learning \no Management & Governance \no Media Services \no Migration & Transfer \no Mobile \no Networking & Content Delivery \no Robotics \no Satellite \no Security, Identity, & Compliance \no Storage \no Quantum Technologies", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1993, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c74fc8f6-f6a7-4781-a4a7-0a28b7eb3cd5": {"__data__": {"id_": "c74fc8f6-f6a7-4781-a4a7-0a28b7eb3cd5", "embedding": null, "metadata": {"page_label": "28", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ff3db94-a69c-4747-9cf6-d93725161af3", "node_type": "4", "metadata": {"page_label": "28", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "61b7898e251b49ddf0c828fb5ad95d071b9074e53f3fab266f771780dd184215", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-3 \u2013 Introduction to AWS \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAWS Ecosystem \n\uf0b7 In general a cloud ecosystem is a complex system of interdependent components that all work together \nto enable cloud services. In cloud computing, the ecosystem consists of hardware and software as well \nas cloud customers, cloud engineers, consultants, integrators and partners. \n\uf0b7 Amazon Web Services (AWS) is the market leader in IaaS (Infrastructure -as-a-Service) and PaaS  \n(Platform-as-a-Service) for cloud ecosystems, which can be combined to create a scalable cloud  \napplication without worrying about delays related to infrastructure provisioning (compute, storage, and \nnetwork) and management. \n\uf0b7 With AWS you can select the specific solutions you need, and only pay for exactly what you use,  \nresulting in lower capital expenditure and faster time to value without sacrificing application \nperformance or user experience. \n\uf0b7 New and existing companies can build their di gital infrastructure partially or entirely in the cloud with \nAWS, making the on premise data center a thing of the past.  \n\uf0b7 The AWS cloud ensures infrastructure reliability, compliance with security standards, and the ability to \ninstantly grow or shrink your  infrastructure to meet your needs and maximize your budget, all without \nupfront investment in equipment.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc5861d4-a7e0-467a-8436-5342b71b8e0a": {"__data__": {"id_": "fc5861d4-a7e0-467a-8436-5342b71b8e0a", "embedding": null, "metadata": {"page_label": "29", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34e83e49-6a80-40b7-b033-ecbd1b8f3edd", "node_type": "4", "metadata": {"page_label": "29", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9d9fbcd6b78237ce06e3f57a7157d06188c2212ad344c6a0f85a8dabb30230a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nBasic Understanding APIs \n\uf0b7 Amazon API Gateway is an AWS service for creating, publishing, maintaining, monitoring, and securing \nREST, HTTP, and WebSocket  APIs at any scale. API developers can create APIs that access AWS or other \nweb services, as well as data stored in the AWS Cloud. As an API Gateway API developer, you can create \nAPIs for use in your own client applications. Or you can make your APIs avail able to third -party app \ndevelopers. For more information, see Who uses API Gateway? \n\uf0b7 API Gateway creates RESTful APIs that: \no Are HTTP-based. \no Enable stateless client-server communication. \no Implement standard HTTP methods such as GET, POST, PUT, PATCH, and DELETE. \nAWS Programming Interfaces \nAPI Gateway \n\uf0b7 API Gateway is an AWS service that supports the following: \no Creating, deploying, and managing a RESTful application programming interface (API) to expose \nbackend HTTP endpoints, AWS Lambda functions, or other AWS services. \no Creating, deploying, and managing a WebSocket API to expose AWS Lambda functions or other AWS \nservices. \no Invoking exposed API methods through the frontend HTTP and WebSocket endpoints. \nAPI Gateway REST API \n\uf0b7 A collection of HTTP resources and methods  that are integrated with backend HTTP endpoints, Lambda  \nfunctions, or other AWS services. You can deploy this collection in one or more stages. Typically, API \nresources are organized in a resource tree according to the application logic. Each API resource can expose \none or more API methods that have unique HTTP verbs supported by API Gateway. \nAPI Gateway HTTP API \n\uf0b7 A collection of routes and methods that are integrated with backend HTTP endpoints or Lambda functions. \nYou can deploy this collection in one or more stages. Each route can expose one or more API methods that \nhave unique HTTP verbs supported by API Gateway. \nAPI Gateway WebSocket API \n\uf0b7 A collection of WebSocket routes and route keys that are integrated with backend HTTP endpoints, \nLambda functions, or  other AWS services. You can deploy this collection in one or more stages. API \nmethods are invoked through frontend WebSocket connections that you can associate with a registered \ncustom domain name. \nAPI Deployment \n\uf0b7 A point-in-time snapshot of your API Gateway API. To be available for clients to use, the deployment must \nbe associated with one or more API stages. \nAPI Developer \n\uf0b7 Your AWS account that owns an API Gateway deployment (for example, a service provider that also \nsupports programmatic access).", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2676, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "617b2c11-fa3d-4382-bc29-69ea80f26192": {"__data__": {"id_": "617b2c11-fa3d-4382-bc29-69ea80f26192", "embedding": null, "metadata": {"page_label": "30", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e4262c3-6284-4f28-af62-08877c89c68d", "node_type": "4", "metadata": {"page_label": "30", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "14ded0ec87a31b775aa0b08657f354995cc09b449081da2a51cc2ac8f3c91c7d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAPI Endpoint \n\uf0b7 A hostname for an API in API Gateway that is deployed to a specific Region. The hostname is of the form \n{api-id}.execute-api.{region}.amazonaws.com. The following types of API endpoints are supported: \no Edge-optimized API endpoint \n\uf0a7 The default hostname of an API Gateway API that is deployed to the specified Region while using a \nCloudFront distribution to facilitate client access typically from across AWS Regions. API requests \nare routed to the nearest CloudFront Point of Presence (POP), which typically improves connection \ntime for geographically diverse clients. \no Private API endpoint \n\uf0a7 An API endpoint that is exposed through interface VPC endpoints and allows a client to securely \naccess private API resources inside a VPC. Private APIs are isolated from the pu blic internet, and \nthey can only be accessed using VPC endpoints for API Gateway that have been granted access. \no Regional API endpoint \n\uf0a7 The host name of an API that is deployed to the specified Region and intended to serve clients, \nsuch as EC2 instances, in the same AWS Region. API requests are targeted directly to the Region-\nspecific API Gateway API without going through any CloudFront distribution. For in -Region \nrequests, a Regional endpoint bypasses the unnecessary round trip to a CloudFront distribution. \nAPI Key \n\uf0b7 An alphanumeric string that API Gateway uses to identify an app developer who uses your REST or \nWebSocket API. API Gateway can generate API keys on your behalf, or you can import them from a CSV  \nfile. You can use API keys together with Lambda authorizers or usage plans to control access to your APIs. \nWebSocket Connection \n\uf0b7 API Gateway maintains a persistent connection between clients and API Gateway itself. There is no \npersistent connection between API Gateway and backend integrations such as Lambda functions. Backend \nservices are invoked as needed, based on the content of messages received from clients. \nWeb Services \n\uf0b7 You can choose from a couple of different schools of thought for how web services should be delivered.  \n\uf0b7 The older approach, SOAP (short for Simple Object Access Protocol), had widespread industry support, \ncomplete with a comprehensive set of standards.  \n\uf0b7 Those standards were too comprehensive,  unfortunately. The people designing SOAP set it up to be \nextremely flexible \u2014it can communicate across the web, e-mail, and private networks.  \n\uf0b7 To ensure security and manageability, a number of supporting standards that integrate  with SOAP were \nalso defined. \n\uf0b7 SOAP is based on a document encoding standard known as Extensible Markup Language (XML, for short), \nand the SOAP service is defined in such a  way that users can then leverage XML no matter what the \nunderlying communication network is.  \n\uf0b7 For this system to work, though, the data transferred by SOAP (commonly referred to as the payload) also \nneeds to be in XML format. \n\uf0b7 Notice a pattern here? The push to be comprehensive and flexible (or, to be  all things to all people) plus \nthe XML payload requirement meant that SOAP ended up being quite complex, making it a lot of work to \nuse properly.  \n\uf0b7 As you might guess, many IT people found SOAP daunting and, consequently, resisted using it.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3395, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "688ae55e-c1fd-46f3-8af9-b201a88e7c08": {"__data__": {"id_": "688ae55e-c1fd-46f3-8af9-b201a88e7c08", "embedding": null, "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64e57666-bc7b-4175-93ac-f7f13f95e214", "node_type": "4", "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d453b39ce27e945abd267545e4f938b18b1fe216dce39f2e530eabc44e3ec4ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "71c2ad04-5856-4b19-b597-0b225a3ae743", "node_type": "1", "metadata": {}, "hash": "f5bbc137d5b8386b24ed2494219adf667b3951df4bf645fd81a371a3895a91df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 About a decade ago, a doctoral student defined another web services approach as part of his thesis: REST, \nor Representational State Transfer. \n\uf0b7 REST, which is far less comprehensive than SOAP, aspires to solve fewer problems.  \n\uf0b7 It doesn\u2019t address some aspects of SOAP that seemed important  but that, in retrospect, made it more \ncomplex to use \u2014 security, for example.  \n\uf0b7 The most important aspect of REST is that it\u2019s designed to int egrate with standard web protocols so that \nREST services can be called with standard web verbs and URLs.  \n\uf0b7 For example, a valid REST call looks like this: \nhttp://search.examplecompany.com/CompanyDirectory/EmployeeInfo?empname=BernardGolden \n\uf0b7 That\u2019s all it takes to make a query to the REST service of examplecompany  to see my personnel \ninformation.  \n\uf0b7 The HTTP verb that accompanies this request is GET, asking for information to be returned.  \n\uf0b7 To delete information, you use the verb DELETE.  \n\uf0b7 To insert my information, you use the verb POST. \n\uf0b7 To update my information, you use the verb PUT. \n\uf0b7 For the POST and PUT actions, additional information would accompany the empname and be separated \nby an ampersand (&) to indicate another argument to be used by the service. \n\uf0b7 REST imposes no particular formatting requirements on the service payloads. In this respect, it differs from \nSOAP, which requires XML.  \n\uf0b7 For simple interactions, a string of bytes i s all you need for the payload. F or more complex interactions \n(say, in addition to returning my employee information, I want to  place a request for the employee \ninformation of all employees whose names start with G), the encoding convention JSON is used. \n\uf0b7 As you might expect, REST\u2019s simpler use model, its alignment with standard web protocols and verbs, and \nits less restrictive payload formatting made it catch on with developers like a house on fire. \n\uf0b7 AWS originally launched with SOAP support for interactions with its API, but it has steadily deprecated its \nSOAP interface in favor of REST.  \nAWS URL Naming \n\uf0b7 You can access your bucket using the Amazon S3 console. Using the console UI, you can perform almost \nall bucket operations without having to write any code. \n\uf0b7 If you access a bucket programmatically, note that Amazon S3 supports RESTful architecture in which your \nbuckets and objects are resources, each with a resource URI that uniquely identifies the resource. \n\uf0b7 Amazon S3 supports both virtual-hosted\u2013style and path-style URLs to access a bucket. \n\uf0b7 In a virtual-hosted\u2013style URL, the bucket name is part of the domain name in the URL. For example: \no http://bucket.s3.amazonaws.com \no http://bucket.s3-aws-region.amazonaws.com \n\uf0b7 In a virtual-hosted\u2013style URL, you can use either of these endpoints.  \n\uf0b7 If you make a request to the http://bucket.s3.amazonaws.com endpoint, the DNS has suffi cient \ninformation to route your request directly to the Region where your bucket resides. \n\uf0b7 In a path-style URL, the bucket name is not part of the domain (unless you use a Region-specific endpoint).", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71c2ad04-5856-4b19-b597-0b225a3ae743": {"__data__": {"id_": "71c2ad04-5856-4b19-b597-0b225a3ae743", "embedding": null, "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64e57666-bc7b-4175-93ac-f7f13f95e214", "node_type": "4", "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d453b39ce27e945abd267545e4f938b18b1fe216dce39f2e530eabc44e3ec4ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "688ae55e-c1fd-46f3-8af9-b201a88e7c08", "node_type": "1", "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "da974607a3c0bf6e2a9f5bd395207b9235e27859be9d7dd6d1dd12a29f3a4ad7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 In a path-style URL, the bucket name is not part of the domain (unless you use a Region-specific endpoint). \nFor example: \no US East (N. Virginia) Region endpoint, http://s3.amazonaws.com/bucket \no Region-specific endpoint, http://s3-aws-region.amazonaws.com/bucket \n\uf0b7 In a path-style URL, the endpoint you use must match the Region in which the bucket resides.", "mimetype": "text/plain", "start_char_idx": 3094, "end_char_idx": 3457, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df38a0e3-a322-464d-98d7-0bdd0a49878c": {"__data__": {"id_": "df38a0e3-a322-464d-98d7-0bdd0a49878c", "embedding": null, "metadata": {"page_label": "32", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e98e7cd9-bbd0-40c9-80b2-9968238e8538", "node_type": "4", "metadata": {"page_label": "32", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "03692df06deb2cd4b9d9e8f6483a97f13026fc591822992e044bd6414160d5bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 For example, if your bucket is in the South America (S\u00e3o Paulo) Region, you must use the http://s3 -sa-\neast-1.amazonaws.com/bucket endpoint. If your bucket is in the US East (N. Virginia) Region, you must \nuse the http://s3.amazonaws.com/bucket endpoint. \nMatching Interfaces and Services \n\uf0b7 In the simplest case, the service interfaces are identical apart from name and category (inbound or \noutbound), that is, if the outbound service interface and all interface objects, are referenced by this service \ninterface, are copies of the corresponding objects of an inbound service interfaces.  \n\uf0b7 If, however, the consumer only wants to call one operation of the inbound service interface, for example, \nit is not necessary to create the other in bound service interface operations in the outbound service \ninterface as well. \n\uf0b7 Simply put, the operations and corresponding outbound service interface data structures can be a subset \nof the operations and corresponding data structures of the inbound interface referenced.  \n\uf0b7 The service interface editor provides a check for the service interface pairs to determine the compatibility \nof the inbound and outbound service interface.  \n\uf0b7 This check is performed in multiple steps to determine compatibility (starting serv ice interfaces, across \noperations and down to data types).  \n\uf0b7 The following section describes the steps to be able to estimate for a service interface assignment whether \ntwo service interfaces match. \nMatching Service Interfaces \n\uf0b7 Two service interfaces match each other if the following conditions are fulfilled: \no One service interface is of the outbound category and the other service interface if of the inbound \ncategory. Neither of the service interfaces can be abstract.  \no Both of the service interfaces have the same interface pattern. \no There is a matching operation in the inbound service interface for each of the operations in the \noutbound service interface. \nMatching Operations \n\uf0b7 An inbound service interface operation matches an outbound service interface operation (and the other \nway around) if the following conditions are met: \no Both operations must have the name mode (asynchronous or synchronous). \no Both operations must have the same Operation Pattern. \no The message type for the request, which must be referenced by each operation, must have the same \nname and same XML Namespace. The names of the operations may differ. The same applies for the \nresponse with synchronous communication. \no If the inbound service interface operation references a fault message type, the outbound se rvice \ninterface operation must also reference a fault message type with the same name and XML \nNamespace. \no The data types of the message types, which the outbound service interface for the request message \nreferences (and, if necessary, for the response and f ault message) must be compatible with the \ncorresponding inbound service interface data types. \nMatching Data Types \n\uf0b7 The check whether the corresponding data types are compatible with each other is sufficient until the \ncomparison of the Facets of an XSD type.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3276, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "efd5d951-a3bb-4598-b9fa-ac7ecc2ff03d": {"__data__": {"id_": "efd5d951-a3bb-4598-b9fa-ac7ecc2ff03d", "embedding": null, "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f", "node_type": "4", "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "68ca0b4594d03f03b9f37dca7e7c15de7dbb9685925cce558915f30084fea42a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52579ebc-66ed-403b-8c02-67faaa70f2dd", "node_type": "1", "metadata": {}, "hash": "a307d147b133fda165a249d60df4bcdd2026ba2457a171596997dc3fe8dca8c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 The data types are compared using the same method as other objects: The structures are compatible if \nthey contain the same fields (elements and attributes) and if these fields have compatible types, \nfrequencies, details, and default values.  \n\uf0b7 There are however a few restraints, for example the target structure can contain attributes or elements \nthat do not appear in the outbound structure, but if these are not required and where the frequency is \noptional or prohibited (attributes) or minOccurs=0 (elements). \no The data structures compared must both be correct. For example, not all correct facets are skipped or \nconsidered in the compatibility check. \no Some XSD schema language elements that can appear in a reference to an external message in the data \nstructure are not supported. Therefore, the elements redefine and any, for example, as well as the \nattributes blockDefault, finalDefault, and substitutionGroup. \no The comparison of structures is, for example, restricted to the following: \n\uf0a7 The details white Space and pattern are not checked \n\uf0a7 If the facet pattern is used for the outbound structure field, all the other details are not checked. \n\uf0a7 If the order of sub  elements if different between the outbound and target field, a warning is \ndisplayed. \nElastic Block Store \n\uf0b7 Amazon Elastic Block Store is an AWS block storage system that is best used for storing persistent data.  \n\uf0b7 Often incorrectly referred to as Elastic Block Storage, Amazon EBS provides highly available block level \nstorage volumes for use with Amazon Elastic Compute Cloud (EC2) instances. \n\uf0b7 An EC2 instance is a virtual server in Amazon's Elastic Compute Cloud (EC2) for running applications on \nthe Amazon Web Services (AWS) infrastructure. \n\uf0b7 To begin, create an EBS volume (General Purpose, Provisioned IOPS or Magneti c), pick a size for it (up to \na terabyte of data) and attach that to any one of your EC2 instances.  \n\uf0b7 An EBS volume can only be attached to one instance at a time but if you need to have multiple copies of \nthe volume, you can take a snapshot and create anot her volume from that snapshot and attach it to \nanother drive.  \n\uf0b7 A snapshot file is equivalent to a backup of whatever the EBS volume looks like at the time. For every \nsnapshot you create, you can make an identical EC2 instance. This will allow you to publis h identical \ncontent on multiple servers. \n\uf0b7 Amazon EBS is ideal if you\u2019re doing any substantial work with EC2, you want to keep data persistently on \na file system, and you want to keep that data around even after you shut down your EC2 instance. \n\uf0b7 EC2 instances have local storage that you can use as long as you\u2019re running the instance, but as soon as \nyou shut down the instance you lose the data that was on there.  \n\uf0b7 If you want to save anything, you need to save it on Amazon EBS. Because EC2 is like having a local  drive \non the machine, you can access and read the EBS volumes anytime once you attach the file to an EC2 \ninstance.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3153, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52579ebc-66ed-403b-8c02-67faaa70f2dd": {"__data__": {"id_": "52579ebc-66ed-403b-8c02-67faaa70f2dd", "embedding": null, "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f", "node_type": "4", "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "68ca0b4594d03f03b9f37dca7e7c15de7dbb9685925cce558915f30084fea42a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efd5d951-a3bb-4598-b9fa-ac7ecc2ff03d", "node_type": "1", "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1a2692fe6d75d7cfad854d6d7bba1702704b55e911725a431fdb863273872a7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Because EC2 is like having a local  drive \non the machine, you can access and read the EBS volumes anytime once you attach the file to an EC2 \ninstance. \nAmazon Simple Storage Service (S3) \n\uf0b7 Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, \nat any time, from anywhere on the web. \n\uf0b7 Amazon S3 is intentionally built with a minimal feature set that focuses on simplicity and robustness.  \n\uf0b7 Following are some of advantages of the Amazon S3 service:", "mimetype": "text/plain", "start_char_idx": 3001, "end_char_idx": 3506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afbb7d91-9b80-4ace-80e5-1e92d78745a8": {"__data__": {"id_": "afbb7d91-9b80-4ace-80e5-1e92d78745a8", "embedding": null, "metadata": {"page_label": "34", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2dfb9ef0-3f4b-4eb0-b082-5bb853c5abc9", "node_type": "4", "metadata": {"page_label": "34", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d54d6413172aa35d241747b6021e4aa66b43e3fdde4e672ac8105dbdc61803e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \no Create Buckets \u2013 Create and name a bucket that stores data. Buckets are the fundamental container \nin Amazon S3 for data storage. \no Store data in Buckets \u2013 Store an infinite amount of data in a bucket. Upload as many objects as you \nlike into an Amazon S3 bucket. Each object can contain up to 5 TB of data. Each o bject is stored and \nretrieved using a unique developer-assigned key. \no Download data \u2013 Download your data any time you like or allow others to do the same. \no Permissions \u2013 Grant or deny access to others who want to upload or download data into your Amazon \nS3 bucket. \no Standard interfaces  \u2013 Use standards -based REST and SOAP interfaces designed to work with any \nInternet-development toolkit. \nAmazon S3 Application Programming Interfaces (API) \n\uf0b7 The Amazon S3 architecture is designed to be programming language -neutral, using their supported \ninterfaces to store and retrieve objects. \n\uf0b7 Amazon S3 provides a REST and a SOAP interface.  \n\uf0b7 They are similar, but there are some differences. For example, in the REST interface, metadata is returned \nin HTTP headers. Because we only sup port HTTP requests of up to 4 KB (not including the body), the \namount of metadata you can supply is restricted. \nThe REST Interface \n\uf0b7 The REST API is an HTTP interface to Amazon S3.  \n\uf0b7 Using REST, you use standard HTTP requests to create, fetch, and delete buckets and objects. \n\uf0b7 You can use any toolkit that supports HTTP to use the REST API.  \n\uf0b7 You can even use a browser to fetch objects, as long as they are anonymously readable. \n\uf0b7 The REST API uses the standard HTTP headers and status codes, so that standard browsers  and toolkits \nwork as expected.  \n\uf0b7 In some areas, they have added functionality to HTTP (for example, we added headers to support access \ncontrol).  \nThe SOAP Interface \n\uf0b7 SOAP support over HTTP is deprecated, but it is still available over HTTPS.  \n\uf0b7 New Amazon S3 features will not be supported for SOAP.  \n\uf0b7 The SOAP API provides a SOAP 1.1 interface using document literal encoding.  \n\uf0b7 The most common way to use SOAP is to download the WSDL, and use a SOAP toolkit such as Apache Axis \nor Microsoft .NET to create bindings, and then write code that uses the bindings to call Amazon S3. \nOperations we can execute through API \n\uf0b7 Login into Amazon S3. \n\uf0b7 Uploading. \n\uf0b7 Retrieving. \n\uf0b7 Deleting etc. \nAmazon Glacier (Now Amazon S3 Glacier) - Content Delivery Platforms \n\uf0b7 Amazon Glacier is an extremely low-cost storage service that provides secure, durable, and flexible storage \nfor data backup and archival.  \n\uf0b7 With Amazon Glacier, customers can reliably store their data for as little as $0.004 per gigabyte per month.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2830, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1351cde3-006f-4ff9-9413-52fafc10dc02": {"__data__": {"id_": "1351cde3-006f-4ff9-9413-52fafc10dc02", "embedding": null, "metadata": {"page_label": "35", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "066c3e72-7c84-4af2-9740-655bb40a354b", "node_type": "4", "metadata": {"page_label": "35", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "41c65361705bb2a428c4275135be901c165c1e189c99a5827c731ff24c47092b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Amazon Glacier enables customers to offload the administrative burdens of operating and scaling storage \nto AWS, so that they don\u2019t have to worry about capacity planning, hardware provisioning, data replication, \nhardware failure detection and repair, or time-consuming hardware migrations. \n\uf0b7 Amazon Glacier enables any business or organization to easily and cost effectively retain data for months, \nyears, or decades.  \n\uf0b7 With Amazon Glacier, customers can now cost effectively retain more of their data for future analysis or \nreference, and they can focus on their business rather than operating and maintaining their storage \ninfrastructure.  \n\uf0b7 Customers seeking compliance storage can deploy compliance controls using Vault Lock to meet \nregulatory and compliance archiving requirements. \nBenefits of Glacier Storage Service. \n1. Retrievals as Quick as 1-5 Minutes \n\uf0b7 Amazon Glacier provides three retrieval options to fit your use case. Expedited retrievals typically return \ndata in 1 -5 minutes, and are great for Active Archive use cases. Standard retrievals typically c omplete \nbetween 3-5 hours\u2019 work, and work well for less time-sensitive needs like backup data, media editing, or \nlong-term analytics. Bulk retrievals are the lowest -cost retrieval option, returning large amounts of data \nwithin 5-12 hours. \n2. Unmatched Durability & Scalability \n\uf0b7 Amazon Glacier runs on the world\u2019s largest global cloud infrastructure, and was designed for \n99.999999999% of durability. Data is automatically distributed across a minimum of three physical \nAvailability Zones that are geographically separated within an AWS Region, and Amazon Glacier can also \nautomatically replicate data to any other AWS Region. \n3. Most Comprehensive Security & Compliance Capabilities \n\uf0b7 Amazon Glacier offers sophisticated integration with AWS CloudTrail to log, monitor and retain storage \nAPI call activities for auditing, and supports three different forms of encryption. Amazon Glacier also \nsupports security standards and compliance certifications including SEC Rule 17a -4, PCI -DSS, \nHIPAA/HITECH, FedRAMP, EU Data Protection Di rective, and FISMA, and Amazon Glacier Vault Lock \nenables WORM storage capabilities, helping satisfy compliance requirements for virtually every regulatory \nagency around the globe. \n4. Low Cost \n\uf0b7 Amazon Glacier is designed to be the lowest cost AWS object storag e class, allowing you to archive large \namounts of data at a very low cost. This makes it feasible to retain all the data you want for use cases like \ndata lakes, analytics, IoT, machine learning, compliance, and media asset archiving. You pay only for what \nyou need, with no minimum commitments or up-front fees. \n5. Most Supported Platform with the Largest Ecosystem \n\uf0b7 In addition to integration with most AWS services, the Amazon object storage ecosystem includes tens of \nthousands of consulting, systems integrator and independent software vendor partners, with more joining \nevery month. And the AWS Marketplace offers 35 categories and more than 3,500 software listings from \nover 1,100 ISVs that are pre-configured to deploy on the AWS Cloud. AWS Partner Network partners have \nadapted their services and software to work with Amazon S3 and Amazon Glacier for solutions like Backup \n& Recovery, Archiving, and Disaster Recovery. No other cloud provider has more partners with solutions \nthat are pre-integrated to work with their service.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3605, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "15612915-915c-437d-b99e-1cc3d0a324fd": {"__data__": {"id_": "15612915-915c-437d-b99e-1cc3d0a324fd", "embedding": null, "metadata": {"page_label": "36", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2901853c-c1de-4047-bd27-e8a29c03175a", "node_type": "4", "metadata": {"page_label": "36", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0247ad85609f8868e93ac58f4e4f90030b5b9bf28922a869edbed69b6a0a254c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-4 \u2013 Programming, Management console \nand Storage on AWS \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n6. Query in Place \n\uf0b7 Amazon Glacier is the only cloud archive storage service that allows you to query data in place and retrieve \nonly the subset of data you need from within an archive. Amazon Glacier Select helps you reduce the total \ncost of ownership by extending your data lake into cost-effective archive storage.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 479, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02921768-2819-4f45-a737-0f1ea9038902": {"__data__": {"id_": "02921768-2819-4f45-a737-0f1ea9038902", "embedding": null, "metadata": {"page_label": "37", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7483544b-7d1d-4169-96d5-e983902e3074", "node_type": "4", "metadata": {"page_label": "37", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "be6cbfa3cbabb2abaf71b0a741eb9a6513cc92d548087d763c8f425f91d636e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nIdentity Management and Access Management (IAM) \n\uf0b7 Identity and access management (IAM) is a framework for business processes that facilitates the \nmanagement of electronic or digital identities.  \n\uf0b7 The framework includes the organizational policies for managing digital identity as well as the technologies \nneeded to support identity management. \n\uf0b7 With IAM technologies, IT managers can control user access to critical information within their \norganizations.  \n\uf0b7 Identity and access management products offer role -based access control, which lets system \nadministrators regulate access to systems or networks based on the roles of individual users within the \nenterprise. \n\uf0b7 In this context, access is the ability of an individual user to perform a specific task, such as view, create or \nmodify a file.  \n\uf0b7 Roles are defined according to job competency, authority and responsibility within the enterprise. \n\uf0b7 Systems used for identity and access management include single sign -on systems, multifactor \nauthentication and access management.  \n\uf0b7 These technologies also provide the ability to secure ly store identity and profile data as well as data \ngovernance functions to ensure that only data that is necessary and relevant is shared. \n\uf0b7 These products can be deployed on premises, provided by a third party vendor via a cloud -based \nsubscription model or deployed in a hybrid cloud. \nHow Does IAM Work? \n\uf0b7 The IAM workflow includes the following six elements: \n1. A principal is an entity that can perform actions on an AWS resource. A user, a role or an application \ncan be a principal. \n2. Authentication is the process of  confirming the identity of the principal trying to access an AWS \nproduct. The principal must provide its credentials or required keys for authentication. \n3. Request: A principal sends a request to AWS specifying the action and which resource should perform \nit. \n4. Authorization: By default, all resources are denied. IAM authorizes a request only if all parts of the \nrequest are allowed by a matching policy. After authenticating and authorizing the request, AWS \napproves the action. \n5. Actions are used to view, create, edit or delete a resource. \n6. Resources: A set of actions can be performed on a resource related to your AWS account. \nIdentities (Users, Groups, and Roles) \n\uf0b7 IAM identities, which you create to provide authentication for people and processes in your AWS account.  \n\uf0b7 IAM groups, which are collections of IAM users that you can manage as a unit.  \n\uf0b7 Identities represent the user, and can be authenticated and then authorized to perform actions in AWS.  \n\uf0b7 Each of these can be associated with one or more policies to determi ne what actions a user, role, or \nmember of a group can do with which AWS resources and under what conditions. \nThe AWS Account Root User \n\uf0b7 When you first create an Amazon Web Services (AWS) account, you begin with a single sign -in identity \nthat has complete access to all AWS services and resources in the account.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39420bb5-bef6-4d9e-9aa8-660b7435b39c": {"__data__": {"id_": "39420bb5-bef6-4d9e-9aa8-660b7435b39c", "embedding": null, "metadata": {"page_label": "38", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b64a1cd-3fa4-47ff-8611-a179d5405894", "node_type": "4", "metadata": {"page_label": "38", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c8be80fdf4b9fe66a03a57fecb127cabf15112136546ed98bd3ab2f51d70f1e6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 This identity is called the AWS account root user and is accessed by signing in with the email address and \npassword that you used to create the account. \nIAM Users \n\uf0b7 An IAM user is an entity that you create in AWS.  \n\uf0b7 The IAM user represents the person or service who uses the IAM user to interact with AWS.  \n\uf0b7 A primary use for IAM users is to give people the ability to sign in to the AWS Management Console for \ninteractive tasks and to make programmatic requests to AWS services using the API or CLI.  \n\uf0b7 A user in AWS consists of a name, a password to sign into the AWS Management Console, and up to two \naccess keys that can be used with the API or CLI.  \n\uf0b7 When you create an IAM user, you grant it permissions by makin g it a member of a group that has \nappropriate permission policies attached (recommended), or by directly attaching policies to the user.  \n\uf0b7 You can also clone the permissions of an existing IAM user, which automatically makes the new user a \nmember of the same groups and attaches all the same policies. \nIAM Groups \n\uf0b7 An IAM group is a collection of IAM users.  \n\uf0b7 You can use groups to specify permissions for a collection of users, which can make those permissions \neasier to manage for those users.  \n\uf0b7 For example, you could have a group called Admins and give that group the types of permissions that \nadministrators typically need.  \n\uf0b7 Any user in that group automatically has the permissions that are assigned to the group. If a new user joins \nyour organization and should have administrator privileges, you can assign the appropriate permissions \nby adding the user to that group.  \n\uf0b7 Similarly, if a person changes jobs in your organization, instead of editing that user's permissions, you can \nremove him or her from the old groups and add him or her to the appropriate new groups.  \n\uf0b7 Note that a group is not truly an identity because it cannot be identified as a Principal in a resource-based \nor trust policy. It is only a way to attach policies to multiple users at one time. \nIAM Roles \n\uf0b7 An IAM role is very similar to a user, in that it is an identity with permission policies that determine what \nthe identity can and cannot do in AWS.  \n\uf0b7 However, a role does not have any credentials (password or access keys) associated with it.  \n\uf0b7 Instead of being uniquely associated with one person, a role is intended to be assumable by anyone who \nneeds it.  \n\uf0b7 An IAM user can assume a role to temporarily take on different permissions for a specific task.  \n\uf0b7 A role can be assigned to a federated user w ho signs in by using an external identity provider instead of \nIAM.  \n\uf0b7 AWS uses details passed by the identity provider to determine which role is mapped to the federated user. \nTemporary Credentials \n\uf0b7 Temporary credentials are primarily used with IAM roles, but there are also other uses.  \n\uf0b7 You can request temporary credentials that have a more restricted set of permissions than your standard \nIAM user.  \n\uf0b7 This prevents you from accidentally performing tasks that are not permitted by the more restricted \ncredentials.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3237, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b4e38ce-6a4b-47b5-b120-d131c66820ec": {"__data__": {"id_": "9b4e38ce-6a4b-47b5-b120-d131c66820ec", "embedding": null, "metadata": {"page_label": "39", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56f07191-dfa5-4026-b635-a76198674925", "node_type": "4", "metadata": {"page_label": "39", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ff86583efe571744db3404c73a04f4fa3069ef86cbe20201779510f0e6346f59", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 A benefit of temporary credentials is that they expire automatically after a set period of time.  \n\uf0b7 You have control over the duration that the credentials are valid. \nSecurity Policies \n\uf0b7 You manage access in AWS by creating policies and attaching them to IAM identities (users, groups of \nusers, or roles) or AWS resources.  \n\uf0b7 A policy is an object in AWS that, when associated with an identity or resource, defines their permissions.  \n\uf0b7 AWS evaluates these policies when an IAM principal (user or role) makes a request.  \n\uf0b7 Permissions in the policies determine whether the request is allowed or denied.  \n\uf0b7 Most policies are stored in AWS as JSON documents.  \n\uf0b7 AWS supports six types of policies. \n\uf0b7 IAM policies define permissions for an action regardless of the method that you use to perform the \noperation.  \n\uf0b7 For example, if a policy allows the GetUser action, then a user with that policy can get user information \nfrom the AWS Management Console, the AWS CLI, or the AWS API.  \n\uf0b7 When you create an IAM user, you can choose to allow console or programmatic access. If console access \nis allowed, the IAM user can sign in to the console using a user name and password. Or if programmatic \naccess is allowed, the user can use access keys to work with the CLI or API. \nPolicy Types \n\uf0b7 Identity-based policies \u2013 Attach managed and inline policies to IAM identities (users, groups to which \nusers belong, or roles). Identity-based policies grant permissions to an identity. \n\uf0b7 Resource-based policies \u2013 Attach inline policies to resources. The most common examples of resource -\nbased policies are Amazon S3 bucket policies and IAM role trust policies. Resource -based policies grant \npermissions to the principal that is specified in the policy.  Principals can be in the same account as the \nresource or in other accounts. \n\uf0b7 Permissions boundaries \u2013 Use a managed policy as the permissions boundary for an IAM entity (user or \nrole). That policy defines the maximum permissions that the identity-based policies can grant to an entity, \nbut does not grant permissions. Permissions boundaries do not define the maximum permissions that a \nresource-based policy can grant to an entity. \n\uf0b7 Organizations SCPs  \u2013 Use an AWS Organizations service control policy (SCP) to define the maximum \npermissions for account members of an organization or organizational unit (OU). SC Ps limit permissions \nthat identity-based policies or resource-based policies grant to entities (users or roles) within the account, \nbut do not grant permissions. \n\uf0b7 Access control lists (ACLs) \u2013 Use ACLs to control which principals in other accounts can access the resource \nto which the ACL is attached. ACLs are similar to resource-based policies, although they are the only policy \ntype that does not use the JSON policy document structure. ACLs are cross -account permissions policies \nthat grant permissions to the specified principal. ACLs cannot grant permissions to entities within the same \naccount. \n\uf0b7 Session policies \u2013 Pass advanced session policies when you use the AWS CLI or AWS API to assume a role \nor a federated user. Session policies limit the permissions that  the role or user's identity -based policies \ngrant to the session. Session policies limit permissions for a created session, but do not grant permissions. \nFor more information, see Session Policies.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3522, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc7ca1bb-41c3-4e80-83db-38e72a4637ef": {"__data__": {"id_": "dc7ca1bb-41c3-4e80-83db-38e72a4637ef", "embedding": null, "metadata": {"page_label": "40", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e0e64cb1-d8c7-4cc7-90f1-3ee0a552b5f6", "node_type": "4", "metadata": {"page_label": "40", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e84ab7cd62671af66cb1afc500c440f70ba7fd7a0d0824972b7b23332ee6fcb5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nIAM Abilities/Features \n\uf0b7 Shared access to the AWS account. The main feature of IAM is that it allows you to create separate \nusernames and passwords for individual users or resources and delegate access. \n\uf0b7 Granular permissions. Restrictions can be applied to requests. For example, you can allow the user to \ndownload information, but deny the user the ability to update information through the policies. \n\uf0b7 Multifactor authentication (MFA). IAM supports MFA, in which users provide their username and \npassword plus a one-time password from their phone\u2014a randomly generated number used as an \nadditional authentication factor. \n\uf0b7 Identity Federation. If the user is already authenticated, such as through a Facebook or Google account, \nIAM can be made to trust that authentication method and then allow access based on it. This can also be \nused to allow users to maintain just one password for both on-premises and cloud environment work. \n\uf0b7 Free to use. There is no additional charge for IAM security. There is no additional charge for creating \nadditional users, groups or policies. \n\uf0b7 PCI DSS compliance. The Payment Card Industry Data Security Standard is an information security \nstandard for organizations that handle branded credit cards from the major card schemes. IAM complies \nwith this standard. \n\uf0b7 Password policy. The IAM password policy allows you to reset a password or rotate passwords remotely. \nYou can also set rules, such as how a user should pick a password or how many attempts a user may \nmake to provide a password before being denied access. \nIAM Limitations \n\uf0b7 Names of all IAM identities and IAM resources can be alphanumeric. They can include common characters \nsuch as plus (+), equal (=), comma (,), period (.), at (@), underscore (_), and hyphen (-). \n\uf0b7 Names of IAM identities (users, roles, and groups) must be unique within the  AWS account. So you can't \nhave two groups named DEVELOPERS and developers in your AWS account. \n\uf0b7 AWS account ID aliases must be unique across AWS products in your account. It  cannot be a 12 digit \nnumber. \n\uf0b7 You cannot create more than 100 groups in an AWS account. \n\uf0b7 You cannot create more than 5000 users in an AWS account. AWS recommends the use of  temporary \nsecurity credentials for adding a large number of users in an AWS account. \n\uf0b7 You cannot create more than 500 roles in an AWS account. \n\uf0b7 An IAM user cannot be a member of more than 10 groups. \n\uf0b7 An IAM user cannot be assigned more than 2 access keys. \n\uf0b7 An AWS account cannot have more than 1000 customer managed policies. \n\uf0b7 You cannot attach more than 10 managed policies to each IAM entity (user, groups, or roles). \n\uf0b7 You cannot store more than 20 server certificates in an AWS account. \n\uf0b7 You cannot have more than 100 SAML providers in an AWS account. \n\uf0b7 A policy name should not exceed 128 characters. \n\uf0b7 An alias for an AWS account ID should be between 3 and 63 characters. \n\uf0b7 A username and role name should not exceed 64 characters. \n\uf0b7 A group name should not exceed 128 characters. \nAWS Physical and Environmental Security \n\uf0b7 AWS data centers are state of the art, utilizing innovative architectural and engineering approaches.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3330, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e15f50f9-4ee6-472d-89cc-fdf98ceaf2d3": {"__data__": {"id_": "e15f50f9-4ee6-472d-89cc-fdf98ceaf2d3", "embedding": null, "metadata": {"page_label": "41", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bcbb7997-ba2a-4339-a5da-2c571bd38e24", "node_type": "4", "metadata": {"page_label": "41", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "18a0750c41f21bdcd377ae0dfca2d35a69667fd46b82432efa85f11304e877b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Amazon has many years of experience in designing, constructing, and operating large-scale data centers.  \n\uf0b7 This experience has been applied to the AWS platform and infrastructure.  \n\uf0b7 AWS data centers are housed in facilities that are not branded as AWS facilities.  \n\uf0b7 Physical access is strictly controlled both at the perimeter and at building ingress points by professional \nsecurity staff utilizing video surveillance, intrusion detection systems, and other electronic means. \n\uf0b7 Authorized staff must pass two-factor authentication a minimum of two times to access data center floors. \nAll visitors are required to present identification and are signed in and continually escorted by authorized \nstaff. \n\uf0b7 AWS only provides data center access and information to employees and cont ractors who have a \nlegitimate business need for such privileges.  \n\uf0b7 When an employee no longer  has a business need for these privileges, his or her access is immediately \nrevoked, even if they continue to be an employee of Amazon or Amazon Web Services.  \n\uf0b7 All physical access to data centers by AWS employees is logged and audited routinely. \nFire Detection and Suppression \n\uf0b7 Automatic fire detection and suppression equipment has been installed to reduce risk. \n\uf0b7 The fire detection system utilizes smoke detection sensors in all data center  environments, mechanical \nand electrical infrastructure spaces, chiller rooms and generator equipment rooms.  \n\uf0b7 These areas are protected by either wet-pipe, double interlocked pre-action, or gaseous sprinkler systems. \nPower \n\uf0b7 The data center electrical power systems are designed to be fully redundant and  maintainable without \nimpact to operations, 24 hours a day, and seven days a week. \n\uf0b7 Uninterruptible Power Supply (UPS) units provide back -up power in the event of an  electrical failure for \ncritical and essential loads in the facility.  \n\uf0b7 Data centers use generators to provide back-up power for the entire facility. \nClimate and Temperature \n\uf0b7 Climate control is required to maintain a constant operating temperature for servers and other hardware, \nwhich prevents overheating and reduces the possibility of service outages.  \n\uf0b7 Data centers are conditioned to maintain atmospheric conditions at optimal levels.  \n\uf0b7 Personnel and systems monitor and control temperature and humidity at appropriate levels. \nManagement \n\uf0b7 AWS monitors electrical, mechanical, and life support systems and equipment so that  any issues are \nimmediately identified.  \n\uf0b7 Preventative maintenance is performed to maintain the continued operability of equipment. \nStorage Device Decommissioning \n\uf0b7 When a storage device has reached the end of its useful life, AWS procedures include a decommissioning \nprocess that is designed to prevent customer data from being exposed to unauthorized individuals.  \n\uf0b7 AWS uses the techniques detailed in NIST 800 -88 (\u201cGuidelines for Media Sanitization\u201d) as part of the \ndecommissioning process.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3119, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d61f18ef-ef2a-4c01-86d2-053493b44204": {"__data__": {"id_": "d61f18ef-ef2a-4c01-86d2-053493b44204", "embedding": null, "metadata": {"page_label": "42", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e826982c-d87f-4f5e-8d0c-649292b35249", "node_type": "4", "metadata": {"page_label": "42", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "14191ef4a81de7c2394e3cc13b8d5e894b2d09bb38223ec1ae4035286eea2e81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAWS Compliance Initiatives \n\uf0b7 AWS Compliance enables customers to understand the robust controls in place at AWS  to maintain \nsecurity and data protection in the cloud.  \n\uf0b7 As systems are built on top of AWS cloud infrastructure, compliance responsibilities are shared.  \n\uf0b7 By tying together governance-focused, audit friendly service features with applicable compliance or audit \nstandards, AWS Compliance enablers build on traditional programs; helping customers to establish and \noperate in an AWS security control environment.  \n\uf0b7 The IT infrastructure  that AWS provides to its customers is designed and managed in alignment with \nsecurity best practices and a variety of IT security standards, including: \no SOC 1/SSAE 16/ISAE 3402 (formerly SAS 70) \no SOC 2 \no SOC 3 \no FISMA, DIACAP, and FedRAMP \no DOD CSM Levels 1-5 \no PCI DSS Level 1 \no ISO 9001 / ISO 27001 / ISO 27017 / ISO 27018 \no ITAR \no FIPS 140-2 \no MTCS Level 3 \no HITRUST \n\uf0b7 In addition, the flexibility and control that the AWS platform provides allows customers to deploy solutions \nthat meet several industry-specific standards, including: \no Criminal Justice Information Services (CJIS) \no Cloud Security Alliance (CSA) \no Family Educational Rights and Privacy Act (FERPA) \no Health Insurance Portability and Accountability Act (HIPAA) \no Motion Picture Association of America (MPAA) \n\uf0b7 AWS provides a wide range of information regarding its IT control environment to  customers through \nwhite papers, reports, certifications, accreditations, and other third party attestations. \nUnderstanding Public/Private Keys \n\uf0b7 Amazon AWS uses keys to encrypt and decrypt login information. \n\uf0b7 At the basic level, a sender uses a public key to encrypt data, which its receiver then decrypts using another \nprivate key. These two keys, public and private, are known as a key pair. \n\uf0b7 You need a key pair to be able to connect to your instances. The way this works on Linux and Windows \ninstances is different. \n\uf0b7 First, when you launch a new instance, you assign a key pair to it. Then, when you log in to it, you use the \nprivate key. \n\uf0b7 The difference between Linux and Windows instances is that Linux instances do not have a password \nalready set and you must use the key pair to log in to Linux instances.  \n\uf0b7 On the other hand, on Windows instances, you need the key pair to decrypt the administrator password. \nUsing the decrypted password, you can use RDP and then connect to your Windows instance. \n\uf0b7 Amazon EC2 stores only the public key, and you can either generate it inside Amazon EC2 or you can \nimport it.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2737, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d4069b43-ec9a-421c-88fb-75fae23e0f90": {"__data__": {"id_": "d4069b43-ec9a-421c-88fb-75fae23e0f90", "embedding": null, "metadata": {"page_label": "43", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea553dd9-611e-4fb4-a02b-e8b1cb0747d5", "node_type": "4", "metadata": {"page_label": "43", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "402aaaa3c7660ffca5bc3f3dd9d5383bf6b6101ae9a1baa73d7d964d994b0235", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Since the private key is not stored by Amazon, it\u2019s advisable to store it in a secure place as anyone who \nhas this private key can log in on your behalf. \nAWS API Security \n\uf0b7 API Gateway supports multiple mechanisms of access control, including metering or tracking API uses by \nclients using API keys.  \n\uf0b7 The standard AWS IAM roles and policies offer flexible and robust access controls that can be applied to \nan entire API set or individual methods.  \n\uf0b7 Custom authorizers and Amazon Cognito user pools provide customizable author ization and \nauthentication solutions. \nA. Control Access to an API with IAM Permissions \n\uf0b7 You control access to Amazon API Gateway with IAM permissions by controlling access to the following \ntwo API Gateway component processes: \no To create, deploy, and manage an API in API Gateway, you must grant the API developer permissions \nto perform the required actions supported by the API management component of API Gateway. \no To call a deployed API or to refresh the API caching, you must grant the API caller permissions to \nperform required IAM actions supported by the API execution component of API Gateway. \nB. Use API Gateway Custom Authorizers \n\uf0b7 An Amazon API Gateway custom authorizer is a Lambda function that you provide to control access to \nyour API methods.  \n\uf0b7 A custom authorizer uses bearer token authentication strategies, such as OAuth or SAML. It can also use \ninformation described by headers, paths, query strings, stage variables, or context variables request \nparameters. \n\uf0b7 When a client calls your API, API Gateway verifies whethe r a custom authorizer is configured for the API \nmethod. If so, API Gateway calls the Lambda function.  \n\uf0b7 In this call, API Gateway supplies the authorization token that is extracted from a specified request header \nfor the token-based authorizer, or passes in the incoming request parameters as the input (for example, \nthe event parameter) to the request parameters-based authorizer function. \n\uf0b7 You can implement various authorization strategies, such as JSON Web Token (JWT) verification and \nOAuth provider callout.  \n\uf0b7 You can also implement a custom scheme based on incoming request parameter values, to return IAM \npolicies that authorize the request. If the returned policy is invalid or the permissions are denied, the API \ncall does not succeed.  \nC. Use Amazon Cognito User Pools \n\uf0b7 In addition to using IAM roles and policies or custom authorizers, you can use an Amazon Cognito user \npool to control who can access your API in Amazon API Gateway. \n\uf0b7 To use an Amazon Cognito user pool with your API, you must first create an authorizer  of the \nCOGNITO_USER_POOLS type and then configure an API method to use that authorizer.  \n\uf0b7 After the API is deployed, the client must first sign the user in to the user pool, obtain an identity or access \ntoken for the user, and then call the API method with  one of the tokens, which are typically set to the \nrequest's Authorization header.  \n\uf0b7 The API call succeeds only if the required token is supplied and the supplied token is valid, otherwise, the \nclient isn't authorized to make the call because the client did not have credentials that could be authorized.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14b831cb-9955-44b6-959e-ed8568fca34d": {"__data__": {"id_": "14b831cb-9955-44b6-959e-ed8568fca34d", "embedding": null, "metadata": {"page_label": "44", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "900eb617-93ab-4560-9363-e2ebd3c61365", "node_type": "4", "metadata": {"page_label": "44", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c7574f69b73b38fa2422d2b1b371241842a5ac643cae9b940be5e9a7dd81c893", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nD. Use Client-Side SSL Certificates for Authentication by the Backend \n\uf0b7 You can use API Gateway to generate an SSL certificate and use its public key in the backend to verify that \nHTTP requests to your backend system are from API Gateway.  \n\uf0b7 This allows your HTTP backend to control and accept only requests originating from Amazon API Gateway, \neven if the backend is publicly accessible. \n\uf0b7 The SSL certificates that are generated by API Gateway are self -signed and only th e public key of a \ncertificate is visible in the API Gateway console or through the APIs. \nE. Create and Use API Gateway Usage Plans \n\uf0b7 After you create, test, and deploy your APIs, you can use API Gateway usage plans to extend them as \nproduct offerings for your customers.  \n\uf0b7 You can provide usage plans to allow specified customers to access selected APIs at agreed-upon request \nrates and quotas that can meet their business requirements and budget constraints. \nAWS Security, Identity, & Compliance services \nCategory Use cases AWS service \nIdentity & access \nmanagement \nSecurely manage access to services and \nresources \nAWS Identity & Access Management \nCloud single-sign-on (SSO) service AWS Single Sign-On \nIdentity management for your apps Amazon Cognito \nManaged Microsoft Active Directory AWS Directory Service \nSimple, secure service to share AWS resources AWS Resource Access Manager \nDetective \ncontrols \nUnified security and compliance center AWS Security Hub \nManaged threat detection service Amazon GuardDuty \nAnalyze application security Amazon Inspector \nInvestigate potential security issues Amazon Detective \nInfrastructure \nprotection \nDDoS protection AWS Shield \nFilter malicious web traffic AWS Web Application Firewall (WAF) \nCentral management of firewall rules AWS Firewall Manager \nData protection Discover and protect your sensitive data at \nscale \nAmazon Macie \nKey storage and management AWS Key Management Service (KMS) \nHardware based key storage for regulatory \ncompliance \nAWS CloudHSM \nProvision, manage, and deploy public and \nprivate SSL/TLS certificates \nAWS Certificate Manager \nRotate, manage, and retrieve secrets AWS Secrets Manager \nCompliance No cost, self -service portal for on -demand \naccess to AWS\u2019 compliance reports \nAWS Artifact \nDark Web \n\uf0b7 The dark web is a general term for the seedier corners of the web, where people can interact online \nwithout worrying about the watchful eye of the authorities.  \n\uf0b7 Usually, these sites are guarded by encryption mechanisms such as Tor that allow users to visit them \nanonymously.  \n\uf0b7 But there are also sites that don't rely on Tor, such as password -protected forums where hacker s trade \nsecrets and stolen credit card numbers, that can also be considered part of the dark web.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca1d8d0a-aa0c-46b5-8da2-855c7b57e27f": {"__data__": {"id_": "ca1d8d0a-aa0c-46b5-8da2-855c7b57e27f", "embedding": null, "metadata": {"page_label": "45", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "80159f92-b959-44fe-aa16-52daf54003cc", "node_type": "4", "metadata": {"page_label": "45", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6ab50ce8db207085a902f5d18d1f42ee89bcbc34d994e5268d4c04e738feb3cc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-5 \u2013 AWS identity services, security and \ncompliance \n \n 9 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 People use the dark web for a variety of purposes: buying and selling drugs, discussing hacking techniques \nand selling hacking services and so forth. \n\uf0b7 It's important to remember that the technologies used to facilitate \"dark web\" activities aren't inherently \ngood or bad.  \n\uf0b7 The same technologies used by drug dealers to hide their identity can also be used by authorized informers \nto securely pass information to government agencies.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 597, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc0c0cb8-bd52-498a-adaa-46c10895c958": {"__data__": {"id_": "dc0c0cb8-bd52-498a-adaa-46c10895c958", "embedding": null, "metadata": {"page_label": "46", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75fb3ec5-106d-4d38-89f7-9232f3efeb21", "node_type": "4", "metadata": {"page_label": "46", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d8c509f10f360a974818cbe44c23e98da7cca7be72b7158ebc98e0e5dab09bcc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nElastic Cloud Compute (EC2) \n\uf0b7 Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides secure, resizable compute \ncapacity in the cloud.  \n\uf0b7 It is designed to make web-scale cloud computing easier for developers.  \n\uf0b7 Amazon EC2\u2019s simple web service interface allows you to obtain and configure capacity with minimal \nfriction.  \n\uf0b7 It provides you with complete control of your computing resources and lets you run on Amazon\u2019s proven \ncomputing environment. \nAdvantages of EC2 \n\uf0b7 In less than 10 minutes you can rent a slice of Amazon\u2019s vast cloud network and put those computing \nresources to work on anything from data science to bitcoin mining. \n\uf0b7 EC2 offers a number of benefits and advantages over alternatives. Most notably: \nAffordability \n\uf0b7 EC2 allows you to take advantage of Amazon\u2019s enormous scale.  \n\uf0b7 You can pay a very low rate for the resources you use. The smallest EC2 instance can be rented for as little \nas $.0058 per hour which works out to about $4.18 per month. Of course, instances with more resources \nare more expensive but this gives you a sense of how affordable EC2 instances are. \n\uf0b7 With EC2 instances, you\u2019re only paying for what you use in terms of compute hours  and bandwidth so \nthere\u2019s little wasted expense. \nEase of use \n\uf0b7 Amazon\u2019s goal with EC2 was to make accessing compute resources low friction and, by and large, they\u2019ve \nsucceeded.  \n\uf0b7 Launching an instance is simply a matter of logging into the AWS Console, selecting your operating system, \ninstance type, and storage options.  \n\uf0b7 At most, it\u2019s a 10 minute process and there aren\u2019t any major technical barriers preventing anyone from \nspinning up an instance, though it may take some technical knowledge to leverage those resources after \nlaunch. \nScalability \n\uf0b7 You can easily add EC2 instances as needed, creating your own private cloud of computer resources that \nperfectly matches your needs.  \n\uf0b7 Here at Pagely a common configuration is an EC2 instance to run a WordPress app, an instance to run RDS \n(a database service), and an EBS so that data can easily be moved and shared between instances as they\u2019re \nadded. \n\uf0b7 AWS offers built-in, rules-based auto scaling so that you can automatically turn instances on or off based \non demand.  \n\uf0b7 This helps you ensure that you\u2019re never wasting resources but you also have enough resources available \nto do the job. \nIntegration \n\uf0b7 Perhaps the biggest advantage of EC2, and something no  competing solution can claim, is its native \nintegration with the vast ecosystem of AWS services.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2683, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0dae402e-c028-4729-b541-5ac6a7262eb2": {"__data__": {"id_": "0dae402e-c028-4729-b541-5ac6a7262eb2", "embedding": null, "metadata": {"page_label": "47", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95eea06c-6e4a-4ed1-9f25-6ba620f7b527", "node_type": "4", "metadata": {"page_label": "47", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d2aab7b681e83644934df7a64b8a86120614eef2271e8b586a5b4af6df1e3b47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Currently there are over 170 services. No other cloud network can claim the breadth, depth, and flexibility \nAWS can. \nEC2 Image Builder \n\uf0b7 EC2 Image Builder simp lifies the creation, maintenance, validation, sharing, and deployment of Linux or \nWindows Server images for use with Amazon EC2 and on-premises. \n\uf0b7 Keeping server images up-to-date can be time consuming, resource intensive, and error-prone.  \n\uf0b7 Currently, customers either manually update and snapshot VMs or have teams that build automation \nscripts to maintain images. \n\uf0b7 Image Builder significantly reduces the effort of keeping images up -to-date and secure by providing a \nsimple graphical interface, built-in automation, and AWS-provided security settings.  \n\uf0b7 With Image Builder, there are no manual steps for updating an image nor do you have to build your own \nautomation pipeline. \n\uf0b7 Image Builder is offered at no cost, other than the cost of the underlying AWS resources used  to create, \nstore, and share the images. \nAuto Scaling \n\uf0b7 AWS Auto Scaling monitors your applications and automatically adjusts capacity to maintain steady, \npredictable performance at the lowest possible cost.  \n\uf0b7 Using AWS Auto Scaling, it\u2019s easy to setup applic ation scaling for multiple resources across multiple \nservices in minutes.  \n\uf0b7 The service provides a simple, powerful user interface that lets you build scaling plans for resources \nincluding Amazon EC2 instances and Spot Fleets, Amazon ECS tasks, Amazon Dynam oDB tables and \nindexes, and Amazon Aurora Replicas.  \n\uf0b7 AWS Auto Scaling makes scaling simple with recommendations that allow you to optimize performance, \ncosts, or balance between them.  \n\uf0b7 If you\u2019re already using Amazon EC2 Auto Scaling to dynamically scale your Amazon EC2 instances, you can \nnow combine it with AWS Auto Scaling to scale additional resources for other AWS services.  \n\uf0b7 With AWS Auto Scaling, your applications always have the right resources at the right time. \n\uf0b7 It\u2019s easy to get started with AWS Auto Scaling using the AWS Management Console, Command Line \nInterface (CLI), or SDK.  \n\uf0b7 AWS Auto Scaling is available at no additional charge. You pay only for the AWS resources needed to run \nyour applications and Amazon CloudWatch monitoring fees. \nElastic Load Balancing \n\uf0b7 Elastic Load Balancing automatically distributes incoming application traffic across multiple targets, such \nas Amazon EC2 instances, containers, and IP addresses.  \n\uf0b7 It can handl e the varying load of your application traffic in a single Availability Zone or across multiple \nAvailability Zones.  \n\uf0b7 Elastic Load Balancing offers three types of load balancers that all feature the high availability, automatic \nscaling, and robust security necessary to make your applications fault tolerant. \no Application Load Balancers,  \no Network Load Balancers, and  \no Classic Load Balancers.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3003, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63127fe8-b98f-4014-a586-0e94af2c1eff": {"__data__": {"id_": "63127fe8-b98f-4014-a586-0e94af2c1eff", "embedding": null, "metadata": {"page_label": "48", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0564509e-ae0f-43c6-b2c9-ffa5faf49365", "node_type": "4", "metadata": {"page_label": "48", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "22f49ac7d901a4e7fc40aed4e43f0e7b16cb0060f1eb4d6114e6b2de77031bcd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nApplication Load Balancer \n\uf0b7 Application Load Balancer is best suited for load balancing of HTTP and HTTPS traffic and provi des \nadvanced request routing targeted at the delivery of modern application architectures, including micro \nservices and containers.  \n\uf0b7 Operating at the individual request level (Layer 7), Application Load Balancer routes traffic to targets \nwithin Amazon Virtual Private Cloud (Amazon VPC) based on the content of the request. \nNetwork Load Balancer \n\uf0b7 Network Load Balancer is best suited for load balancing of TCP traffic where extreme performance is \nrequired.  \n\uf0b7 Operating at the connection level (Layer 4), Network Load Balancer routes traffic to targets within Amazon \nVirtual Private Cloud (Amazon VPC) and is capable of handling millions of requests per second while \nmaintaining ultra-low latencies.  \n\uf0b7 Network Load Balancer is also optimized to handle sudden and volatile traffic patterns. \nClassic Load Balancer \n\uf0b7 Classic Load Balancer provides basic load balancing across multiple Amazon EC2 instances and operates at \nboth the request level and connection level.  \n\uf0b7 Classic Load Balancer is intended for applications that were built within the EC2-Classic network. \nBenefits of Elastic Load Balancing for reducing workload \nHighly Available \n\uf0b7 Elastic Load Balancing automatically distributes incoming traffic across multiple targets \u2013 Amazon EC2 \ninstances, containers, and IP addresses \u2013 in multiple Availability Zones and ensures only healthy targets \nreceive traffic. Elastic Load Balancing can also load balance across a Region, routing traffic to healthy \ntargets in different Availability Zones. \nSecure \n\uf0b7 Elastic Load Balancing works with Amazon Virtual Private Cloud (VPC) to provide robust security features, \nincluding integrated certificate management and SSL decryption. Together, they give you the flexibility to \ncentrally manage SSL settings and offload CPU intensive workloads from your applications. \nElastic \n\uf0b7 Elastic Load Balancing is capable of handling rapid changes in network traffic patterns. Additionally, deep \nintegration with Auto Scaling ensures sufficient application capacity to meet varying levels of application \nload without requiring manual intervention. \nFlexible \n\uf0b7 Elastic Load Balancing also allows you to use IP addresses to route requests to application targets. This \noffers you flexibility in how you virtualize your application targets, allowing you to host more applications \non the same instance. This also enables these applications to have individual security groups and use the \nsame network port to further simplify inter -application communication in microservices based \narchitecture. \nRobust Monitoring and Auditing \n\uf0b7 Elastic Load Balancing al lows you to monitor your applications and their performance in real time with \nAmazon CloudWatch metrics, logging, and request tracing. This improves visibility into the behavior of", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3063, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ff6094f-d1d5-43c7-8203-3ab0f03ef667": {"__data__": {"id_": "5ff6094f-d1d5-43c7-8203-3ab0f03ef667", "embedding": null, "metadata": {"page_label": "49", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc7405c0-20be-430f-9b50-46135d6fd268", "node_type": "4", "metadata": {"page_label": "49", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "dbd1858794804d40ede208f95cebe0a93467876cddedd0bbb83a202cdabddf3b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nyour applications, uncovering issues and identifying performance bottlenecks in your application stack at \nthe granularity of an individual request. \nHybrid Load Balancing \n\uf0b7 Elastic Load Balancing offers ability to load balance across AWS and on-premises resources using the same \nload balancer. This makes it easy for you to migrate, b urst, or failover on -premises applications to the \ncloud. \nAMIs \n\uf0b7 An Amazon Machine Image (AMI) provides the information required to launch an instance.  \n\uf0b7 You must specify an AMI when you launch an instance.  \n\uf0b7 You can launch multiple instances from a single AMI when you need multiple instances with the same \nconfiguration.  \n\uf0b7 You can use different AMIs to launch instances when you need instances with different configurations. \n\uf0b7 An AMI includes the following: \no One or more EBS snapshots, or, for instance-store-backed AMIs, a template for the root volume of the \ninstance (for example, an operating system, an application server, and applications). \no Launch permissions that control which AWS accounts can use the AMI to launch instances. \no A block device mapping that specifies the volumes to attach to the instance when it's launched. \nUsing an AMI \n \nFig. : The AMI lifecycle (create, register, launch, copy, and deregister) \n\uf0b7 The following diagram summarizes the AMI lifecycle.  \n\uf0b7 After you create and register an AMI, you can use it to launch new instances. (You can also launch instances \nfrom an AMI if the AMI owner grants you launch permissions.)  \n\uf0b7 You can copy an AMI within the same Region or to different Regions.  \n\uf0b7 When you no longer require an AMI, you can deregister it. \n\uf0b7 You can search for an AMI that meets the criteria for your instance.  \n\uf0b7 You can search for AMIs provided by AWS or AMIs provided by the community.  \n\uf0b7 After you launch an instance from an AMI, you can connect to it.  \n\uf0b7 When you are connected to an instance, you can use it just like you use any other server.  \n\uf0b7 For information about launching, connecting, and using your instance, see Amazon EC2 instances.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2194, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0567755d-3673-4388-846d-d8a0ff9a3f0b": {"__data__": {"id_": "0567755d-3673-4388-846d-d8a0ff9a3f0b", "embedding": null, "metadata": {"page_label": "50", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a08184c-5b08-430c-86db-f6cece85978e", "node_type": "4", "metadata": {"page_label": "50", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "21680fd9c155ff2fa27f92a02f92b1b19c83aaecc83479b01219325788419bb7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nMulti Tenancy \n\uf0b7 In cloud computing, multi tenancy means that multiple cus tomers of a cloud vendor are using the same \ncomputing resources.  \n\uf0b7 Despite the fact that they share resources, cloud customers aren't aware of each other, and their data is \nkept totally separate.  \n\uf0b7 Multi tenancy is a crucial component of cloud computing; wit hout it, cloud services would be far less \npractical.  \n\uf0b7 Multitenant architecture is a feature in many types of public cloud computing, including IaaS, PaaS, SaaS, \ncontainers, and server less computing. \n\uf0b7 To understand multi tenancy, think of how banking works.  \n\uf0b7 Multiple people can store their money in one bank, and their assets are completely separate even though \nthey're stored in the same place.  \n\uf0b7 Customers of the bank don't interact with each other, don't have access to other customers' money, and \naren't even aware of each other.  \n\uf0b7 Similarly, in public cloud computing, customers of the cloud vendor use the same infrastructure \u2013 the same \nservers, typically \u2013 while still keeping their data and their business logic separate and secure. \n\uf0b7 The classic definition of mul ti tenancy was a single software instance  that served multiple users, or \ntenants.  \n\uf0b7 However, in modern cloud computing, the term has taken on a broader meaning, referring to shared cloud \ninfrastructure instead of just a shared software instance. \nCataloging the Marketplace \n\uf0b7 AWS Marketplace is a curated digital catalog customers can use to find, buy, deploy, and manage third -\nparty software, data, and services that customers need to build solutions and run their businesses.  \n\uf0b7 AWS Marketplace includes thousands of software listings from popular categories such as security, \nnetworking, storage, machine learning, business intelligence, database, and DevOps.  \n\uf0b7 AWS Marketplace also simplifies software licensing and procurement with f lexible pricing options and \nmultiple deployment methods.  \n\uf0b7 In addition, AWS Marketplace includes data products available from AWS Data Exchange. \n\uf0b7 Customers can quickly launch preconfigured software with just a few clicks, and choose software solutions \nin Amazon Machine Images (AMIs), software as a service (SaaS), and other formats.  \n\uf0b7 You can browse and subscribe to data products.  \n\uf0b7 Flexible pricing options include free trial, hourly, monthly, annual, multi -year, and BYOL, and get billed \nfrom one source.  \n\uf0b7 AWS handles billing and payments, and charges appear on customers\u2019 AWS bill. \n\uf0b7 You can use AWS Marketplace as a buyer (subscriber), seller (provider), or both.  \n\uf0b7 Anyone with an AWS account can use AWS Marketplace as a buyer, and can register to become a seller.  \n\uf0b7 A seller can be an independent software vendor (ISV), value -added reseller, or individual who has \nsomething to offer that works with AWS products and services. \n\uf0b7 Every software product on AWS Marketplace has been through a curation process.  \n\uf0b7 On the product page, there can be one or more offerings for the product.  \n\uf0b7 When the seller submits a product in AWS Marketplace, they define the price of the product and the terms \nand conditions of use.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3266, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "621c33a7-d2e4-4871-b21f-50244eaebb41": {"__data__": {"id_": "621c33a7-d2e4-4871-b21f-50244eaebb41", "embedding": null, "metadata": {"page_label": "51", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0531017-0b02-49f4-ab25-c8018e763615", "node_type": "4", "metadata": {"page_label": "51", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "abe0d5f5b96a50618e21acf4a54827957dad434fb58410688b6360d3a44ba963", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-6 \u2013 AWS computing and marketplace \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 When a consumer subscribes to a product offering, they agree to the pricing and terms and conditions set \nfor the offer. \n\uf0b7 The product can be free to use or it can have an associated charge.  \n\uf0b7 The charge becomes part of your AWS bill, and after you pay, AWS Marketplace pays the seller.  \n\uf0b7 Products can take many forms. For example, a product can be offered as an Amazon Machine Image (AMI) \nthat is instantiated using your AWS account.  \n\uf0b7 The product can also be configured to use AWS CloudFormation templates for delivery to the consumer.  \n\uf0b7 The product can also be software as a service (Saa S) offerings from an ISV, web ACL, set of rules, or \nconditions for AWS WAF. \n\uf0b7 Software products can be purchased at the listed price using the ISV\u2019s standard end user license agreement \n(EULA) or offered with customer pricing and EULA.  \n\uf0b7 Products can also be purchased under a contract with specified time or usage boundaries.  \n\uf0b7 After the product subscriptions are in place, the consumer can copy the product to their AWS Service \nCatalog to manage how the product is accessed and used in the consumer\u2019s organization. \nSelling On the Marketplace. \n\uf0b7 As a seller, go to the AWS Marketplace Management Portal to register.  \n\uf0b7 If you're providing a data product or you're charging for use of your software product, you must also \nprovide tax and banking information as part of your registration.  \n\uf0b7 When you register, you create a profile for your company or for yourself that is discoverable on AWS \nMarketplace.  \n\uf0b7 You also use the AWS Marketplace Management Portal to create and manage product pages for your \nproducts. \n\uf0b7 Eligible partners can programmatically list AWS Marketplace products outside of AWS Marketplace.  \n\uf0b7 For information about becoming an eligible partner, contact your AWS Marketplace business development \npartner.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a070f4e4-2b1b-4824-8155-f65e2caf3c06": {"__data__": {"id_": "a070f4e4-2b1b-4824-8155-f65e2caf3c06", "embedding": null, "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5802b44d-ab6a-4047-a6fa-5dfeaae680b4", "node_type": "4", "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f2fdc39505ed546746e61291fca390918d0649d04ab1a111faa4ef508004e0b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e448223e-7d82-4079-a3dc-352947940a1b", "node_type": "1", "metadata": {}, "hash": "c0b24c7338773da1a6e463a6bf0c07e95a2e1865b270d7ea28c2961669c7bae9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nVirtual private clouds \n\uf0b7 A virtual private cloud (VPC) is an on-demand configurable pool of shared computing resources allocated \nwithin a public cloud environment, providing a certain level of isolation between the different \norganizations. \n\uf0b7 You already know that there are three major types of clouds: Public, P rivate and Hybrid. Now, there\u2019s a \nnewer player in the game: Virtual Private Clouds.  \n\uf0b7 What makes these different from public and private clouds, and what is the benefit? Is it just a fancy name \nfor public cloud, or is it a private one? \n\uf0b7 VPC are related to the public cloud, but they are not the same. Instead of sharing resources and space in \na public infrastructure, you get a changeable allotment of resources to configure.  \n\uf0b7 There is a certain level of isolation between you and other users, via a private IP sub net and virtual \ncommunication construct (such as a VLAN) on a per user basis.  \n\uf0b7 This ensures a secure method of remotely accessing your cloud resources. This isolation within a public \ncloud lends the name \u201cvirtual private\u201d because you are essentially operating a private cloud within a public \ncloud. \n\uf0b7 That also doesn\u2019t mean Virtual Private Clouds and private clouds are the same.  \n\uf0b7 Private clouds are entirely dedicated to your organization, and that includes the hardware.  \n\uf0b7 Virtual Private clouds do not have the s ame hardware dedication; it just creates a more secure \nenvironment on public infrastructure.  \n\uf0b7 Think of it as operating like a VPN: You use them to send messages over the public internet in a secure \nway as if you had your own personal network, but it\u2019s not the same as actually having your own. \n\uf0b7 What\u2019s the benefit to this? Wouldn\u2019t it just be easier to have a private cloud? Not necessarily. Private \nclouds are expensive to operate, and because the hardware as well as the resources required to run it \nbelong to you alone, there is no one to share that cost with.  \n\uf0b7 Virtual Private Clouds give you the best of both worlds: A private cloud for security and compliance \npurposes, reduced infrastructure costs that come with public clouds. The allotment of resources is your s \nto use, so there is no worry about running out or having to share with others. You simply are sharing the \ninfrastructure. \n\uf0b7 Virtual Private Clouds are commonly used with Infrastructure as a Service (IaaS) providers.  \n\uf0b7 Because the shared resources (CPU, RAM, etc.) are not always the responsibility of the hardware provider, \nit is possible to have different infrastructure and VPC providers.  \n\uf0b7 However, having the same VPC and infrastructure provider can help cut down on the confusion and \ncommunication process between you and your vendor. \nAmazon Route 53 Announces Private DNS within Amazon VPC \n\uf0b7 You can now use Amazon Route 53, AWS's highly available and scalable DNS service, to easily manage \nyour internal domain names with the same simplicity, security, and cost effectiveness that Route 53 \nalready provides for external DNS names.  \n\uf0b7 You can use the  Route 53 Private DNS feature to manage authoritative DNS within your Virtual Private \nClouds (VPCs), so you can use custom domain names for your internal AWS resources without exposing \nDNS data to the public Internet.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3380, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e448223e-7d82-4079-a3dc-352947940a1b": {"__data__": {"id_": "e448223e-7d82-4079-a3dc-352947940a1b", "embedding": null, "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5802b44d-ab6a-4047-a6fa-5dfeaae680b4", "node_type": "4", "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f2fdc39505ed546746e61291fca390918d0649d04ab1a111faa4ef508004e0b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a070f4e4-2b1b-4824-8155-f65e2caf3c06", "node_type": "1", "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "551d2b2930004c2c0986e187691596cb76c9a5f104d618916a6ad1a55d3cb157", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 You can use Route 53 Private DNS to ma nage internal DNS hostnames for resources like application \nservers, database servers, and web servers.", "mimetype": "text/plain", "start_char_idx": 3382, "end_char_idx": 3526, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3bc161b1-54c3-4d70-b58f-5361f5aa7e65": {"__data__": {"id_": "3bc161b1-54c3-4d70-b58f-5361f5aa7e65", "embedding": null, "metadata": {"page_label": "53", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f279c0f-c197-4ce2-b8ab-a6184a28a90f", "node_type": "4", "metadata": {"page_label": "53", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d2a14a625f58c66fa3769691f3fe98af14d931b0d713fc5b3a17a4ea0dad608c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Route 53 will only respond to queries for these names when the queries originate from within the VPC(s) \nthat you authorize.  \n\uf0b7 Using custom internal DNS names (rather than IP addresses or AWS-provided names such as ec2-10-1-2-\n3.us-west-2.compute.amazonaws.com) has a variety of benefits, for example, being able to flip from one \ndatabase to another just by changing the mapping of a domain name such as interna l.example.com to \npoint to a new IP address.  \n\uf0b7 Route 53 also supports split -view DNS, so you can configure public and private hosted zones to return \ndifferent external and internal IP addresses for the same domain names. \nRelational Database Service \n\uf0b7 Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational \ndatabase in the cloud.  \n\uf0b7 It provides cost -efficient and resizable capacity while automating time -consuming administration tasks \nsuch as hardware provisioning, database setup, patching and backups.  \n\uf0b7 It frees you to focus on your applications so you can give them the fast performance, high availability, \nsecurity and compatibility they need. \n\uf0b7 Amazon RDS is available on several database instance types optimized for mem ory, performance or I/O \nand provides you with six familiar database engines to choose from, including Amazon Aurora, PostgreSQL, \nMySQL, MariaDB, Oracle, and Microsoft SQL Server.  \n\uf0b7 You can use the AWS Database Migration Service to easily migrate or replicate your existing databases to \nAmazon RDS. \nAdvantages/Benefits of Relational Database Service \n(i) Easy to Administer \n\uf0b7 Amazon RDS makes it easy to go from project conception to deployment. Use the AWS Management \nConsole, the AWS RDS Command -Line Interface, or simp le API calls to access the capabilities of a \nproduction-ready relational database in minutes. No need for infrastructure provisioning, and no need for \ninstalling and maintaining database software. \n(ii) Highly Scalable \n\uf0b7 We can scale our database's compute and sto rage resources with only a few mouse clicks or an API call, \noften with no downtime. Many Amazon RDS engine types allow you to launch one or more Read Replicas \nto offload read traffic from your primary database instance. \n(iii) Available and Durable \n\uf0b7 Amazon RDS runs on the same highly reliable infrastructure used by other Amazon Web Services. When \nyou provision a Multi-AZ DB Instance, Amazon RDS synchronously replicates the data to a standby instance \nin a different Availability Zone (AZ). Amazon RDS has many other f eatures that enhance reliability for \ncritical production databases, including automated backups, database snapshots, and automatic host \nreplacement. \n(iv) Fast \n\uf0b7 Amazon RDS supports the most demanding database applications. You can choose between two SSD -\nbacked storage options: one optimized for high -performance OLTP applications, and the other for cost -\neffective general-purpose use. In addition, Amazon Aurora provides performance on par with commercial \ndatabases at 1/10th the cost.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3166, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8743e81-a413-460b-8ade-7b919a3ceea5": {"__data__": {"id_": "e8743e81-a413-460b-8ade-7b919a3ceea5", "embedding": null, "metadata": {"page_label": "54", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82476317-a5d0-4f0f-84a4-62b22410fcb4", "node_type": "4", "metadata": {"page_label": "54", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a705ddb835a54d85fd9b3cc7f0da10f5ecac868903b39284bac07a4f8fbec3c3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n(v) Secure \n\uf0b7 Amazon RDS makes it easy to control network access to your database. Amazon RDS also lets you run your \ndatabase instances in Amazon Virtual Private Cloud (Amazon VPC), which enables you to isolate your \ndatabase instances and to connect to your existing IT infrastructure through an  industry-standard \nencrypted IPsec VPN. Many Amazon RDS engine types offer encryption at rest and encryption in transit. \n(vi) Inexpensive \n\uf0b7 You pay very low rates and only for the resources you actually consume. In addition, you benefit from the \noption of On-Demand pricing with no up-front or long-term commitments, or even lower hourly rates via \nReserved Instance pricing. \nDynamoDB \n\uf0b7 Amazon DynamoDB -- also known as Dynamo Database or DDB -- is a fully managed NoSQL database \nservice provided by Amazon Web Services. DynamoDB is known for low latencies and scalability. \n\uf0b7 According to AWS, DynamoDB makes it simple and cost-effective to store and retrieve any amount of data, \nas well as serve any level of request traffic.  \n\uf0b7 All data items are stored on solid -state drives, whi ch provide high I/O performance and can more \nefficiently handle high-scale requests.  \n\uf0b7 An AWS user interacts with the service by using the AWS Management Console or a DynamoDB API. \n\uf0b7 DynamoDB uses a NoSQL database model, which is nonrelational, allowing docum ents, graphs and \ncolumnar among its data models.  \n\uf0b7 A user stores data in DynamoDB tables, then interacts with it via GET and PUT queries, which are read and \nwrite operations, respectively.  \n\uf0b7 DynamoDB supports basic CRUD operations and conditional operations.  Each DynamoDB query is \nexecuted by a primary key identified by the user, which uniquely identifies each item. \nScalability, Availability and Durability \n\uf0b7 DynamoDB enforces replication across three availability zones for high availability, durability and read  \nconsistency.  \n\uf0b7 A user can also opt for cross-region replication, which creates a backup copy of a DynamoDB table in one \nor more global geographic locations. \n\uf0b7 The DynamoDB scan API provides two consistency options when reading DynamoDB data:  \no Eventually consistent reads \no Strongly consistent reads \n\uf0b7 The former, which is the AWS default setting, maximizes throughput at the potential expense of not having \na read reflect the latest write or update. The latter reflects all writes and updates. \n\uf0b7 There are no DynamoDB limits on data storage per user, nor a maximum throughput per table. \nSecurity \n\uf0b7 Amazon DynamoDB offers Fine -Grained Access Control (FGAC) for an administrator to protect data in a \ntable.  \n\uf0b7 The admin or table owner can specify who can access which items or attributes in a table and what actions \nthat person can perform.  \n\uf0b7 FGAC is based on the AWS Identity and Access Management service, which manages credentials and \npermissions.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2988, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ee23c338-f702-4027-9e16-614b15d575a5": {"__data__": {"id_": "ee23c338-f702-4027-9e16-614b15d575a5", "embedding": null, "metadata": {"page_label": "55", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90ea538b-b255-480c-8e8b-048310fd8803", "node_type": "4", "metadata": {"page_label": "55", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "056c8c597eed3cdc1e2fe015e9b1f7371badc4332c5ec7329a75f47f2073432f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 As with other AWS products, the cloud provider recommends a policy of least privilege when granting \naccess to items and attributes. \n\uf0b7 An admin can view usage metrics for DynamoDB with Amazon CloudWatch. \nAdditional DynamoDB Features \n\uf0b7 The DynamoDB Triggers feature integrates with AWS Lambda to allow a developer to code actions based \non updates to items in a DynamoDB table, such as sending a notification or connecting a table to another \ndata source.  \n\uf0b7 The developer associates a Lambda function, which stores the logic code, with the stream on a DynamoDB \ntable.  \n\uf0b7 AWS Lambda then reads updates to a table from a stream and executes the function. \n\uf0b7 The DynamoDB Streams feature provides a 24-hour chronological sequence of updates to items in a table.  \n\uf0b7 An admin can access the stream via an API call to take action based on updates, such as synchronizing \ninformation with another data store. An admin enables DynamoDB Streams on a per-table basis. \nAdvantages of DynamoDB \nPerformance at scale \n\uf0b7 DynamoDB supports some of the world\u2019s largest scale applications by providing consistent, single -digit \nmillisecond response times at any scale.  \n\uf0b7 You can build applications with virtually unlimited throughput and storage.  \n\uf0b7 DynamoDB global tables replicate your data across multiple AWS Regions to give you fast, local access to \ndata for your globally distributed applications.  \n\uf0b7 For use cases that require even faster access with microsecond latency, DynamoDB Accelerator (DAX) \nprovides a fully managed in-memory cache. \nNo servers to manage \n\uf0b7 DynamoDB is server less  with no servers to provision, patch, or manage and no software to install,  \nmaintain, or operate.  \n\uf0b7 DynamoDB automatically scales tables up and down to adjust for capacity and maintain performance.  \n\uf0b7 Availability and fault tolerance are built in, eliminating the need to architect your applications for these \ncapabilities.  \n\uf0b7 DynamoDB provides both provisioned and on-demand capacity modes so that you can optimize costs by \nspecifying capacity per workload, or paying for only the resources you consume. \nEnterprise ready \n\uf0b7 DynamoDB supports ACID transactions to enable you to build business-critical applications at scale.  \n\uf0b7 DynamoDB encrypts all data by default and provides fine -grained identity and access control on all your \ntables.  \n\uf0b7 You can create full backups of hundreds of terabytes of data instantly with no performance impact to your \ntables, and recover to any point in time in the preceding 35 days with no downtime.  \n\uf0b7 DynamoDB is also backed by a service level agreement for guaranteed availability. \nElastiCache \n\uf0b7 ElastiCache is a web service that makes it easy to set up, manage, and scale a distributed in-memory data \nstore or cache environment in the cloud.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2927, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b3d686b-1ef5-4449-90a0-4d8d79ae565d": {"__data__": {"id_": "7b3d686b-1ef5-4449-90a0-4d8d79ae565d", "embedding": null, "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71dca858-631a-477c-b413-3223854639f0", "node_type": "4", "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ebda4e568fdd3e7c36f538552814674f4b8019d934200741c1f2b1173631d021", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "798a72cf-a2c7-497f-a6e6-50b407f639bd", "node_type": "1", "metadata": {}, "hash": "d93a7e8586f2bfbe2d7e70d9feff35b5461e90722e0dc3d2ccca132d284629cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 It provides a high -performance, scalable, and cost -effective caching solution, while removing the \ncomplexity associated with deploying and managing a distributed cache environment. \n\uf0b7 With ElastiCache, you can quickly deploy your cache environment, without having to provision hardware \nor install software.  \n\uf0b7 You can choose from Memcached or Redis protocol-compliant cache engine software, and let ElastiCache \nperform software upgrades and patch management for you.  \n\uf0b7 For enhanced security, ElastiCache can be run in the Amazon Virtual Private Cloud (Amazon VPC) \nenvironment, giving you complete control over network access to your clusters.  \n\uf0b7 With just a few clicks in the AWS Management Console, you can add or remove resources such as nodes, \nclusters, or read replicas to your ElastiCache environment to meet your business needs and application \nrequirements. \n\uf0b7 Existing applications that use Memcached or Redis can use ElastiCache with almost no modification.  \n\uf0b7 Your applications simply need to know the host names and port numbers of the ElastiCache nodes that \nyou have deployed.  \n\uf0b7 The ElastiCache Auto Discovery feature for Memcached lets your appl ications identify all of the nodes in \na cache cluster and connect to them, rather than having to maintain a list of available host names and port \nnumbers.  \n\uf0b7 In this way, your applications are effectively insulated from changes to node membership in a cluster. \n\uf0b7 ElastiCache has multiple features to enhance reliability for critical production deployments: \no Automatic detection and recovery from cache node failures. \no Multi-AZ with Automatic Failover of a failed primary cluster to a read replica in Redis clusters tha t \nsupport replication (called replication groups in the ElastiCache API and AWS CLI. \no Flexible Availability Zone placement of nodes and clusters. \no Integration with other AWS services such as Amazon EC2, Amazon CloudWatch, AWS CloudTrail, and \nAmazon SNS to provide a secure, high-performance, managed in-memory caching solution. \nElastiCache Nodes \n\uf0b7 A node is the smallest building block of an ElastiCache deployment.  \n\uf0b7 A node can exist in isolation from or in some relationship to other nodes. \n\uf0b7 A node is a fixed-size chunk of secure, network-attached RAM. \n\uf0b7  Each node runs an instance of the engine and version that was chosen when you created your cluster.  \n\uf0b7 If necessary, you can scale the nodes in a cluster up or down to a different instance type.  \n\uf0b7 Every node within a cluster is the same instance type and runs the same cache engine.  \n\uf0b7 Each cache node has its own Domain Name Service (DNS) name and port.  \n\uf0b7 Multiple types of cache nodes are supported, each with varying amounts of associated memory.  \n\uf0b7 You can purchase nodes on a pay-as-you-go basis, where you only pay for your use of a node.  \n\uf0b7 Or you can purchase reserved nodes at a much-reduced hourly rate.  \n\uf0b7 If your usage rate is high, purchasing reserved nodes can save you money. \nElastiCache for Redis Shards \n\uf0b7 A Redis shard (called a node group in the API and CLI) is a grouping of one to six related nodes.  \n\uf0b7 A Redis (cluster mode disabled) cluster always has one shard.  \n\uf0b7 A Redis (cluster mode enabled) cluster can have 1\u201390 shards.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "798a72cf-a2c7-497f-a6e6-50b407f639bd": {"__data__": {"id_": "798a72cf-a2c7-497f-a6e6-50b407f639bd", "embedding": null, "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71dca858-631a-477c-b413-3223854639f0", "node_type": "4", "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ebda4e568fdd3e7c36f538552814674f4b8019d934200741c1f2b1173631d021", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b3d686b-1ef5-4449-90a0-4d8d79ae565d", "node_type": "1", "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "796651feaf503e4e518bbc87b62f7d1c14eb983dbd1b2cc13dca669f863877d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 A Redis (cluster mode disabled) cluster always has one shard.  \n\uf0b7 A Redis (cluster mode enabled) cluster can have 1\u201390 shards. \n\uf0b7 A multiple node shard implement s replication by having one read/write primary node and 1 \u20135 replica \nnodes.", "mimetype": "text/plain", "start_char_idx": 3243, "end_char_idx": 3483, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f80a1ad9-0d34-4b33-95e2-556a3f977d56": {"__data__": {"id_": "f80a1ad9-0d34-4b33-95e2-556a3f977d56", "embedding": null, "metadata": {"page_label": "57", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e745575-9b4d-4256-a67f-4e7cf876204d", "node_type": "4", "metadata": {"page_label": "57", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1bfb037af574b25330a18680579d28a2cf6e3394bfd26e2df6bb23899120b37e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nElastiCache for Redis Clusters \n\uf0b7 A Redis cluster is a logical grouping of one or more ElastiCache for Redis Shards.  \n\uf0b7 Data is partitioned across the shards in a Redis (cluster mode enabled) cluster. \n\uf0b7 Many ElastiCache operations are targeted at clusters: \no Creating a cluster \no Modifying a cluster \no Taking snapshots of a cluster (all versions of Redis) \no Deleting a cluster \no Viewing the elements in a cluster \no Adding or removing cost allocation tags to and from a cluster \nRedshift \n\uf0b7 Perhaps one of the most exciting outcomes of the public cloud was addressing the shortcomings of \ntraditional enterprise data warehouse (EDW) storage and processing. The fast provisioning, commodity \ncosts, infinite scale, and pay-as-you-grow pricing of public cloud are a natural fit for EDW needs, providing \neven the smallest of users the ability to now get valuable answers to business intelligence (BI) questions.  \n\uf0b7 Amazon Redshift is one such system built to address EDW needs, a nd it boasts low costs, an easy SQL -\nbased access model, easy integration to other Amazon Web Services (AWS) solutions, and most \nimportantly, high query performance. \n\uf0b7 Amazon Redshift gets its name from the astronomical phenomenon noticed by Hubble, which exp lained \nthe expansion of the universe. By adopting the Amazon Redshift moniker, AWS wanted to relay to \ncustomers that the service was built to handle the perpetual expansion of their data. \n \nFig. : Amazon Redshift Architecture \n\uf0b7 An Amazon Redshift cluster consists of one leader node (which clients submit queries to) and one or more \nfollower (or \u201ccompute\u201d) nodes, which actually perform the queries on locally stored data.  \n\uf0b7 By allowing for unlimited expansion of follower nodes, Amazon Redshift ensures that custom ers can \ncontinue to grow their cluster as their data needs grow.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e948857a-c567-4fc4-b3ca-f3fbfdb9ff3e": {"__data__": {"id_": "e948857a-c567-4fc4-b3ca-f3fbfdb9ff3e", "embedding": null, "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfb632d3-dd2b-49a9-84d7-423771ae8a9e", "node_type": "4", "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "451f4e7c570da1f8e2030552eeb433164edd6372def7940ff63d82ad80f41a3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82d8b0ae-11a3-4e78-b5c7-cd8c15cb3618", "node_type": "1", "metadata": {}, "hash": "aade5777239fd40bfbb5cc756d16b3e302d282c1ae5ae45a17be687fc1390ea9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Customers can start with a \u201ccluster\u201d as small as a single node (acting as both leader and follower), and for \nthe smallest supported instance type (a DW2), that could be as low cost as $0.25/ hour or about \n$180/month. By using \u201cReservations\u201d (paying an up-front fee in exchange for a lower hourly running cost) \nfor the underlying instances, Amazon Redshift can cost as little as $1,000/TB/year \u2014 upwards of one-fifth \nto one-tenth of the cost of a traditional EDW. \n\uf0b7 Because Amazon Redshift provides native Open Database Connectivity (ODBC) and Database Connectivity \n(JDBC) connectivity (in addition to PostgresSQL driver support), most third -party BI tools (like Tableu, \nQlikview, and MicroStrategy) work r ight out of the box. Amazon Redshift also uses the ubiquitous \nStructured Query Language (SQL) language for queries, ensuring that your current resources can quickly \nand easily become productive with the technology. \n\uf0b7 Amazon Redshift was custom designed from the ParAccel engine \u2014 an analytic database which used \ncolumnar storage and parallel processing to achieve very fast I/O.  \n\uf0b7 Columns of data in Amazon Redshift are stored physically adjacent on disk, meaning that queries and scans \non those columns (common in online analytical processing [OLAP] queries) run very fast.  \n\uf0b7 Additionally, Amazon Redshift uses 10GB Ethernet interconnects, and specialized EC2 instances (with \nbetween three and 24 spindles per node) to achieve high throughput and low latency.  \n\uf0b7 For even f aster queries, Amazon Redshift allows customers to use column -level compression to both \ngreatly reduce the amount of data that needs stored, and reduce the amount of disk I/O. \n\uf0b7 Amazon Redshift, like many of AWS\u2019s most popular services, is also fully managed, meaning that low-level, \ntime-consuming administrative tasks like OS patching, backups, replacing failed hardware, and software \nupgrades are handled automatically and transparently.  \n\uf0b7 With Amazon Redshift, users simply provision a cluster, load it with the ir data, and begin executing \nqueries. All data is continuously, incrementally, automatically backed up in the highly durable S3, and \nenabling disaster recovery across regions can be accomplished with just a few clicks.  \n\uf0b7 Spinning a cluster up can be as simple as a few mouse clicks, and as fast as a few minutes. \n\uf0b7 A very exciting aspect of Amazon Redshift, and something that is not possible in traditional EDWs, is the \nability to easily scale a provisioned cluster up and down.  \n\uf0b7 In Amazon Redshift, this scaling is transparent to the customer\u2014when a resize is requested, data is copied \nin parallel from the source cluster (which continues to function in read -only mode) to a new cluster, and \nonce all data is live migrated, DNS is flipped to the new cluster and the old cluster is de-provisioned.  \n\uf0b7 This allows customers to easily scale up and down, and each scaling event nicely re-stripes the data across \nthe new cluster for a balanced workload.  \n\uf0b7 Amazon Redshift offers mature, native, and tunable security.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3189, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82d8b0ae-11a3-4e78-b5c7-cd8c15cb3618": {"__data__": {"id_": "82d8b0ae-11a3-4e78-b5c7-cd8c15cb3618", "embedding": null, "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfb632d3-dd2b-49a9-84d7-423771ae8a9e", "node_type": "4", "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "451f4e7c570da1f8e2030552eeb433164edd6372def7940ff63d82ad80f41a3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e948857a-c567-4fc4-b3ca-f3fbfdb9ff3e", "node_type": "1", "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f58826b83344b9dad4a8ed79ba95847768754f6fe1330e66b7ffb0e9024f35cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 Amazon Redshift offers mature, native, and tunable security. Clusters can be deployed into a Virtual \nPrivate Cloud (VPC), and encryption of data is supported via hardware accelerated AES -256 (for data at \nrest) and SSL (for data on the wire).  \n\uf0b7 Compliance teams will be pleased to learn that users can manage their own encryption keys via AWS\u2019s \nHardware Security Module (HSM) service, and that Amazon Redshift provides a full audit trail of all SQL \nconnection attempts, queries, and modifications of the cluster. \nAdvantages of Amazon Redshift \nExceptionally fast \n\uf0b7 Redshift is very fast when it comes to loading data and querying it for analytical and reporting purposes.  \n\uf0b7 Redshift has Massively Parallel Processing (MPP) Architecture which allows you to load data at blazing fast \nspeed.  \n\uf0b7 In addition, using this architecture, Redshift distributes and parallelize your queries across multiple nodes.", "mimetype": "text/plain", "start_char_idx": 3127, "end_char_idx": 4043, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4f069d5-4d1f-446d-aca5-d4e1e77a6388": {"__data__": {"id_": "b4f069d5-4d1f-446d-aca5-d4e1e77a6388", "embedding": null, "metadata": {"page_label": "59", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c56c1a68-488f-4835-9ff3-4db7672e8e8f", "node_type": "4", "metadata": {"page_label": "59", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8ba7afb48587768a8d357f3b785160fb8e0d124bffb3801a935efe2efa609ae7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Redshift gives you an option to use Dense Compute nodes which are SSD based data warehouses. Using \nthis you can run most complex queries in very less time. \nHigh Performance \n\uf0b7 As discussed in the previous point, Redshift gains high performance using massive parallelism, efficient \ndata compression, query optimization, and distribution. \n\uf0b7 MPP enables Redshift to parallelize data loading, backup and restore operation. Furthermore, queries that \nyou execute get distributed across multiple nodes. \n\uf0b7 Redshift is a columnar storage database, which is optimized for huge and repetitive type of data. Using \ncolumnar storage, reduces the I/O operations on disk drastically, improving performance as a result. \n\uf0b7 Redshift gives you an option to define column -based encoding for data compression. If not specified by \nthe user, redshift automatically assigns compression encoding.  \n\uf0b7 Data compression helps in reducing memory footprint and significantly improves the I/O speed. \nHorizontally Scalable \n\uf0b7 Scalability is a very crucial point for any Data warehousing solution and Redshift does pretty well job in \nthat.  \n\uf0b7 Redshift is horizontally scalable. Whenever you need to increase the storage or need it to run faster, just \nadd more nodes using AWS console or Cluster API and it will upscale immediately. \n\uf0b7 During this process, your existing cluster will remain available for read operations so your application stays \nuninterrupted. \n\uf0b7 During the scaling operation, Redshift moves data parallel between compute nodes of old and new \nclusters. Therefore enabling the transition to complete smoothly and as quickly as possible. \nMassive Storage capacity \n\uf0b7 As expected from a Data warehousing solution, Redshift provides massive storage capacity.  \n\uf0b7 A basic setup can give you a petabyte range of data storage.  \n\uf0b7 In addition, Redshift gives you an option to choose Dense Storage type of compute nodes which can \nprovide large storage space using Hard Disk Drives for a very low price.  \n\uf0b7 You can further increase the storage by adding more nodes to your cluster and it can go well beyond \npetabyte of data range. \nAttractive and transparent pricing \n\uf0b7 Pricing is a very strong point in favor of Redshift, it is considerably cheaper than alternatives or an on \npremise solution. Redshift has 2 pricing models, pay as you go and reserved instance.  \n\uf0b7 Hence this gives you the flexibility to categorize this expense as an operational expense or capital expense. \n\uf0b7 If your use case requires more data storage, then with 3 years reserved instance Dense Storage plan, \neffective price per terabyte per year can be as low as $935.  \n\uf0b7 Comparing this to traditional on premise storage, which roughly costs around $19k -$25k per terabyte, \nRedshift is significantly cheaper. \n SQL interface \n\uf0b7 Redshift Query Engine is based on ParAccel which has the same interface as PostgreSQL If you are already \nfamiliar with SQL, you don\u2019t need to learn a lot of new techs to start using query module of Redshift.  \n\uf0b7 Since Redshift uses SQL, it works with existing Postgres JDBC/ODBC drivers, readily connecting to most of \nthe Business Intelligence tools.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3288, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1d26386-7e1c-4f28-88e6-7681430f12a5": {"__data__": {"id_": "e1d26386-7e1c-4f28-88e6-7681430f12a5", "embedding": null, "metadata": {"page_label": "60", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8cd35e64-a184-43dc-bdb2-a9ce9ec3beb6", "node_type": "4", "metadata": {"page_label": "60", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9453910804b3ce15421bbad94430e8fc0cddd519abf7721406e974e7fc4b254a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 9 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n AWS ecosystem \n\uf0b7 Many businesses are running their infrastructure on AWS already, EC2 for servers, S3 for long -term \nstorage, RDS for database and this number is constantly increasing.  \n\uf0b7 Redshift works very well if the rest of your infra is already on AWS and you get the benefit of data locality \nand cost of data transport is comparatively low.  \n\uf0b7 For a lot of businesses, S3 has become the de-facto destination for cloud storage.  \n\uf0b7 Since Redshift is virtually co -located with S3 and it can access formatted data on S3 with single COPY \ncommand.  \n\uf0b7 When loading or dumping data on S3, Redshift uses Massive Parallel Processing which can move data at a \nvery fast speed. \nSecurity \n\uf0b7 Amazon Redshift comes packed with various security features.  \n\uf0b7 There are options like VPC for network isolation, various ways to handle access control, data encryption \netc.  \n\uf0b7 Data encryption option is available at multiple places in Redshift.  \n\uf0b7 To encrypt data stored in your cluster you can enable cluster encryption at the time of launching the \ncluster.  \n\uf0b7 Also, to encrypt data in transit, you can enable SSL encryption.  \n\uf0b7 When loading data from S3, redsh ift allows you to use either server -side encryption or client -side \nencryption.  \n\uf0b7 Finally, at the time of loading data, S3 or Redshift copy command handles the decryption respectively. \n\uf0b7 Amazon Redshift clusters can be launched inside your infrastructure Virtual Private Cloud (VPC).  \n\uf0b7 Hence you can define VPC security groups to restrict inbound or outbound access to your redshift clusters. \n\uf0b7 Using the robust Access Control system of AWS, you can grant privilege to specific users or maintain access \non specific database level.  \n\uf0b7 Additionally, you can even define users and groups to have access to specific data in tables. \nAmazon Redshift Limitations \nDoesn\u2019t enforce uniqueness  \n\uf0b7 There is no way in redshift to enforce uniqueness on inserted data.  \n\uf0b7 Hence, if you have a distributed system and it writes data on Redshift, you will have to handle the \nuniqueness yourself either on the application layer or by using some method of data de-duplication. \nOnly S3, DynamoDB and Amazon EMR support for parallel upload \n\uf0b7 If your data is in Amazon S3 or relational DynamoDB or on Amazon EMR, Redshift can load it using \nMassively Parallel Processing which is very fast.  \n\uf0b7 But for all other sources, parallel loading is not supported.  \n\uf0b7 You will either have to use JDBC inserts or some scripts to load data into Redshift.  \n\uf0b7 Alternatively, you can use an ETL solution like Hevo which can load your data into Redshift parallel from \n100s of sources. \nRequires a good understanding of Sort and Distribution keys \n\uf0b7 Sort keys and Distribution keys decide how data is stored and indexed across all Redshift nodes.  \n\uf0b7 Therefore, you need to have a solid understanding of these concepts and you need to properly set them \non your tables for optimal performance.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3074, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4040f999-0ddd-4386-afd8-8be89c42ff7e": {"__data__": {"id_": "4040f999-0ddd-4386-afd8-8be89c42ff7e", "embedding": null, "metadata": {"page_label": "61", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "324dcdbf-2be8-4e1c-bc86-821c1548b27f", "node_type": "4", "metadata": {"page_label": "61", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "749760eaef6dbee38cb2c8a38b3e2d10e4402b51037c3dd90b3aa8891a631ac7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-7 \u2013 AWS networking and databases \n \n 10 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 There can be only one distribution key for a table and that cannot be changed later on, which means you \nhave to think carefully and anticipate future workloads before deciding Distribution key.  \nCan\u2019t be used as live app database \n\uf0b7 While Redshift is very fast when running  queries on a huge amount of data or running reporting and \nanalytics, but it is not fast enough for live web apps.  \n\uf0b7 So you will have to pull data into a caching layer or a vanilla Postgres instance to se rve redshift data to \nweb apps. \nData on Cloud \n\uf0b7 Though it is a good thing for most of the people, in some use cases it could be a point of concern.  \n\uf0b7 So if you are concerned with the privacy of data or your data has extremely sensitive content, you may \nnot be comfortable putting it on the cloud. \nHigh performance AWS Networking. \n\uf0b7 High performance AWS Networking is nothing but use of various network services provided by AWS for \nbetter performance. \n\uf0b7 AWS Networking include following services: \n1. Private DNS Servers \no The Private DNS are name servers that reflect your domain name rather than our default ones. \no Having private nameservers could be useful if you intend to resell hosting services or want to \nbrand your business.  \no Also, when using Private DNS, if a domain name is migrated to another server, there is no need to \nchange any nameservers and the domain names will automatically point to the new location. \n2. Virtual Private Clouds (Explain Earlier) \n3. Cloud Models (Explain Earlier) etc.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1644, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3b47287f-89d0-4059-82fe-26daaa7c0148": {"__data__": {"id_": "3b47287f-89d0-4059-82fe-26daaa7c0148", "embedding": null, "metadata": {"page_label": "62", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "940432f0-16a3-42b2-a84b-89d06c35c3b8", "node_type": "4", "metadata": {"page_label": "62", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "381b196ec508f5c1b70d6013d4e099cf41438a1c761d4344f1573c55d6857020", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nBig Data Analytics \n\uf0b7 Big data analytics is the often complex process of examining large and varied data sets, or big data, to \nuncover information -- such as hidden patterns, unknown correlations, market trends and customer \npreferences -- that can help organizations make informed business decisions. \nAWS Analytics Services \nAmazon Athena \n\uf0b7 Amazon Athena is an interactive query service that makes it easy to analyze data in Amazon S3 using \nstandard SQL.  \n\uf0b7 Athena is serverless, so there is no infrastructure to manage, and you pay only for the queries that you \nrun. \n\uf0b7 Athena is easy to use. Simply point to your data in Amazon S3, de\ufb01ne the schema, and start querying using \nstandard SQL.  \n\uf0b7 Most results are delivered within seconds. With Athena, there\u2019s no need for complex extract, transform, \nand load (ETL) jobs to prepare your data for analysis.  \n\uf0b7 This makes it easy for anyone with SQL skills to quickly analyze large-scale datasets. \n\uf0b7 Athena is out -of-the-box integrated with AWS Glue Data Catalog, allowing you to create a unified \nmetadata repository across various services, crawl data sources to discover schemas and populate your \nCatalog with new and modified table and partition definitions, and maintain schema versioning.  \n\uf0b7 You can also use Glue\u2019s fully -managed ETL capabilities to transform data or convert it into columnar \nformats to optimize cost and improve performance. \nAmazon EMR \n\uf0b7 Amazon EMR provides a managed Hadoop framework that makes it easy, fast, an d cost -e\ufb00ective to \nprocess vast amounts of data across dynamically scalable Amazon EC2 instances.  \n\uf0b7 You can also run other popular distributed frameworks such as Apache Spark, HBase, Presto, and Flink in \nAmazon EMR, and interact with data in other AWS data stores such as Amazon S3 and Amazon DynamoDB.  \n\uf0b7 EMR Notebooks, based on the popular Jupyter Notebook, provide a development and collaboration \nenvironment for ad hoc querying and exploratory analysis. \n\uf0b7 Amazon EMR securely and reliably handles a broad set of big data use cases, including log analysis, web \nindexing, data transformations (ETL), machine learning, \ufb01nancial analysis, scienti\ufb01c simulation, and \nbioinformatics. \nAmazon CloudSearch \n\uf0b7 Amazon CloudSearch is a managed service in the AWS Cloud that makes it simple and cost-effective to set \nup, manage, and scale a search solution for your website or application.  \n\uf0b7 Amazon CloudSearch supports 34 languages and popular search features such as highlighting, \nautocomplete, and geospatial search. \nAmazon Elasticsearch Service \n\uf0b7 Amazon Elasticsearch Service makes it easy to deploy, secure, operate, and scale Elasticsearch to search, \nanalyze, and visualize data in real-time.  \n\uf0b7 With Amazon Elasticsearch Service, you get easy-to-use APIs and real-time analytics capabilities to power \nuse-cases such as log analytics, full -text search, application monitoring, and clickstream analytics, with \nenterprise-grade availability, scalability, and security.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3136, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5cf41f68-291a-47a9-9558-6645c51d5644": {"__data__": {"id_": "5cf41f68-291a-47a9-9558-6645c51d5644", "embedding": null, "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76a8f7dc-872b-45df-95f1-446323ae832e", "node_type": "4", "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a80d1cf1531a888590df06bf8f39219d62712aeeabb6564c902a80c407b4e26a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aaef0a2d-a3be-4337-b844-36ba295ef9ce", "node_type": "1", "metadata": {}, "hash": "9dac0b257d28a095d8796cdf3260e39e7c5803c92a64b694f5a2783e36dd9fb9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 The service o\ufb00ers integrations with open -source tools like Kibana and Logstash for d ata ingestion and \nvisualization.  \n\uf0b7 It also integrates seamlessly with other AWS services such as Amazon Virtual Private Cloud (Amazon VPC), \nAWS Key Management Service (AWS KMS), Amazon Kinesis Data Firehose, AWS Lambda, AWS Identity \nand Access Management (IAM), Amazon Cognito, and Amazon CloudWatch, so that you can go from raw \ndata to actionable insights quickly. \nAmazon Kinesis \n\uf0b7 Amazon Kinesis makes it easy to collect, process, and analyze real -time, streaming data so you can get \ntimely insights and react quickly to new information.  \n\uf0b7 Amazon Kinesis offers key capabilities to cost -effectively process streaming data at any scale, along with \nthe flexibility to choose the tools that best suit the requirements of your application.  \n\uf0b7 With Amazon Kinesis, you can inge st real -time data such as video, audio, application logs, website \nclickstreams, and IoT telemetry data for machine learning, analytics, and other applications.  \n\uf0b7 Amazon Kinesis enables you to process and analyze data as it arrives and respond instantly inst ead of \nhaving to wait until all your data is collected before the processing can begin. \n\uf0b7 Amazon Kinesis currently o\ufb00ers four services: Kinesis Data Firehose, Kinesis Data Analytics, Kinesis Data \nStreams, and Kinesis Video Streams. \nAmazon Kinesis Data Firehose \no Amazon Kinesis Firehose is the easiest way to reliably load streaming data into data stores and \nanalytics tools.  \no It can capture, transform, and load streaming data into Amazon S3, Amazon Redshift, Amazon \nElasticsearch Service, and Splunk, enabling near real-time analytics with existing business intelligence \ntools and dashboards you\u2019re already using today.  \no It is a fully managed service that automatically scales to match the throughput of your data and \nrequires no ongoing administration.  \no It can also batch, compress, transform, and encrypt the data before loading it, minimizing the amount \nof storage used at the destination and increasing security. \no You can easily create a Firehose delivery stream from the AWS Management Console, con\ufb01gure it with \na few clicks, and start sending data to the stream from hundreds of thousands of data sources to be \nloaded continuously to AWS\u2014all in just a few minutes.  \no You can also configure your delivery stream to automatically convert the incoming data to columnar \nformats like Apache Parquet and Apache ORC, before the data is delivered to Amazon S3, for cost -\neffective storage and analytics. \nAmazon Kinesis Data Analytics \no Amazon Kinesis Data Analytics is the easiest way to analyze streaming data, gain actionable insights, \nand respond to your business and customer needs in real time.  \no Amazon Kinesis Data Analytics reduces the complexity of building, managing, and integrating \nstreaming applications with other AWS services.  \no SQL users can easily query streaming data or build entire streaming applications using templates and \nan interactive SQL editor.  \no Java developers can quickly build sophisticated streaming applications using open source Java libraries \nand AWS integrations to transform and analyze data in real-time.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3371, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aaef0a2d-a3be-4337-b844-36ba295ef9ce": {"__data__": {"id_": "aaef0a2d-a3be-4337-b844-36ba295ef9ce", "embedding": null, "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76a8f7dc-872b-45df-95f1-446323ae832e", "node_type": "4", "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a80d1cf1531a888590df06bf8f39219d62712aeeabb6564c902a80c407b4e26a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cf41f68-291a-47a9-9558-6645c51d5644", "node_type": "1", "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0b264adea473ad9a0072b5872a0ab6c364ceea036ae2988225d802eb4f66160b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "o Java developers can quickly build sophisticated streaming applications using open source Java libraries \nand AWS integrations to transform and analyze data in real-time. \no Amazon Kinesis Data Analytics takes care of everything required to run your queries continuously and \nscales automatically to match the volume and throughput rate of your incoming data.", "mimetype": "text/plain", "start_char_idx": 3200, "end_char_idx": 3560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d3527a2f-2c1f-4dfe-9f03-165eac4b7640": {"__data__": {"id_": "d3527a2f-2c1f-4dfe-9f03-165eac4b7640", "embedding": null, "metadata": {"page_label": "64", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a99e186-a6e8-451b-a995-b702e942d7d8", "node_type": "4", "metadata": {"page_label": "64", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9ef9700423149cf581d58cee8bf50ddd1409ce6df8fb189ada1c168496a69435", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAmazon Kinesis Data Streams \no Amazon Kinesis Data Streams (KDS) is a massively scalable and durable real -time data streaming \nservice.  \no KDS can continuously capture gigabytes of data per second from hundreds of thousands of sources \nsuch as website clickstreams, database  event streams, financial transactions, social media feeds, IT \nlogs, and location-tracking events.  \no The data collected is available in milliseconds to enable real-time analytics use cases such as real-time \ndashboards, real-time anomaly detection, dynamic pricing, and more. \nAmazon Kinesis Video Streams \no Amazon Kinesis Video Streams makes it easy to securely stream video from connected devices to AWS \nfor analytics, machine learning (ML), playback, and other processing.  \no Kinesis Video Streams automatically provisions and elastically scales all the infrastructure needed to \ningest streaming video data from millions of devices.  \no It also durably stores, encrypts, and indexes video data in your streams, and allows you to access your \ndata through easy-to-use APIs.  \no Kinesis Video Streams enables you to playback video for live and on-demand viewing, and quickly build \napplications that take advantage of computer vision and video analytics through integration with \nAmazon Recognition Video, and libraries for ML frameworks such as Apache MxNet, TensorFlow, and \nOpenCV. \nAmazon Redshift \n\uf0b7 Amazon Redshift is a fast, scalable data warehouse that makes it simple and cost -effective to analyze all \nyour data across your data warehouse and data lake.  \n\uf0b7 Redshift delivers ten times faster p erformance than other data warehouses by using machine learning, \nmassively parallel query execution, and columnar storage on high-performance disk.  \n\uf0b7 You can setup and deploy a new data warehouse in minutes, and run queries across petabytes of data in \nyour Redshift data warehouse, and exabytes of data in your data lake built on Amazon S3.  \n\uf0b7 You can start small for just $0.25 per hour and scale to $250 per terabyte per year, less than one -tenth \nthe cost of other solutions. \nAmazon QuickSight \n\uf0b7 Amazon QuickSight is a fast, cloud-powered business intelligence (BI) service that makes it easy for you to \ndeliver insights to everyone in your organization.  \n\uf0b7 QuickSight lets you create and publish interactive dashboards that can be accessed from browsers or \nmobile devices.  \n\uf0b7 You can embed dashboards into your applications, providing your customers with powerful self -service \nanalytics.  \n\uf0b7 QuickSight easily scales to tens of thousands of users without any software to install, servers to deploy, or \ninfrastructure to manage. \nAWS Data Pipeline \n\uf0b7 AWS Data Pipeline is a web service that helps you reliably process and move data between di\ufb00erent AWS \ncompute and storage services, as well as on-premises data sources, at speci\ufb01ed intervals.  \n\uf0b7 With AWS Data Pipeline, you can regularly access your data where it\u2019s stored, transform and process it at \nscale, and e\ufb03ciently transfer the results to AWS services such as Amazon S3, Amazon RDS, Amazon \nDynamoDB, and Amazon EMR.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3236, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5b6d6c2-bd32-44b7-865b-c8b3fd14f1dc": {"__data__": {"id_": "e5b6d6c2-bd32-44b7-865b-c8b3fd14f1dc", "embedding": null, "metadata": {"page_label": "65", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6597ed24-9894-450c-b81d-2acf0e51a872", "node_type": "4", "metadata": {"page_label": "65", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b15082e82cb8e6420ac01eb87a50a83490f920787a4db190d63acfc4a82afba1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 AWS Data Pipeline helps you easily create complex data processing workloads that are fault tolerant, \nrepeatable, and highly available.  \n\uf0b7 You don\u2019t have to worry about ensuring resource availability, managing inter-task dependencies, retrying \ntransient failures or timeouts in individual tasks, or creating a failure notification system.  \n\uf0b7 AWS Data Pipeline also allows you to move and process data that was previously locked up in on-premises \ndata silos. \nAWS Glue \n\uf0b7 AWS Glue is a fully managed extract, transform, and load (ETL) service that makes it easy for customers to \nprepare and load their data for analytics.  \n\uf0b7 You can create and run an ETL job with a few clicks in the AWS Management Console.  \n\uf0b7 You simply point AWS Glue to your data stored on AWS, and AWS Glue discovers your data and stores the \nassociated metadata (e.g. table definition and schema) in the AWS Glue Data Catalog.  \n\uf0b7 Once cataloged, your data is immediately searchable, queryable, and available for ETL. \nAWS Lake Formation \n\uf0b7 AWS Lake Formation is a service that makes it easy to set up a secure data lake in days.  \n\uf0b7 A data lake is a ce ntralized, curated, and secured repository that stores all your data, both in its original \nform and prepared for analysis.  \n\uf0b7 A data lake enables you to break down data silos and combine different types of analytics to gain insights \nand guide better business decisions. \n\uf0b7 However, setting up and managing data lakes today involves a lot of manual, complicated, and time -\nconsuming tasks.  \n\uf0b7 This work includes loading data from diverse sources, monitoring those data flows, setting up partitions, \nturning on encryption and managing keys, defining transformation jobs and monitoring their operation, \nre-organizing data into a columnar format, confi guring access control settings, deduplicating redundant \ndata, matching linked records, granting access to data sets, and auditing access over time. \n\uf0b7 Creating a data lake with Lake Formation is as simple as defining where your data resides and what data \naccess and security policies you want to apply.  \n\uf0b7 Lake Formation then collects and catalogs data from databases and object storage, moves the data into \nyour new Amazon S3 data lake, cleans and classifies data using machine learning algorithms, and secures \naccess to your sensitive data.  \n\uf0b7 Your users can then access a centralized catalog of data which describes available data sets and their \nappropriate usage.  \n\uf0b7 Your users then leverage these data sets with their choice of analytics and machine learning services, like \nAmazon EMR for Apache Spark, Amazon Redshift, Amazon Athena, Amazon SageMaker, and Amazon \nQuickSight. \nAmazon Managed Streaming for Kafka (MSK) \n\uf0b7 Amazon Managed Streaming for Kafka (MSK) is a fully managed service that makes it easy for you to build \nand run applications that use Apache Kafka to process streaming data.  \n\uf0b7 Apache Kafka is an open-source platform for building real-time streaming data pipelines and applications.  \n\uf0b7 With Amazon MSK, you can use Apache Kafka APIs to populate data lakes, stream changes  to and from \ndatabases, and power machine learning and analytics applications. \n\uf0b7 Apache Kafka clusters are challenging to setup, scale, and manage in production.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3414, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9b5ae2d5-0246-4e52-a95a-236e0e3be597": {"__data__": {"id_": "9b5ae2d5-0246-4e52-a95a-236e0e3be597", "embedding": null, "metadata": {"page_label": "66", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "878538be-5da7-4df1-9f3e-57f44cb10781", "node_type": "4", "metadata": {"page_label": "66", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "85df504991de420e7a8da3698a9b6283ae72aebe9318341404691ea4f8db6a9b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 5 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 When you run Apache Kafka on your own, you need to provision servers, configure Apache Kafka \nmanually, replace servers when they fail, orchestrate server patches and upgrades, architect the cluster \nfor high availability, ensure data is durably stored and secured, setup monitoring and alarms, and carefully \nplan scaling events to support load changes.  \n\uf0b7 Amazon Managed Streaming for Kafka makes it easy for you to build and run production applications on \nApache Kafka without needing Apache Kafka infrastructure management expertise.  \n\uf0b7 That means you spend less time managing infrastructure and more time building applications. \n\uf0b7 With a few clicks in the Amazon MSK console you can create highly available Apache Kafka clusters with \nsettings and configuration based on Apache Kafka\u2019s deployment best practices.  \n\uf0b7 Amazon MSK automatically provisions and runs your Apache Kafka clusters.  \n\uf0b7 Amazon MSK continuously monitors cluster health and automatically replaces unhealthy nodes with no \ndowntime to your application.  \n\uf0b7 In addition, Amazon MSK secures your Apache Kafka cluster by encrypting data at rest. \nApplication Services \nTracking Software Licenses with AWS Service Catalog and AWS Step Functions \n\uf0b7 Enterprises have many business requirements for tracking how software product licenses are used in their \norganization for financial, governance, and compliance reasons.  \n\uf0b7 By tracking license usage, organizations can stay within budget, track expenditures, and avoid unplanned \ntrue-up bills from their vendors\u2019 true-up processes.  \n\uf0b7 The goal is to track the usage licenses as resources are deployed. \n\uf0b7 In this post, you learn how to use AWS Service Catalog to deploy services and applications while tracking \nthe licenses being consumed by end users, and how to prevent license overruns on AWS. \n\uf0b7 This solution uses the following AWS services. Mos t of the resources are set up for you with an AWS \nCloudFormation stack: \no AWS Service Catalog \no AWS Lambda \no AWS Step Functions \no AWS CloudFormation \no Amazon DynamoDB \no Amazon SES \nSecure Serverless Development Using AWS Service Catalog \n\uf0b7 Serverless computing allows you to build and run applications and services without having to manage \nservers.  \n\uf0b7 AWS Service Catalog allows you to create and manage catalogs of services that are approved for use on \nAWS.  \n\uf0b7 Combining Serverless and Service Catalog togethe r is a great way to safely allow developers to create \nproducts and services in the cloud. \n\uf0b7 In this post, I demonstrate how to combine the controls of Service Catalog with AWS Lambda and Amazon \nAPI Gateway and allow your developers to build a Serverless application without full AWS access. \nHow to secure infrequently used EC2 instances with AWS Systems Manager  \n\uf0b7 Many organizations have predictable spikes in the usage of their applications and services.  \n\uf0b7 For example, retailers see large spikes in usage during Black Friday or Cyber Monday.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3102, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "608b586e-f845-4802-88f0-0050c6f8c2b1": {"__data__": {"id_": "608b586e-f845-4802-88f0-0050c6f8c2b1", "embedding": null, "metadata": {"page_label": "67", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c6f062b-9a97-41ac-96e3-85a628d0c559", "node_type": "4", "metadata": {"page_label": "67", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "296ba5740c64e1560189fb153671079723967a2d9a05f63fff0e020b3f997011", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 6 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 The beauty of Amazon Elastic Compute Cloud (Amazon EC2) is that it allows customers to quickly scale up \ntheir compute power to meet these demands.  \n\uf0b7 However, some customers might require more time -consuming setup for their softwa re running on EC2 \ninstances.  \n\uf0b7 Instead of creating and terminating instances to meet demand, these customers turn off instances and \nthen turn them on again when they are needed.  \n\uf0b7 Eventually the patches on those instances become out of date, and they require updates. \nHow Cloudticity Automates Security Patches for Linux and Windows using Amazon \nEC2 Systems Manager and AWS Step Functions \n\uf0b7 As a provider of HIPAA -compliant solutions using AWS, Cloudticity always has security as the base of \neverything we do.  \n\uf0b7 HIPAA breaches would be an end-of-life event for most of our customers.  \n\uf0b7 Having been born in the cloud with automation in our DNA, Cloudticity embeds automation into all levels \nof infrastructure management including security, monitoring, and continuous compliance.  \n\uf0b7 As mandated by the HIPAA Security Rule (45 CFR Part 160 and Subparts A and C of Part 164), patches at \nthe operating system and application level are required to prevent security vulnerabilities.  \n\uf0b7 As a result, patches are a major component of infrastructure management. \n\uf0b7 Cloudticity strives to provide consistent and reliable services to all of our customers.  \n\uf0b7 As such, we needed to create a custom patching solution that supports both Linux and Windows.  \n\uf0b7 The minimum requirements for such a solution  were to read from a manifest file that contains instance \nnames and a list of knowledge base articles (KBs) or security packages to apply to each instance.  \n\uf0b7 Below is a simplified, high-level process overview. \n \nFig. : High-Level Process Overview", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1946, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "580670f1-4006-49fc-a83b-e944356aca7f": {"__data__": {"id_": "580670f1-4006-49fc-a83b-e944356aca7f", "embedding": null, "metadata": {"page_label": "68", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9cf06106-de31-4156-83e5-73df731496ba", "node_type": "4", "metadata": {"page_label": "68", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fe7a02ebf11a8c53fb6a5fc2426c6c9333ac89fc5477792d44aac609e9ce521f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 7 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 There were a few guidelines to be considered when designing the solution: \no Each customer has a defined maintenance window that patches can be completed within. As such, the \nsolution must be able to perform the updates within the specified maintenance window. \no The solu tion must be able to provide patches to one or many instances and finish within the \nmaintenance window. \no The solution should use as many AWS services as possible to reduce time -to-market and take \nadvantage of the built-in scaling that many AWS services provide. \no Code reusability is essential. \nCloud Security \n\uf0b7 A number of security threats are associated with cloud data services: not only traditional security threats, \nsuch as network eavesdropping, illegal invasion, and denial of service attacks, but also specific cloud \ncomputing threats, such as side channel attacks, virtualization vulnerabilities, and abuse of cloud services.  \n\uf0b7 The following security requirements limit the threats if we achieve that requirement than we can say our \ndata is safe on cloud. \n\uf0b7 Identity management  \no Every enterprise will have its own identity management system to control access to information and \ncomputing resources.  \no Cloud providers either integrate the customer\u2019s identity management system into their own \ninfrastructure, using federation or SSO technology, or a biometric -based identificat ion system, or \nprovide an identity management system of their own.  \no CloudID, for instance, provides privacy -preserving cloud -based and cross -enterprise biometric \nidentification.  \no It links the confidential information of the users to their biometrics and stores it in an encrypted \nfashion.  \no Making use of a searchable encryption technique, biometric identification is performed in encrypted \ndomain to make sure that the cloud provider or potential attackers do not gain access to any sensitive \ndata or even the contents of the individual queries. \n\uf0b7 Physical security  \no Cloud service providers physically secure the IT hardware (servers, routers, cables etc.) against \nunauthorized access, interference, theft, fires, floods etc. and ensure that essential supplies (such as \nelectricity) are sufficiently robust to minimize the possibility of disruption.  \no This is normally achieved by serving cloud applications from 'world-class' (i.e. professionally specified, \ndesigned, constructed, managed, monitored and maintained) data centers. \n\uf0b7 Personnel security  \no Various information security concerns relating to the IT and other professionals associated with cloud \nservices are typically handled through pre -, para- and post-employment activities such as security \nscreening potential recruits, security awareness and training programs, proactive. \n\uf0b7 Privacy  \no Providers ensure that all critical data (credit card numbers, for example) are masked or encrypted and \nthat only auth orized users have access to data in its entirety. Moreover, digital identities and \ncredentials must be protected as should any data that the provider collects or produces about \ncustomer activity in the cloud. \n\uf0b7 Confidentiality \no Data confidentiality is the pro perty that data contents are not made available or disclosed to illegal \nusers.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3382, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5af8f194-fe35-409e-adca-12377bc7cb3c": {"__data__": {"id_": "5af8f194-fe35-409e-adca-12377bc7cb3c", "embedding": null, "metadata": {"page_label": "69", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "144b1a39-1b3d-4ed9-8439-18288484aac4", "node_type": "4", "metadata": {"page_label": "69", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0c353c50ebfcf161641551a35c1f6d0837c19d9cde9486d4c13092867e86492e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 8 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \no Outsourced data is stored in a cloud and out of the owners' direct control. Only authorized users can \naccess the sensitive data while others, including CSPs, should not gain any information of the data.  \no Meanwhile, data owners expect to fully utilize cloud data services, e.g., data search, data \ncomputation, and data sharing, without the leakage of the data contents to CSPs or other adversaries. \n\uf0b7 Access controllability \no Access controllability means that a data owner can perform the selective restriction of access to her \nor his data outsourced to cloud.  \no Legal users can be authorized by the owner to access the data, while others cannot access it without \npermissions.  \no Further, it is d esirable to enforce fine -grained access control to the outsourced data, i.e., different \nusers should be granted different access privileges with regard to different data pieces.  \no The access authorization must be controlled only by the owner in untrusted cloud environments. \n\uf0b7 Integrity \no Data integrity demands maintaining and assuring the accuracy and completeness of data.  \no A data owner always expects that her or his data in a cloud can be stored correctly and trustworthily.  \no It means that the data should not be illegally tampered, improperly modified, deliberately deleted, or \nmaliciously fabricated.  \no If any undesirable operations corrupt or delete the data, the owner should be able to detect the \ncorruption or loss.  \no Further, when a portion of the outsourced data is corrupted or lost, it can still be retrieved by the data \nusers. \nCloudWatch \n\uf0b7 Amazon CloudWatch is a monitoring service for AWS cloud resources and the applications you run on \nAWS.  \n\uf0b7 You can use Amazon CloudWatch to collect and track metrics, collect and monitor log files, set alarms, and \nautomatically react to changes in your AWS resources.  \n\uf0b7 Amazon CloudWatch can monitor AWS resources such as Amazon EC2 instances, Amazon DynamoDB \ntables, and Amazon RDS DB instanc es, as well as custom metrics generated by your applications and \nservices, and any log files your applications generate.  \n\uf0b7 You can use Amazon CloudWatch to gain system -wide visibility into resource utilization, application \nperformance, and operational health.  \n\uf0b7 You can use these insights to react and keep your application running smoothly. \nCloudFormation \n\uf0b7 AWS CloudFormation provides a common language for you to describe and provision all the infrastructure \nresources in your cloud environment.  \n\uf0b7 CloudFormation allows you to use a simple text file to model and provision, in an automated and secure \nmanner, all the resources needed for your applications across all regions and accounts.  \n\uf0b7 This file serves as the single source of truth for your cloud environment.  \n\uf0b7 AWS CloudFormation is available at no additional charge, and you pay only for the AWS resources needed \nto run your applications.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3053, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f830c010-6a07-4fd4-9a32-75e86ea3a692": {"__data__": {"id_": "f830c010-6a07-4fd4-9a32-75e86ea3a692", "embedding": null, "metadata": {"page_label": "70", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a0598a4-cfd2-436d-b7ad-8966458e1471", "node_type": "4", "metadata": {"page_label": "70", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f53eb98bd611870a6401da225b694cf3751ef3520fd500f42cb1c7a8944168fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 9 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAdvantage of Cloud Formation \nModel it all \n\uf0b7 AWS CloudFormation allows you to model your entire infrastructure in a text file. This template becomes \nthe single source of truth for your infrastructure. This helps you to standardize infrastructure components \nused across your organization, enabling configuration compliance and faster troubleshooting. \nAutomate and deploy \n\uf0b7 AWS CloudFormation provisions your resources in a safe, repeatable manner, allowing you to build and \nrebuild your infrastructure and applications, without having to perform manual actions or write custom \nscripts. CloudFormation takes care of determining the right operations t o perform when managing your \nstack, and rolls back changes automatically if errors are detected. \nIt's just code \n\uf0b7 Codifying your infrastructure allows you to treat your infrastructure as just code. You can author it with \nany code editor, check it into a vers ion control system, and review the files with team members before \ndeploying into production. \nCloudTrail \n\uf0b7 AWS CloudTrail is an AWS service that helps you enable governance, compliance, and operational and risk \nauditing of your AWS account.  \n\uf0b7 Actions taken by a user, role, or an AWS service are recorded as events in CloudTrail.  \n\uf0b7 Events include actions taken in the AWS Management Console, AWS Command Line Interface, and AWS \nSDKs and APIs. \n\uf0b7 CloudTrail is enabled on your AWS account when you create it.  \n\uf0b7 When activity occurs in your AWS account, that activity is recorded in a CloudTrail event.  \n\uf0b7 You can easily view recent events in the CloudTrail console by going to Event history.  \n\uf0b7 For an ongoing record of activity and events in your AWS account, create a trail.  \n\uf0b7 Visibility into your AWS account activity is a key aspect of security and operational best practices.  \n\uf0b7 You can use CloudTrail to view, search, download, archive, analyze, and respond to account activity across \nyour AWS infrastructure.  \n\uf0b7 You can identify who  or what took which action, what resources were acted upon, when the event \noccurred, and other details to help you analyze and respond to activity in your AWS account.  \n\uf0b7 Optionally, you can enable AWS CloudTrail Insights on a trail to help you identify and respond to unusual \nactivity. \n\uf0b7 You can integrate CloudTrail into applications using the API, automate trail creation for your organization, \ncheck the status of trails you create, and control how users view CloudTrail events. \nWorking of CloudTrail \n\uf0b7 You can create two types of trails for an AWS account: \nA trail that applies to all regions \no When you create a trail that applies to all regions, CloudTrail records events in each region and delivers \nthe CloudTrail event log files to an S3 bucket that you specify.  \no If a region is added after you create a trail that applies to all regions that new region is automatically \nincluded, and events in that region are logged.  \no This is the default option when you create a trail in the CloudTrail console.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3148, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8a83375-342b-475c-819b-0e6182d3a313": {"__data__": {"id_": "d8a83375-342b-475c-819b-0e6182d3a313", "embedding": null, "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "adb0856b-f387-455a-9906-1f864643e493", "node_type": "4", "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "216baa6a0c48d816284285b8c5fd8e8530b2fca3253daec67b336f866a16a4ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e28a7288-e39f-4fc2-97a0-519ff44922c9", "node_type": "1", "metadata": {}, "hash": "c139304cea9d6a50ef6e1588da89df6ba160e299ae43d21e60449d233f8d522b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 10 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nA trail that applies to one region \no When you create a trail that applies to one region, CloudTrail records the events in that region only.  \no It then delivers the CloudTrail event log files to an Amazon S3 bucket that you specify.  \no If you create additional single trails, you can have  those trails deliver CloudTrail event log files to the \nsame Amazon S3 bucket or to separate buckets.  \no This is the default option when you create a trail using the AWS CLI or the CloudTrail API. \n\uf0b7 Beginning on April 12, 2019, trails will be viewable only in the AWS Regions where they log events.  \n\uf0b7 If you create a trail that logs events in all AWS Regions, it will appear in the console in all AWS Regions.  \n\uf0b7 If you create a trail that only logs events in a single AWS Region, you can view and manage it only in tha t \nAWS Region. \n\uf0b7 If you have created an organization in AWS Organizations, you can also create a trail that will log all events \nfor all AWS accounts in that organization.  \n\uf0b7 This is referred to as an organization trail. Organization trails can apply to all AWS Regions or one Region.  \n\uf0b7 Organization trails must be created in the master account, and when specified as applying to an \norganization, are automatically applied to all member accounts in the organization.  \n\uf0b7 Member accounts will be able to see the organization trail, but cannot modify or delete it.  \n\uf0b7 By default, member accounts will not have access to the log files for the organization trail in the Amazon \nS3 bucket. \n\uf0b7 You can c hange the configuration of a trail after you create it, including whether it logs events in one \nregion or all regions.  \n\uf0b7 You can also change whether it logs data or CloudTrail Insights events.  \n\uf0b7 Changing whether a trail logs events in one region or in all regions affects which events are logged. \n\uf0b7 By default, CloudTrail event log files are encrypted using Amazon S3 server-side encryption (SSE).  \n\uf0b7 You can also choose to encrypt your log files with an AWS Key Management Service (AWS KMS) key.  \n\uf0b7 You can store your log files in your bucket for as long as you want.  \n\uf0b7 You can also define Amazon S3 lifecycle rules to archive or delete log files automatically.  \n\uf0b7 If you want notifications about log file delivery and validation, you can set up Amazon SNS notifications. \n\uf0b7 CloudTrail typically delivers log files within 15 minutes of account activity.  \n\uf0b7 In addition, CloudTrail publishes log files multiple times an hour, about every five minutes.  \n\uf0b7 These log files contain API calls from services in the account that support CloudTrail. \nBenefits of CloudTrail \nSimplified compliance \n\uf0b7 With AWS CloudTrail, simplify your compliance audits by automatically recording and storing event logs \nfor actions made within your AWS account.  \n\uf0b7 Integration with Amazon CloudWatch Logs provides a convenient way to search through log data, identify \nout-of-compliance events, accelerate incident investigations, and expedite responses to auditor requests. \nSecurity analysis and troubleshooting \n\uf0b7 With AWS CloudTrail, you can discover and troubleshoot security and  operational issues by capturing a \ncomprehensive history of changes that occurred in your AWS account within a specified period of time.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3385, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e28a7288-e39f-4fc2-97a0-519ff44922c9": {"__data__": {"id_": "e28a7288-e39f-4fc2-97a0-519ff44922c9", "embedding": null, "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "adb0856b-f387-455a-9906-1f864643e493", "node_type": "4", "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "216baa6a0c48d816284285b8c5fd8e8530b2fca3253daec67b336f866a16a4ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8a83375-342b-475c-819b-0e6182d3a313", "node_type": "1", "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c3915eed6eb313ca9f4d4744b36cda72bad5f38da9863c11a5fb4a19b5679caa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Visibility into user and resource activity \n\uf0b7 AWS CloudTrail increases visibility into your user and resource activity by recording AWS Management \nConsole actions and API calls.", "mimetype": "text/plain", "start_char_idx": 3387, "end_char_idx": 3565, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e7ab5664-f663-4c91-a775-6cde33bcda76": {"__data__": {"id_": "e7ab5664-f663-4c91-a775-6cde33bcda76", "embedding": null, "metadata": {"page_label": "72", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b63b601-b0bc-4ddc-9d47-975420677787", "node_type": "4", "metadata": {"page_label": "72", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a36242c777e80534b353846d70ff681f7fb9b6b6024ea0f230f1fba6df8730ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 11 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 You can identify which users and accounts called AWS, the source IP address from which the calls were \nmade, and when the calls occurred. \nSecurity automation \n\uf0b7 AWS CloudTrail allows you track and automatically respond to account activity threatening the security of \nyour AWS resources.  \n\uf0b7 With Amazon CloudWatch Events integration, you can define workflows that execute when events that \ncan result in security vulnerabilities are detected.  \n\uf0b7 For example, you can create a workflow to add a specific policy to an Amazon S3 bucket when CloudTrail \nlogs an API call that makes that bucket public. \nOpsWorks \n\uf0b7 AWS OpsWorks is a configuration management service that provides managed instances of C hef and \nPuppet.  \n\uf0b7 Chef and Puppet are automation platforms that allow you to use code to automate the configurations of \nyour servers.  \n\uf0b7 OpsWorks lets you use Chef and Puppet to automate how servers are configured, deployed, and managed \nacross your Amazon EC2 instances or on-premises compute environments.  \n\uf0b7 OpsWorks has three offerings, AWS Opsworks for Chef Automate, AWS OpsWorks for Puppet Enterprise, \nand AWS OpsWorks Stacks. \nAWS OpsWorks for Chef Automate \n\uf0b7 AWS OpsWorks for Chef Automate is a fully managed configuration management service that hosts Chef \nAutomate, a suite of automation tools from Chef for configuration management, compliance and security, \nand continuous deployment.  \n\uf0b7 OpsWorks also maintains your Chef server by automatically patching, updating, a nd backing up your \nserver.  \n\uf0b7 OpsWorks eliminates the need to operate your own configuration management systems or worry about \nmaintaining its infrastructure.  \n\uf0b7 OpsWorks gives you access to all of the Chef Automate features, such as configuration and complian ce \nmanagement, which you manage through the Chef Console or command line tools like Knife.  \n\uf0b7 It also works seamlessly with your existing Chef cookbooks. \n\uf0b7 Choose AWS OpsWorks for Chef Automate if you are an existing Chef user. \nAWS OpsWorks for Puppet Enterprise \n\uf0b7 AWS OpsWorks for Puppet Enterprise is a fully managed configuration management service that hosts \nPuppet Enterprise, a set of automation tools from Puppet for infrastructure and application management.  \n\uf0b7 OpsWorks also maintains your Puppet master server by automatically patching, updating, and backing up \nyour server.  \n\uf0b7 OpsWorks eliminates the need to operate your own configuration management systems or worry about \nmaintaining its infrastructure.  \n\uf0b7 OpsWorks gives you access to all of the Puppet Enterprise features, which you manage through the Puppet \nconsole.  \n\uf0b7 It also works seamlessly with your existing Puppet code. \n\uf0b7 Choose AWS OpsWorks for Puppet Enterprise if you are an existing Puppet user.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2897, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "36f88654-f2c3-465d-adb8-ad4d3a7dfba5": {"__data__": {"id_": "36f88654-f2c3-465d-adb8-ad4d3a7dfba5", "embedding": null, "metadata": {"page_label": "73", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f0f81dfd-9dfe-410e-9b57-ccfbbdf49631", "node_type": "4", "metadata": {"page_label": "73", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "32444a2ed68ad307471254e2e9711c8dc1fd1af0479b435a70e1ce337c2c0ea6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-8 \u2013 Other AWS S ervices & Management \nServices \n \n 12 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nAWS OpsWorks Stacks \n\uf0b7 AWS OpsWorks Stacks is an application and server management service. With OpsWorks Stacks, you can \nmodel your application as a stack containing different layers, such as load balancing, database, and \napplication server.  \n\uf0b7 Within each layer, you can provision Amazon EC2 instances, enable automatic scaling, and configure your \ninstances with Chef recipes using Chef Solo.  \n\uf0b7 This allows you to automate tasks such as installing packages and programming languages or frameworks, \nconfiguring software, and more. \n\uf0b7 Choose AWS OpsWorks Stacks if you need a solution for application modeling and management. \nOpenID Connect (OIDC) \n\uf0b7 IAM OIDC identity providers are entities in IAM that describe an external identity provider (IdP) service \nthat supports the OpenID Connect (OIDC) standard, such as Google or Salesforce.  \n\uf0b7 You use an IAM OIDC identity provider when you want to establish trust between an OIDC-compatible IdP \nand your AWS account.  \n\uf0b7 This is useful when creating a mobile app or web application that requires access to AWS resources, but \nyou don't want to create custom sign-in code or manage your own user identities.  \n\uf0b7 You can create and manage an IAM OIDC identity provider using the AWS Management Console, the AWS \nCommand Line Interface, the Tools for Windows PowerShell, or the IAM API. \n\uf0b7 When you create an OpenID Connect (OIDC) identity provider in IAM, you must supply a thumbprint.  \n\uf0b7 IAM requires the thumbprint for the root certificate authority (CA) that signed the certificate used by the \nexternal identity provider (IdP).  \n\uf0b7 The thumbprint is a signature for the CA's certificate that was used to issue the certificate for the OIDC -\ncompatible IdP.  \n\uf0b7 When you create an IAM OIDC identity provider, you are trusting identities authenticated by that IdP to \nhave access to your AWS account.  \n\uf0b7 By supplying the CA's certificate thumbprint, you trust any certificate issued by that CA with the same DNS \nname as the one registered.  \n\uf0b7 This eliminates the need to update trusts in each account when you renew the IdP's signing certificate. \n\uf0b7 You can create an IAM OIDC identity provider with the AWS Command Line Interface, the Tools for \nWindows PowerShell, or the IAM API.  \n\uf0b7 When you use these methods, you must obtain the thumbprint manually and supply it to AWS.  \n\uf0b7 When you create an OIDC identity  provider with the IAM console, the console attempts to fetch the \nthumbprint for you.  \n\uf0b7 We recommend that you also obtain the thumbprint for your OIDC IdP manually and verify that the \nconsole fetched the correct thumbprint.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2754, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d34f8eee-e49d-4be2-b3f9-1dac2df36b47": {"__data__": {"id_": "d34f8eee-e49d-4be2-b3f9-1dac2df36b47", "embedding": null, "metadata": {"page_label": "74", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ff633c7-1183-4329-bb52-57fa2a400581", "node_type": "4", "metadata": {"page_label": "74", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f65ffd2c64c0a037c6c6151694e31b0cfdded7bd5cb9bd5850f3cfc6d79e0a75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-9 \u2013 AWS Billing & Dealing with Disaster \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nManaging Costs, Utilization and Tracking \n\uf0b7 The cloud allows you to trade capital expenses (such as data centers and physical servers) for variable \nexpenses, and only pay for IT as you consume it.  \n\uf0b7 And, because of the economies of scale, the variable expenses are much lower than what you would pay \nto do it yourself.  \n\uf0b7 Whether you were born in the cloud, or you are just starting your migration journey to the cloud, AWS \nhas a set of solutions to help you manage and optimize your spend. \n\uf0b7 During this unprecedented time, many businesses and organizations ar e facing disruption to their \noperations, budgets, and revenue.  \n\uf0b7 AWS has a set of solutions to help you with cost management and optimization.  \n\uf0b7 This includes services, tools, and resources to organize and track cost and usage data, enhance control \nthrough c onsolidated billing and access permission, enable better planning through budgeting and \nforecasts, and further lower cost with resources and pricing optimizations. \nAWS Cost Management Solutions \nOrganize and Report Cost and Usage Based on User-Defined Methods \n\uf0b7 You need complete, near real -time visibility of your cost and usage information to make informed \ndecisions.  \n\uf0b7 AWS equips you with tools to organize your resources based on your needs, visualize and analyze cost and \nusage data in a single pane of glass, a nd accurately chargeback to appropriate entities (e.g. department, \nproject, and product).  \n\uf0b7 Rather than centrally policing the cost, you can provide real -time cost data that makes sense to your \nengineering, application, and business teams.  \n\uf0b7 The detailed, allocable cost data allows teams to have the visibility and details to be accountable of their \nown spend. \nBilling with Built-in Control \n\uf0b7 Business and organization leaders need a simple and easy way to access AWS billing information, including \na spend summary, a breakdown of all service costs incurred by accounts across the organization, along \nwith discounts and credits.  \n\uf0b7 Customer can choose to consolidate your bills and take advantage of higher volume discounts based on \naggregated usage across your bills.  \n\uf0b7 Leaders also need to set appropriate guardrails in place so you can maintain control over cost, governance, \nand security.  \n\uf0b7 AWS helps orga nizations balance freedom and control by enabling the governance of granular user \npermission. \nImproved Planning with Flexible Forecasting and Budgeting \n\uf0b7 Businesses and organizations need to plan and set expectations around cloud costs for your projects, \napplications, and more.  \n\uf0b7 The emergence of the cloud allowed teams to acquire and deprecate resources on an ongoing basis, \nwithout relying on teams to approve, procure and install infrastructure.  \n\uf0b7 However, this flexibility requires organizations to adapt to th e new, dynamic forecasting and budgeting \nprocess.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3007, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f74155d-823d-47a1-85ba-bdce22fe0b57": {"__data__": {"id_": "5f74155d-823d-47a1-85ba-bdce22fe0b57", "embedding": null, "metadata": {"page_label": "75", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ea4b656-39b3-40fa-aa00-8c1b23cf16e0", "node_type": "4", "metadata": {"page_label": "75", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "346008d8e0e751109314481638afa0da4e674a9546f012a264a1b7fc12de958d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-9 \u2013 AWS Billing & Dealing with Disaster \n \n 2 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 AWS provides forecasts based on your cost and usage history and allows you to set budget threshold and \nalerts, so you can stay informed whenever cost and usage is forecasted to, or exceeds the threshold limit.  \n\uf0b7 You can also set reservation utilization and/or coverage targets for your Reserved Instances and Savings \nPlans and monitor how they are progressing towards your target. \nOptimize Costs with Resource and Pricing Recommendations \n\uf0b7 With AWS, customers can take control of your cost and continuously optimize your spend.  \n\uf0b7 There are a variety of AWS pricing models and resources you can choose from to meet requirements for \nboth performance and cost efficiency, and adjust as needed.  \n\uf0b7 When evaluating AWS services for your architectural and business needs, you will have the flexibility to \nchoose from a variety of elements, such as operating systems, instance types, availability zones, and \npurchase options.  \n\uf0b7 AWS offers resources optimization recommendations to simpli fy the evaluation process so you can \nefficiently select the cost-optimized resources.  \n\uf0b7 We also provide recommendations around pricing models (up to 72% with Reserved Instances and Savings \nPlans and up to 90% with Spot Instances) based on your utilization patterns, so you can further drive down \nyour cost without compromising workload performance. \nMonitor, Track, and Analyze Your AWS Costs & Usage \n\uf0b7 Appropriate management, tracking and measurement are fundamental in achieving the full benefits of \ncost optimization. \nAmazon CloudWatch \n\uf0b7 Amazon CloudWatch collects monitoring and operational data in the form of logs, metrics, and events, \nproviding you with a unified view of AWS resources, applications, and services that run on AWS and on -\npremises servers. \nAWS Trusted Advisor \n\uf0b7 AWS Trusted Advisor is an online tool that provides you real time guidance to help you provision your \nresources following AWS best practices. \nAWS Cost Explorer \n\uf0b7 AWS Cost Explorer has an easy-to-use interface that lets you visualize, understand, and manage your AWS \ncosts and usage over time. \nBottom Line Impact \n\uf0b7 As AWS provide large range of service and we can utilize it for our business on pay as you go basis so it \nwill save our cost and time. \n\uf0b7 Due to that company can reduce their cost and increase revenue by focusing on core work and other \nservice management is done by cloud providers. \n\uf0b7 It will create bottom line impact for organization. \nGeographic Concerns \n\uf0b7 The AWS Global Cloud Infrastructure is the most secure, extensive, and reliable cloud platform , offering \nover 175 fully featured services from data centers globally.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2788, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c88de0b-00a5-4b97-8b9f-62d1e7cf72c6": {"__data__": {"id_": "7c88de0b-00a5-4b97-8b9f-62d1e7cf72c6", "embedding": null, "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5aa79fa-2c16-4962-86d8-d67e34f342eb", "node_type": "4", "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "46e82db281da8388514f29a8e7e3bc42cbe7ab55ac6e03aea162eb45709b5335", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d0a7255f-0600-4e38-8c9a-5c99ea8c3a2b", "node_type": "1", "metadata": {}, "hash": "5bd842c9d1df16c629f06bd4479df473e299b8fa782740c79423008ebec039ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-9 \u2013 AWS Billing & Dealing with Disaster \n \n 3 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 Whether you need to deploy your application workloads across the globe in a single click, or you want to \nbuild and deploy specific applications closer to your end -users with single-digit millisecond latency, AWS \nprovides you the cloud infrastructure where and when you need it. \n\uf0b7 With millions of active customers and tens of thousands of partners globally, AWS has the largest and \nmost dynamic ecosystem.  \n\uf0b7 Customers across virtually every i ndustry and of every size, including start -ups, enterprises, and public \nsector organizations, are running every imaginable use case on AWS. \nFailure plans / Disaster Recovery (DR) \n\uf0b7 Our data is the most precious asset that we have and protecting it is our top priority.  \n\uf0b7 Creating backups of our data to an off shore data center, so that in the event of an on premise failure we \ncan switch over to our backup, is a prime focus for business continuity.  \n\uf0b7 As AWS says, \u2018Disaster recovery is a continual process of analy sis and improvement, as business and \nsystems evolve.  For each business service, customers need to establish an acceptable recovery point and \ntime, and then build an appropriate DR solution.\u2019 \n\uf0b7 Backup and DR on Cloud reduces costs by half as compared to main taining your own redundant data \ncenters. And if you think about it, it\u2019s really not that surprising.  \n\uf0b7 Imagine the kind of cost you would entail in buying and maintaining servers and data centers, providing \nsecure and stable connectivity and not to mention keeping them secure.  \n\uf0b7 You would also be underutilizing severs; and in times of unpredictable traffic rise it would be strenuous to \nset up new ones. To all these cloud provides a seamless transition reducing cost dramatically. \n4 Standard Approaches of Backup and Disaster Recovery Using Amazon Cloud  \n 1. Backup and Recovery \n\uf0b7 To recover your data in the event of any disaster, you must first have your data periodically backed up \nfrom your system to AWS.  \n\uf0b7 Backing up of data can be done through various mechanisms and your choice will be based on the RPO \n(Recovery Point Objective- So if your disaster struck at 2 pm and your RPO is 1 hr, your Backup & DR will \nrestore all data till 1 pm.) that will suit your business needs.  \n\uf0b7 AWS offers AWS Direct connect and Import Export services that allow for faster backup.  \n\uf0b7 For example, if you have a frequently changing database like say a stock market, then you will need a very \nhigh RPO. However if your data is mostly static with a low frequency of changes, you can opt for periodic \nincremental backup.  \n\uf0b7 Once your backup mechanisms are activated you can pre-configure AMIs (operating systems & application \nsoftware).  \n\uf0b7 Now when a disaster strikes, EC2 (Elastic Compute Capacity)  instances in the Cloud using EBS (Elastic Block \nStore) coupled with AMIs can access your data from the S3 (Simple Storage Service) buckets to revive your \nsystem and keep it going. \n2. Pilot Light Approach \n\uf0b7 The name pilot light comes from the gas heater analogy. Just as in a heater you have a small flame that is \nalways on, and can quickly ignite the entire furnace; a similar approach can be thought of about your data \nsystem.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d0a7255f-0600-4e38-8c9a-5c99ea8c3a2b": {"__data__": {"id_": "d0a7255f-0600-4e38-8c9a-5c99ea8c3a2b", "embedding": null, "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5aa79fa-2c16-4962-86d8-d67e34f342eb", "node_type": "4", "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "46e82db281da8388514f29a8e7e3bc42cbe7ab55ac6e03aea162eb45709b5335", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c88de0b-00a5-4b97-8b9f-62d1e7cf72c6", "node_type": "1", "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9e61bc846fb19a103d4daff7a20fc3d05a704583f2bdb41784918bed35fea20a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Just as in a heater you have a small flame that is \nalways on, and can quickly ignite the entire furnace; a similar approach can be thought of about your data \nsystem.  \n\uf0b7 In the preparatory phase your on premise database server mirrors data to data volumes on AWS. The \ndatabase server on cloud is always activated for frequent or continuous incremental backup.", "mimetype": "text/plain", "start_char_idx": 3161, "end_char_idx": 3523, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9173dd7f-89ec-44b6-8c8d-578ce1fc8340": {"__data__": {"id_": "9173dd7f-89ec-44b6-8c8d-578ce1fc8340", "embedding": null, "metadata": {"page_label": "77", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2dbf738b-e3eb-4456-b428-e5dadcf5faf4", "node_type": "4", "metadata": {"page_label": "77", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "970cd67b189366e4cdaae6c32e4730c902398194e5e44342fef75c041eb0348e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Unit-9 \u2013 AWS Billing & Dealing with Disaster \n \n 4 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \n\uf0b7 This core area is the pilot from our gas heater analogy. The application and caching server replic a \nenvironments are created on cloud and kept in standby mode as very few changes take place over time.  \n\uf0b7 These AMIs can be updated periodically. This is the entire furnace from our example. If the on premise \nsystem fails, then the application and caching servers get activated; further users are rerouted using elastic \nIP addresses to the ad hoc environment on cloud. Your Recovery takes just a few minutes. \n3. Warm Standby Approach \n\uf0b7 This Technique is the next level of the pilot light, reducing recovery time to almost zero.  \n\uf0b7 Your application and caching servers are set up and always activated based on your business critical \nactivities but only a minimum sized fleet of EC2 instances are dedicated.  \n\uf0b7 The backup system is not capable of handling production load, but can be used for testing, quality \nassurance and other internal uses.  \n\uf0b7 In the event of a disaster, when your on premise data center fails, two things happen.  \n\uf0b7 Firstly multiple EC2 instances are dedicated (vertical and horizontal scaling) to bring your application and \ncaching environment up to production load. ELB and Auto Scaling (for distributing traffic) are used to ease \nscaling up.  \n\uf0b7 Secondly using Amazon Route 53 user traffic is  rerouted instantly using elastic IP addresses and there is \ninstant recovery of your system with almost zero down time. \n4. Multi-Site Approach \n\uf0b7 Well this is the optimum technique in backup and DR and is the next step after warm standby.  \n\uf0b7 All activities in the preparatory stage are similar to a warm standby; except that AWS backup on Cloud is \nalso used to handle some portions of the user traffic using Route 53.  \n\uf0b7 When a disaster strikes, the rest of the traffic that was pointing to the on premise servers are rerouted to \nAWS and using auto scaling techniques multiple EC2 instances are deployed to handle full production \ncapacity.  \n\uf0b7 You can further increase the availability of your multi-site solution by designing Multi-AZ architectures. \nExamining Logs \n\uf0b7 It is necessary to examine the log files in order to locate an error code or other indication of the issue that \nyour cluster experienced.  \n\uf0b7 It may take some investigative work to determine what happened.  \n\uf0b7 Hadoop runs the work of the jobs in task attempts on various nodes in the cluster.  \n\uf0b7 Amazon EMR can initiate speculative task attempts, terminating the other task attempts that do not \ncomplete first.  \n\uf0b7 This generates significant activity that is logged to the controller, stderr and syslog log files as it happens.  \n\uf0b7 In addition, multiple tasks attempts are running simultaneously, but a log file can only display results \nlinearly. \n\uf0b7 Start by checking the bootstrap action logs for errors or unexpected configuration changes during the \nlaunch of the cluster.  \n\uf0b7 From there, look in the step logs to identify Hadoop jobs launched as part of a step with errors.  \n\uf0b7 Examine the Hadoop job logs to identify the failed task attempts.  \n\uf0b7 The task attempt log will contain details about what caused a task attempt to fail.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 3289, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aac797bd-48a1-4fe0-aad2-38d3c71aa0d7": {"__data__": {"id_": "aac797bd-48a1-4fe0-aad2-38d3c71aa0d7", "embedding": null, "metadata": {"page_label": "78", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cfc65701-b890-408b-a641-bc27885335ad", "node_type": "4", "metadata": {"page_label": "78", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "87e0af8f17fad3afeb9b9db97cd359f3c697ecc7c207d925fceb5ca500ffd1bf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "References \n \n 1 \n \nProf. Vijay M. Shekhat, CE Department | 2180712 \u2013 Cloud Infrastructure and Services \n \nBook \n1. Cloud Computing Bible, Barrie Sosinsky, John Wiley & Sons, ISBN-13: 978-0470903568. \n2. Mastering AWS Security, Albert Anthony, Packt Publishing Ltd., ISBN 978-1-78829-372-3. \n3. Amazon Web Services for Dummies, Bernard Golden, For Dummies, ISBN-13: 978- 1118571835. \nWebsites \n1. www.aws.amazon.com \n2. www.docs.aws.amazon.com \n3. www.bluepiit.com \n4. www.inforisktoday.com \n5. www.techno-pulse.com \n6. www.exelanz.com \n7. www.ibm.com \n8. www.iarjset.com/upload/2017/july-17/IARJSET%2018.pdf \n9. www.searchservervirtualization.techtarget.com \n10. www.docs.eucalyptus.com \n11. www.cloudacademy.com \n12. www.searchaws.techtarget.com \n13. www.searchsecurity.techtarget.com \n14. www.en.wikipedia.org/wiki/Cloud_computing_security \n15. www.znetlive.com \n16. www.en.wikipedia.org/wiki/Virtual_private_cloud \n17. www.resource.onlinetech.com \n18. www.globalknowledge.com \n19. www.blog.blazeclan.com/4-approaches-backup-disaster-recovery-explained-amazon-cloud \n20. www.zdnet.com/article/what-is-cloud-computing-everything-you-need-to-know-about-the-cloud \n21. www.javatpoint.com/introduction-to-cloud-computing \n22. www.javatpoint.com/history-of-cloud-computing \n23. www.allcloud.io/blog/6-cloud-computing-concerns-facing-2018 \n24. www.searchitchannel.techtarget.com/definition/cloud-marketplace \n25. www.en.wikipedia.org/wiki/Amazon_Web_Services \n26. www.msystechnologies.com/blog/cloud-orchestration-everything-you-want-to-know \n27. www.linuxacademy.com/blog/linux-academy/elasticity-cloud-computing \n28. www.searchitchannel.techtarget.com/definition/Eucalyptus \n29. www.geeksforgeeks.org/virtualization-cloud-computing-types \n30. www.cloudsearch.blogspot.com \n31. www.simplilearn.com/tutorials/aws-tutorial/aws-iam \n32. www.d1.awsstatic.com/whitepapers/aws-security-whitepaper.pdf \n33. www.resources.intenseschool.com/amazon-aws-understanding-ec2-key-pairs-and-how-they-are-used-\nfor-windows-and-linux-instances/ \n34. www.pagely.com/blog/amazon-ec2/ \n35. www.cloudflare.com/learning/cloud/what-is-multitenancy/ \n36. www.hevodata.com/blog/amazon-redshift-pros-and-cons/", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4edca1af-596b-45b8-bb03-8bfae277ee7c": {"__data__": {"id_": "4edca1af-596b-45b8-bb03-8bfae277ee7c", "embedding": null, "metadata": {"page_label": "1", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89345f47-f421-4f8d-9bca-ee4334046c3c", "node_type": "4", "metadata": {"page_label": "1", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ebd55c14683a1e8de99f23484592a4a58108a640a133580cf18882ce2188bcad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 1 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nHistory of JAVA. \n\uf0b7 Java was initially developed in 1991 named as \u201coak\u201d but was renamed \u201cJava\u201d in 1995. \n\uf0b7 Originally designed for small, embedded systems in electronic appliances like set-top boxes. \n\uf0b7 The primary motivation was the need for a platform-independent language that could be used \nto create software to be embedded in various consumer electronic devices. \n\uf0b7 Java programming language was originally developed by Sun Microsystems which  was \ninitiated by James Gosling and released in 1995 as core component of Sun Microsystems' Java \nplatform (Java 1.0 [J2SE]). \n\uf0b7 It promised Write Once, Run Anywhere (WORA), providing no -cost run -times on popular \nplatforms. \n\uf0b7 Java 2, new versions had multiple configurations built for different types of platforms. J2EE \nincluded technologies and APIs for enterprise applications typically run in server \nenvironments, while J2ME featured APIs optimized for mobile applications. \n\uf0b7 The desktop version was renamed J2S E. In 2006, for marketing purposes, Sun renamed new \nJ2 versions as Java EE, Java ME, and Java SE, respectively. \n\uf0b7 On 13 November 2006, Sun released much of Java as free and open -source software (FOSS), \nunder the terms of the GNU General Public License (GPL). \n\uf0b7 On 8 May 2007, Sun finished the process, making all of Java's core code free and open-source, \naside from a small portion of code to which Sun did not hold the copyright. \n \nWhat is Java? \n\uf0b7 Java is a programming language that: \n\uf0b7 Is exclusively object oriented \n\uf0b7 Has full GUI support \n\uf0b7 Has full network support \n\uf0b7 Is platform independent \n\uf0b7 Executes stand-alone or \u201con-demand\u201d in web browser as applets", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1739, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a45a1268-a23b-4dd6-8386-d337db643406": {"__data__": {"id_": "a45a1268-a23b-4dd6-8386-d337db643406", "embedding": null, "metadata": {"page_label": "2", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5204f85c-1384-45b1-bcc6-0c7e701c18da", "node_type": "4", "metadata": {"page_label": "2", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "994e609ed751c71f8ad6d3540ed16b6bf4fe7f7ddc60d632dfc1b6a9118d2384", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 2 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nJDK, JRE, Byte code & JVM. \n \n \n \n \n\uf0b7 Java Development Kit (JDK) \no JDK contains tools needed , \n\uf0a7 To develop the Java programs and  \n\uf0a7 JRE to run the programs.  \no The tools include compiler (javac.exe), Java application launcher (java.exe), \nAppletviewer, etc\u2026  \no Java application launcher (java.exe), \n\uf0a7 Opens a JRE, loads the class, and invokes its main method.  \n\uf0b7 Java Runtime Environment (JRE) \no The Java Runtime Environment (JRE) is required to run java applications.  \no It combines the Java Virtual Machine (JVM), platform core classes and supporting \nlibraries.  \no JRE is part of the Java Development Kit (JDK), but can be downloaded separately. \no It does not contain any development tools such as compiler, debugger, etc. \n\uf0b7 Byte code \no Byte code is intermediate representation of java source code. \no It produce by java compiler by compiling java source code. \no Extension for java class file or byte code  is  \u2018.class\u2019.  \no It is platform independent. \n \n \n \nCompiler \n(Javac.exe) \nJava \nApplication \n Launcher \n(java.exe), \nAppletViewer, \netc..) \nJava \nPackages \n(math, \nRuntime \nLibraries  \nJVM \nDevelopment tools \n JRE \nJDK", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1241, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca986b56-f434-47ee-ac26-e8091ce70991": {"__data__": {"id_": "ca986b56-f434-47ee-ac26-e8091ce70991", "embedding": null, "metadata": {"page_label": "3", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce1807f5-fa58-44d4-ad52-ff1e9f650138", "node_type": "4", "metadata": {"page_label": "3", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6c20ede8e8fc999110cc2284f58babb04e260b53b5249349971d3df38a09d5c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 3 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 JVM (Java Virtual Machine) \no JVM is virtual because It provides a machine interface that does not depend on the \noperating system and machine hardware architecture.  \no JVM interprets the byte code into the machine code.  \no JVM itself is platform dependent, but Java is Not. \n \n \nExplain features of JAVA. \nFeatures of java are discussed below: \n\u2022 The Features of Java programming are as below \n \n1. Simple \n2. Secure \n3. Portable \n4. Object-oriented \n5. Robust \n6. Multithreaded \n7. Architecture-natural \n8. Interpreted \n9. High performance \n10. Distributed \n11. Dynamic \n \n \nJava Code (.java) \nJAVAC Compiler \nByte Code (.class) \nJVM \n JVM \n JVM \nWindows \n Linux \n Mac", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 770, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0fbd9597-9d61-4320-8a41-02de374eae69": {"__data__": {"id_": "0fbd9597-9d61-4320-8a41-02de374eae69", "embedding": null, "metadata": {"page_label": "4", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "861c7347-7699-40a3-a71e-beb5176f4823", "node_type": "4", "metadata": {"page_label": "4", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cb9f98ed517e95a77a43645a6134f5f38fc1bf67380ed4bdf2b7b00df2b010d3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 4 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 Simple \no It\u2019s simple because it contains many features of other languages like C and C++  \no It also removed complexities like poin ters, Storage classes, goto statement and multiple \nInheritance. \n\uf0b7 Secure  \no Java is best known for its security. With Java, we can develop virus -free systems. Java is \nsecured because: \n1. No explicit pointer \n2. Java Programs run inside virtual machine sandbox \n3. Bytecode Verifier \n\uf0b7 Portable \no Java is portable because it facilitates you to carry the java bytecode to any platform. \n\uf0b7 Object oriented \no Java is Object-oriented programming language. Everything in Java is an object. \n\uf0b7 Robust \no Robust simply means strong. Java is robust because: \n1. It uses strong memory management. \n2. There are lack of pointers that avoids security problem. \n3. There is automatic garbage collection in java. \n4. There is exception handling and type checking mechanism in java. All these points makes \njava robust \n\uf0b7 Multithreaded \no A thread is like a separate program, executing concurrently.  \no We can write Java programs that deal with many tasks at once by defining multiple threads.  \no The main advantage of multi-threading is that it doesn't occupy memory for each thread.  \no It shares a common memory area. Threads are important for multi -media, Web applications \netc\u2026 \n\uf0b7 Architecture-neutral \no Java is architecture neutral because there is no implementation dependent features e.g. size \nof primitive types is fixed. \no Example : in c int o ccupy 2 byte for 32 bit OS and 4 bytes for 64 bit OS whereas in JAVA it \noccupy 4 byte for int both in 32 bit and 64 bit OS. \n\uf0b7 Interpreted \no Java enables the creation of cross -platform programs by compiling into an intermediate \nrepresentation called Java bytecode. \no This code can be executed on any system that implements the Java Virtual Machine. \n\uf0b7 High-Performance \no Most previous attempts at cross -platform solutions have done so at the expense of \nperformance.  \no As explained earlier, the Java bytecode  was carefully designed so that it would be easy to \ntranslate directly into native machine code for very high performance by using a just -in-time \ncompiler. \n\uf0b7 Dynamic \no Java programs carry with them substantial amounts of run-time type information that is used \nto verify and resolve accesses to objects at run time.  \no This makes it possible to dynamically link code in a safe and expedient manner.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2506, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1735010d-1585-4a4a-bc1c-b81220bd5889": {"__data__": {"id_": "1735010d-1585-4a4a-bc1c-b81220bd5889", "embedding": null, "metadata": {"page_label": "5", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1a27ae5-8d9c-4330-aec9-20b227981819", "node_type": "4", "metadata": {"page_label": "5", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5491e4dfd8428635d6ec7525e117dc7be6bd291ea114813f59dccfdccdd594d6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 5 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 Distributed \no Java is distributed because it facilitates us to create distributed applications in java.  \no RMI and EJB are used for creating distributed applications.  \no We may access files by calling the methods from any machine on the internet. \n\uf0b7 Platform Independent \no Java is a platform independent programming language,  because when you install JDK in the \nsystem then JVM is also installed automatically on the system.  \no For every operating system separate JVM is available which is capable to read the .class file \nor byte code.  \no When we compile Java code then .class file is generated by java compiler (javac) these codes \nare readable b y the JVM and every operating system have its own JVM so JVM is platform \ndependent but due to JVM java is platform independent. \n \nExplain Operators in JAVA \nSr. Operator Examples \n1 Arithmetic Operators +, -, *, /, % \n2 Relational Operators <, <=, >, >=, ==, != \n3 Logical Operators &&, ||, ! \n4 Assignment Operators =, +=, -=, *=, /= \n5 Increment and Decrement Operators ++, -- \n6 Conditional Operator ?: \n7 Bitwise Operators &, |, ^, <<, >> \n \nArithmetic Operator \n\uf0b7 An arithmetic operator performs basic mathematical calculations such as addition, \nsubtraction, multiplication, division etc. on numerical values (constants and variables). \n\uf0b7 Increment / Decrement Operators \no Increment and decrement operators are unary operators that add or subtract one, \nto or from their operand. \no the increment operator ++ increases the value of a variable by 1, e.g. a++ means \na=a+1 \no the decrement operator -- decreases the value of a variable by 1. e.g. a\u2013\u2013 means \na=a\u20131 \no If ++ operator is used as a prefix (++a) then the value of a is incremented by 1 first \nthen it returns the value. \no If ++ operator is used as a postfix (a++) then the value of a is returned first then it \nincrements value of a by 1.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1963, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "22428784-9b75-46ca-b7db-46562ba7f158": {"__data__": {"id_": "22428784-9b75-46ca-b7db-46562ba7f158", "embedding": null, "metadata": {"page_label": "6", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e98addd-2a04-4921-97f3-dfb6ffa1b013", "node_type": "4", "metadata": {"page_label": "6", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "649ad5a8fb1580aa99547678ac5fcfeb6519c3470bae3dda2d1d3f4a525ebfec", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 6 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOperator  Description  Example  \n+ Addition - Adds values on either side of the operator A + B will give \n30 \n- Subtraction - Subtracts right hand operand from left hand operand A - B will give  \n-10 \n* Multiplication - Multiplies values on either side of the operator A * B will give \n200 \n/ Division - Divides left hand operand by right hand operand B / A will give \n2 \n% Modulus - Divides left hand operand by right hand operand and returns \nremainder \nB % A will \ngive 0 \n++ Increment - Increases the value of operand by 1 B++ gives 21 \n-- Decrement - Decreases the value of operand by 1 B-- gives 19 \nArithmetic Operators in JAVA, consider A as 10 & B as 20 \n \nExpression Evaluation (Let\u2019s say a=10, c=15) \nb = a++ Value of b would be 10 and value of a would be 11. \nb = ++a Value of b & a would be 11. \nb = a-- Value of b would be 10 and value of a would be 9. \nb = --a Value of b & a would be 9. \nIncrement / Decrement Operators \nRelational Operators \n\uf0b7 A relational operators are used to compare two values. \n\uf0b7 They check the relationship between two operands, if the relation is true, it returns 1 ; if the \nrelation is false, it returns value 0. \n\uf0b7 Relational expressions are used in decision statements such as if, for, while, etc \nOperator  Description  Example  \n== Checks if the values of two operands are equal or not, if yes then \ncondition becomes true. \n(A == B) is not \ntrue. \n!= Checks if the values of two operands are equal or not, if values are not \nequal then condition becomes true. \n(A != B) is \ntrue. \n> Checks if the value of left operand is greater than the value of right \noperand, if yes then condition becomes true. \n(A > B) is not \ntrue. \n< Checks if the value of left operand is less than the value of right \noperand, if yes then condition becomes true. \n(A < B) is true. \n>= Checks if the value of left operand is greater than or equal to the value \nof right operand, if yes then condition becomes true. \n(A >= B) is not \ntrue. \n<= Checks if the value of left operand is less than or equal to the value of \nright operand, if yes then condition becomes true. \n(A <= B) is \ntrue. \nRelational Operators in JAVA, consider A as 10 & B as 20", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2266, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "11e1fa9a-39d1-4e3f-ab43-fc81b536a520": {"__data__": {"id_": "11e1fa9a-39d1-4e3f-ab43-fc81b536a520", "embedding": null, "metadata": {"page_label": "7", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c1709054-8668-45f3-9eab-9a4e260f987f", "node_type": "4", "metadata": {"page_label": "7", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "32a648a292f64d601a816a3a51818ca2cfaa95267c92a02cee4df61c5e089ee2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 7 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nBitwise Operators \nOperator Description Example \n& Binary AND Operator copies a bit to the result if it \nexists in both operands. \n(A & B) will give 12 which is 0000 \n1100 \n| Binary OR Operator copies a bit if it exists in either \noperand. \n(A | B) will give 61 which is 0011 \n1101 \n^ Binary XOR Operator copies the bit if it is set in one \noperand but not both. \n(A ^ B) will give 49 which is 0011 \n0001 \n~ Binary Ones Complement Operator is unary and \nhas the effect of 'flipping' bits. \n(~A ) will give -61 which is 1100 \n0011 in 2's complement form \ndue to a signed binary number. \n<< Binary Left Shift Operator. The left operands value \nis moved left by the number of bits specified by the \nright operand. \nA << 2 will give 240 which is 1111 \n0000 \n>> Binary Right Shift Operator. The left operands value \nis moved right by the number of bits specified by \nthe right operand. \nA >> 2 will give 15 which is 1111 \n>>> Shift right zero fill operator. The left operands value \nis moved right by the number of bits specified by \nthe right operand and shifted values are filled up \nwith zeros. \nA >>>2 will give 15 which is 0000 \n1111 \nBitwise Operators in JAVA, consider A as 60 & B as 13 \n \nLogical Operators \n\uf0b7 Logical operators are decision making operators. \n\uf0b7 They are used to combine two expressions and make decisions. \n\uf0b7 An expression containing logical operator returns either 0 or 1 depending upon whether \nexpression results false or true.  \n \nOperator  Description  Example  \n&& Called Logical AND operator. If both the operands are non -zero, then \nthe condition becomes true. \n(A && B) is \nfalse. \n|| Called Logical OR Operator. If any of the two operands are non -zero, \nthen the condition becomes true. \n(A || B) is \ntrue. \n! Called Logical NOT Operator. Use  to reverses the logical state of its \noperand. If a condition is true then Logical NOT operator will make false. \n!(A && B) is \ntrue. \nLogical Operators in JAVA, consider A as true & B as false", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2065, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c5139829-9765-49fa-adeb-0047468129ad": {"__data__": {"id_": "c5139829-9765-49fa-adeb-0047468129ad", "embedding": null, "metadata": {"page_label": "8", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "696153ec-8995-42f8-a354-86d8817bfd1d", "node_type": "4", "metadata": {"page_label": "8", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5e5d0993c16d74f99c5f93ae571956f8a9187800d517ac0a55a07cd6f3d60eae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 8 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nAssignment Operators \n\uf0b7 Assignment operators are used to assign a new value to the variable.  \n\uf0b7 The left side operand of the assignment operator is a variable and right side operand of the \nassignment operator is a value or a result of an expression. \n\uf0b7 Meaning of = in Maths and Programming is different.  \no Value of LHS & RHS is always same in Math. \no In programming, value of RHS is assigned to the LHS \nOperator  Description  Example  \n= Simple assignment operator, Assigns values from right side \noperands to left side operand \nC = A + B will assign \nvalue of A + B into C \n+= Add AND assignment operator, It adds right operand to the \nleft operand and assign the result to left operand \nC += A is equivalent to C \n= C + A \n-= Subtract AND assignment operator, It subtracts right \noperand from the left operand and assign the result to left \noperand \nC -= A is equivalent to C \n= C - A \n*= Multiply AND assignment operator, It multiplies right \noperand with the left operand and assign the result to left \noperand \nC *= A is equivalent to C \n= C * A \n/= Divide AND assignment operator, It divides left operand with \nthe right operand and assign the result to left operand \nC /= A is equivalent to C \n= C / A \n%= Modulus AND assignment operator, It takes modulus using \ntwo operands and assign the result to left operand \nC %= A is equivalent to  \nC = C % A \n<<= Left shift AND assignment operator C <<= 2 is same as C = C \n<< 2 \n>>= Right shift AND assignment operator C >>= 2 is same as C = C \n>> 2 \n&= Bitwise AND assignment operator C &= 2 is same as C = C \n& 2 \n^= bitwise exclusive OR and assignment operator C ^= 2 is same as C = C ^ \n2 \n|= bitwise inclusive OR and assignment operator C |= 2 is same as C = C | \n2 \nAssignment Operators in JAVA", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1854, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "718b47a3-157a-414d-9fdd-67fbc40646ee": {"__data__": {"id_": "718b47a3-157a-414d-9fdd-67fbc40646ee", "embedding": null, "metadata": {"page_label": "9", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06ae15e2-be6e-4207-8d25-2d34c5c19fb8", "node_type": "4", "metadata": {"page_label": "9", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "21fbf25747f9d034daaf4edf818728565d16b2984d37b0444c2db9c73d5cb353", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 9 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOperator Precedence & Associativity \n\uf0b7 How does java evaluate 1 + 10 * 9 ? \n(1 + 10 ) * 9  = 99   OR    1  + (10 * 9) = 91 \n\uf0b7 To get the correct answer for the given problem Java came up with Operator precedence. ( \nmultiplication have higher precedence than addition so correct answer will be 91 in this case) \n\uf0b7 For Operator, associativity means that when th e same operator appears in a row, then to \nwhich direction the expression will be evaluated. \n \nCategory  Operator  Associativity  \nPostfix  () [] . (dot operator) Left to right  \nUnary  ++ - - ! ~ Right to left  \nMultiplicative   * / %  Left to right  \nAdditive   + -  Left to right  \nShift   >> >>> <<   Left to right  \nRelational   > >= < <=   Left to right  \nEquality   == !=  Left to right  \nBitwise AND  &  Left to right  \nBitwise XOR  ^  Left to right  \nBitwise OR  |  Left to right  \nLogical AND  &&  Left to right  \nLogical OR  ||  Left to right  \nConditional  ?:  Right to left  \nAssignment  = += -= *= /= %= >>= <<= &= ^= |=  Right to left  \nComma  ,  Left to right  \n \n\uf0b7 Operators Precedence and Associativity are two characteristics of operators that determine \nthe evaluation order of sub-expressions in absence of brackets. \n\uf0b7 Operator precedence determines which operation is performed first in an expression with \nmore than one operators with different precedence. \n\uf0b7 a=10 + 20 * 30 is calculated as 10 + (20 * 30) and not as (10 + 20) * 30 so answer is 610. \n\uf0b7 Operators Associativity is used when two operators of same precedence appear in an \nexpression. Associativity can be either Left to Right (L to R) or Right to Left (R to L). \n\uf0b7 E.g. a=100 / 10 * 10 \nIf Left to Right means (100 / 10) * 10 then answer is 100 \nIf Right to Left means 100 / (10 * 10) then answer is 1 \nDivision (/) & Multiplication (*) are Left to Right associative so the answer is 100.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1936, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9e89426-c090-43b1-9e40-2bf6df420dd7": {"__data__": {"id_": "d9e89426-c090-43b1-9e40-2bf6df420dd7", "embedding": null, "metadata": {"page_label": "10", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e625475-80e7-49a2-9a20-9b9a5a6f56f5", "node_type": "4", "metadata": {"page_label": "10", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6adc8a1c51539912823303f7dbf8fb783338c5537febdccbb108b5f97d27b13c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 10 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nExplain short circuit operators. \n\uf0b7 Java provides two interesting Bo olean operators not found in many other computer languages. \nThese are secondary versions of the Boolean AND and OR operators, and are known as \nshortcircuit logical operators. \n\uf0b7 The OR operator results in true when A is true, no matter what B is. Similarly, t he AND operator \nresults in false when A is false, no matter what B is. If you use the || and && forms, rather than \nthe | and & forms of these operators, Java will not bother to evaluate the right -hand operand \nwhen the outcome of the expression can be determined by the left operand alone. \n\uf0b7 This is very useful when the right-hand operand depends on the value of the left one in order to \nfunction properly. For example, the following code fragment shows how you can take advantage \nof short -circuit logical evaluati on to be sure that a division operation will be valid before \nevaluating it: \nif (denom != 0 && num / denom > 10) \n\uf0b7 Since the short-circuit form of AND (&&) is used, there is no risk of causing a run -time exception \nwhen denom is zero. If this line of code were written using the single & version of AND, both sides \nwould be evaluated, causing a run-time exception when denom is zero. It is standard practice to \nuse the short -circuit forms of AND and OR in cases involving Boolean logic, leaving the single -\ncharacter versions exclusively for bitwise operations. However, there are exceptions to this rule. \nFor example, consider the following statement: \nif(c==1 & e++ < 100) d = 100) \n\uf0b7 Here, using a single & ensures that the increment operation will be applied to e whether c is equal \nto 1 or not. \n \n \nExplain primitive Data types of JAVA. \nJava defines 8 primitive types: \nData Type Size Range Example \nbyte 1 Byte -128 to 127 byte  a = 10; \nshort 2 Bytes -32,768 to 32,767 short a = 200; \nint 4 Bytes -2,147,483,648 to 2,147,483,647 int a = 50000; \nlong 8 Bytes -9,223,372,036,854,775,80 to 9,223,372,036,854,775,807 long a = 20; \nfloat 4 Bytes 1.4e-045 to 3.4e+038 float a = 10.2f; \ndouble 8 Bytes 4.9e-324 to 1.8e+308 double a = 10.2; \nchar 2 Bytes 0 to 65536  (Stores ASCII of character) char a = \u2018a\u2019; \nboolean Not \ndefined \n true or false boolean a = true;", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2325, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2bcc3295-5e4f-44ed-be33-eca078f1daa7": {"__data__": {"id_": "2bcc3295-5e4f-44ed-be33-eca078f1daa7", "embedding": null, "metadata": {"page_label": "11", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78cee554-7b6f-4c00-801d-c6834655dc37", "node_type": "4", "metadata": {"page_label": "11", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a3096a26bc4d33a3389d592a9aa73a33a930e3f9b1ad912ae0d480682bd56c23", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 11 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 byte \no Smallest integer type \no It is a signed 8-bit type (1 Byte) \no Range  is -128 to 127 \no Especially useful when working with stream of data from a network or file \no Example:  byte b = 10; \n\uf0b7 short  \no short is signed 16-bit (2 Byte) type \no Range : -32768 to 32767 \no It is probably least used Java type \no Example: short vId = 1234; \n\uf0b7 int \no The most commonly used type \no It is signed 32-bit (4 Byte) type \no Range: -2,147,483,648 to 2,147,483,647 \no Example: int a = 1234; \n\uf0b7 long \no long is signed 64-bit (8 Byte) type \no It is useful when int type is not large enough to hold the desired value \no Example: long soconds = 1234124231; \n\uf0b7 char \no It is 16-bit (2 Byte) type \no Range: 0 to 65,536 \no Example: char first = \u2018A\u2019;  char second = 65; \n\uf0b7 float \no It is 32-bit (4-Byte) type \no It specifies a single-precision value \no Example:  float price = 1234.45213f \n\uf0b7 double \no It uses 64-bit (8-Byte) \no All math functions such as sin(),cos(),sqrt() etc\u2026 returns double value \no Example: double pi = 3.14141414141414; \n\uf0b7 boolean \no The boolean data type has only two possible values: true and false. \no This data type represents one bit of information, but its \"size\" isn't something that's precisely \ndefined.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1320, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70e1de84-e2b5-49ff-a92d-223e25d32867": {"__data__": {"id_": "70e1de84-e2b5-49ff-a92d-223e25d32867", "embedding": null, "metadata": {"page_label": "12", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac10c795-8942-4d10-b0f9-bd0fb9115bb5", "node_type": "4", "metadata": {"page_label": "12", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "305d017d2d1157a72373cb508ab863a2aeecd63e511c42718213303d43e36869", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 12 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nExplain Variable in Java \n\uf0b7 The variable is the basic unit of storage in a java program.  \n\uf0b7 A variable is defined by the combination of identifiers, a type and an optional initialize.  \n\uf0b7 All variables have a scope, which defines their visibility and a life time. \n\uf0b7 Naming Rules for a variable: - \n\uf0a7 It should start with a lowercase letter such as id, name. \n\uf0a7 It should not start with the special characters like & (ampersand), $ (dollar), _ (underscore). \n\uf0a7 If the name contains multiple words, start it with the lowercase letter followed by an \nuppercase letter such as firstName, lastName. \n\uf0a7 Avoid using one-character variables such as x, y, z. \n\uf0b7 Declaring a Variable: - \n\uf0a7 All variables must be declared before they can be used. The basic form of a variable \ndeclaration is shown here. \n\uf0a7 Type identifier [= value] [, identifier [=value]...]; \n\uf0a7 Int a,b,c; // declare 3 integers \n\uf0a7 Byte z = 22; // initialize z \n\uf0a7 Char x = \u2018X\u2019; // the variable x has the value \u2018X\u2019  \n \nEscape Sequences \n\uf0b7 Escape sequences in general are used to signal an alternative interpretation of a series of \ncharacters. \n\uf0b7 For example, if you want to put quotes within quotes you must use the escape sequence, \\\", \non the interior quotes. \nSystem.out.println(\"Good Morning \\\"World\\\" \"); \nEscape Sequence Description \n\\\u2019 Single quote \n\\\u201d Double quote \n\\\\ Backslash \n\\r Carriage return \n\\n New Line \n\\t Tab", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1483, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d1517016-271f-4d24-9c8d-29287965a684": {"__data__": {"id_": "d1517016-271f-4d24-9c8d-29287965a684", "embedding": null, "metadata": {"page_label": "13", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7833e948-0bea-4be2-a28f-f7b8fd2d9d81", "node_type": "4", "metadata": {"page_label": "13", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e451fb7dd6cb79c638997e4fc40ed029120c203706a250ae303d49d9f851748e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 13 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nProgram Structure, Compilation and Run Process \n \n\uf0b7 Simple Java Program Structure \n \npublic class Example \n { \n  public static void main(String args[]) \n  { \n   System.out.println(\u201cFirst Example\u201d); \n  } \n } \n \n\uf0b7 class Example \n Here name of the class is Example. \n\uf0b7 public static void main(String args[]) \n\uf0a7 public: The public keyword is an access specifier, which means that the  content of \nthe following block accessible from all other classes. \n\uf0a7 static: The keyword static allows main() to be called without having to  instantiate \na particular instance of a class. \n\uf0a7 void: The keyword void tells the compiler that main() does not return a  value. The \nmethods can return value. \n\uf0a7 main(): main is a method called when a java application begins, \n\uf0a7 String args [] \nDeclares a parameter named args, which is an array of instance of the class string. \nArgs[] receives any command-line argument present when the program is executed. \n\uf0b7 System.out.println() \n\uf0a7 System is predefined class that provides access to the system. \n\uf0a7 Out is the output stream that is connected to the console. \n\uf0a7 Output is accomplished by the built -in println() method. Println() displays the string \nwhich is passed to it. \n \n\uf0b7 Compilation of Java Program \n \n \nFigure 1.4. Java Program Compilation Process \n \n \n \n \nExample\n.java \nExample\n.class javac java \nSource Code bytecode compiler bytecode file Interpreter (VM)", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a356a7b9-17fe-4ab1-9278-8a8507cf6a25": {"__data__": {"id_": "a356a7b9-17fe-4ab1-9278-8a8507cf6a25", "embedding": null, "metadata": {"page_label": "14", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fefc01b9-e391-43f2-9688-a6adf7ce4991", "node_type": "4", "metadata": {"page_label": "14", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "834027c1d6836844df2e4641c9eb31f87c70be0c8d3fbc77a13e18b0434cf0f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 14 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0a7 Command 1: Javac Example.java  \nThis command will compile the source file and if the compilation is successful, it will \ngenerate a file named example.class containing bytecode. Java compilers translate \njava program to bytecode form. \n\uf0a7 Command 2: Java Example  \n The command called \u2018java\u2019 takes the bytecode and runs the bytecode on JVM  \n\uf0a7 Output \n First Example \nType Casting \n\uf0b7 Assigning a value of one type to a variable of another type is known as Type Casting. \n\uf0b7 In Java, type casting is classified into two types, \n\uf0b7 Widening/Automatic Type Casting (Implicit) \n \n            Widening/Automatic Type Casting (Implicit) \n \nNarrowing Type Casting (Explicitly done) \nAutomatic Type Casting \n\uf0b7 When one type of data is assigned to other type of variable , an automatic type conversion \nwill take place if the following two conditions are satisfied: \n\uf0b7 The two types are compatible \n\uf0b7 The destination type is larger than the source type \n\uf0b7 Such type of casting is called \u201cwidening conversion\u201d. \n\uf0b7 Example: \nint can always hold values of byte and short \n \n \n \n \npublic static void main(String[] args) { \nbyte b = 5; \n// \u221a this is correct \nint a = b; \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1254, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab2f3092-86f9-4a30-ba1d-1f4bf76fa8b3": {"__data__": {"id_": "ab2f3092-86f9-4a30-ba1d-1f4bf76fa8b3", "embedding": null, "metadata": {"page_label": "15", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "96ed40d4-f957-4dd1-8b71-62ad5944e4cf", "node_type": "4", "metadata": {"page_label": "15", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4b1aaf4a852f86fafebd0b03b5a44cf7383b9192c810fce3c1b0b7ef17b2b69b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1 - Basics of Java \n \n 15 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nCasting Incompatible Types \n\uf0b7 To create a conversion between two incompatible types, you must use a cast \n\uf0b7 A cast is an explicit type conversion. \n\uf0b7 Such type is called \u201cnarrowing conversion\u201d. \n\uf0b7 Syntax:(target-type) value \n\uf0b7 Example: \n \npublic static void main(String[] args) { \nint a = 5; \n// \u00d7 this is not correct \nbyte b = a;   \n// \u221a this is correct \nbyte b = (byte)a ;  \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 475, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dfc10e13-b91b-49f3-93d3-56fe48cfac82": {"__data__": {"id_": "dfc10e13-b91b-49f3-93d3-56fe48cfac82", "embedding": null, "metadata": {"page_label": "16", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9556498-df47-4918-ad36-bf1595044d6c", "node_type": "4", "metadata": {"page_label": "16", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5151232f91a20a7687298602ca9e0a16c4584d7553bac6844224f9f3cdf18bcc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 1 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nDecision Making Statements \n\uf0b7 Compiler executes program statements sequentially. \n\uf0b7 Decision making statements are used to control the flow of program execution. \n\uf0b7 It allows us to control whether a set of program statement should be executed or not. \n\uf0b7 It evaluates condition or logical expression first and based on its result (true or false), the \ncontrol is transferred to the particular statement. \n\uf0b7 If result is true then it takes one path else it takes another path. \n \nCommonly used decision making statements are: \n1. One way Decision:   if  (Also known as simple if) \n2. Two way Decision:  if\u2026else \n3. Multi way Decision:  if\u2026else if\u2026else if\u2026else \n4. Decision within Decision: nested if \n5. Two way Decision:  ?: (Conditional Operator) \n6. n-way Decision:  switch\u2026case \n  \nIf Statement \n\uf0b7 if statement is the most simple decision-making statement also known as simple if. \n\uf0b7 if statement consists of a Boolean expression followed by one or more statements. \n\uf0b7 If the expression is true, then 'statement-inside' will be executed, otherwise \n'statement-inside' is skipped and only 'statement-outside' will be executed. \n\uf0b7 It is used to decide whether a block of statements will be executed or not i.e. if a \ncertain condition is true then a block of statement is executed otherwise not.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1419, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9bb7289-dcfa-4922-a8cb-85c492f8b691": {"__data__": {"id_": "c9bb7289-dcfa-4922-a8cb-85c492f8b691", "embedding": null, "metadata": {"page_label": "17", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5225adbb-dd33-43c3-abb6-b3a31f2ba2ed", "node_type": "4", "metadata": {"page_label": "17", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "640fb31a459638ff78a88e504a0c899c02db85b7b1dcd8481acacd0061099812", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 2 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nWAP to print if a number is positive \n1. import java.util.*; \n2. class MyProgram{  \n3. public static void main (String[] args){ \n4. int x; \n5. Scanner sc = new Scanner(System.in); \n6.     x = sc.nextInt(); \n7.     if(x > 0){ \n8.       System.out.println(\"number is a positive\"); \n9.     } \n10. } \nWAP to print if a number is odd or even \n1. import java.util.*; \n2. class MyProgram{  \n3. public static void main (String[] args){ \n4. int x; \n5. Scanner sc = new Scanner(System.in); \n6.     x = sc.nextInt(); \n7.     if( x % 2 == 1 ){ \n8.      System.out.println(\"number is a odd\"); \n9.     } \n10. if( x % 2 == 0 ){ \n11.      System.out.println(\"number is a even\"); \n12.     } \n13. } \n14.  \n \nIf\u2026else: Two way Decision \n\uf0b7 For a simple if, if a condition is true, the compiler executes a block of statements, if \ncondition is false then it doesn\u2019t do anything. \n\uf0b7 What if we want to do something when the condition is false? if\u2026else is used for the \nsame. \n\uf0b7 If the 'expression' is true then the 'statement-block-1' will get executed else 'statement-\nblock-2' will be executed \n \n \n \n \n \n \n \n \nif(condition)  \n{ \n// statement-block-1 \n// to execute if condition is \ntrue \n} \nelse \n{ \n// statement-block-2 \n// to execute if condition is \nfalse \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1393, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7cb82b0-5352-4950-a5e4-8823b87d95c1": {"__data__": {"id_": "b7cb82b0-5352-4950-a5e4-8823b87d95c1", "embedding": null, "metadata": {"page_label": "18", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6cfebddf-e926-44f2-a4d1-abda904341be", "node_type": "4", "metadata": {"page_label": "18", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "90695b6f392aed0e721ea6d2fb85d0c8aaeb5d5f3376cc4f6994f37766ad5f3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 3 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n WAP to print if a number is positive \n1. import java.util.*; \n2. class MyProgram{  \n3. public static void main (String[] args){ \n4. int x; \n5. Scanner sc = new Scanner(System.in); \n6. x = sc.nextInt(); \n7. if (x > 0){ \nSystem.out.println(\"Number is positive\"); \n8. }//if \nelse{ \n9. System.out.println(\"Number is negative\"); \n}//else \n}//main \n10. }//class \n \n \nWAP to print if a number is odd or even \n1. import java.util.*; \n2. class MyProgram{  \n3. public static void main (String[] args){ \n4.  int x; \n5.  Scanner sc = new Scanner(System.in); \n6.     x = sc.nextInt(); \n7.     if( x % 2 == 1 ){ \n8.      System.out.println(\"number is a odd\"); \n9.     } \n10.     else{ \n     System.out.println(\"number is a even\"); \n11.     } \n12. } \n13.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 864, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c3da5861-c3ed-4929-aa8f-df31fc0f5f92": {"__data__": {"id_": "c3da5861-c3ed-4929-aa8f-df31fc0f5f92", "embedding": null, "metadata": {"page_label": "19", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6ecc8c1-6a8b-4059-adaf-4ba635c13943", "node_type": "4", "metadata": {"page_label": "19", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "94249d207740e67037a920587afaeacc497e547046107bfe341bd611a3d098ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 4 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n if-else-if ladder \n\uf0b7 if\u2026else if\u2026else statement is also known as if-else-if ladder which is used for multi way \ndecision making. \n\uf0b7 It is used when there are more than two different conditions. \n\uf0b7 It tests conditions in a sequence, from top to bottom.  \n\uf0b7 If first condition is true then the associated block with if statement is executed and rest \nof the conditions are skipped. \n\uf0b7 If condition is false then then the next if condition will be tested, if it is true then the \nassociated block is executed and rest of the conditions are skipped. Thus it checks till last \ncondition. \n\uf0b7 Condition is tested only and only when all previous conditions are false. \n\uf0b7 The last else is the default block which will be executed if none of the conditions are \ntrue. \n\uf0b7 The last else is not mandatory. If there are no default statements then it can be skipped. \n \n \n \n \nif(condition 1) \n{ \n     statement-block1; \n} \nelse if(condition 2) \n{ \n     statement-block2; \n} \nelse if(condition 3) \n{ \n     statement-block3; \n} \nelse if(condition 4) \n{ \n     statement-block4; \n} \nelse \n     default-statement;", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1217, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7fdb741a-7973-4b5c-8af4-a3830c022963": {"__data__": {"id_": "7fdb741a-7973-4b5c-8af4-a3830c022963", "embedding": null, "metadata": {"page_label": "20", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32b8c4d9-d720-47cf-a0df-1b4e8af5e3a4", "node_type": "4", "metadata": {"page_label": "20", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9e90074f43bfcebbc7841ce8b08145249ad7fe35a1ec401169a67becf91af773", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 5 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWAP to print if a number is zero or positive or negative \n1. import java.util.*; \n2. class MyProgram{  \n3. public static void main (String[] args){ \n4.  int x; \n5.  Scanner sc = new Scanner(System.in); \n6.     x = sc.nextInt(); \n7.  if(x > 0){         \n8.   System.out.println(\" number is a positive\");  \n9.  }    \n10.  else if(x < 0) {       \n11.   System.out.println(\" number is a negative\"); \n12.  } \n13.  else{          \n14.   System.out.println(\" number is a zero\"); \n15.  } \n16. } \n \n \nWAP to print day name from day number \n1. public class Demo  { \n2.   public static void main(String[] args)   { \n3.  int d; \n4.     Scanner sc = new Scanner(System.in); \n5.  d = sc.nextInt(); \n6.  if (d == 1 )   System.out.println(\u201cMonday\u201d); \n7.  else if (d == 2)  System.out.println(\u201cTuesday\u201c); \n8.  else if (d == 3)  System.out.println(\u201cWednesday\u201c); \n9.     else if (d == 4)  System.out.println(\u201cThursday\u201c); \n10. else if (d == 5)  System.out.println(\u201cFriday\u201c); \n11. else if (d == 6)  System.out.println(\u201cSaturday\u201c); \n12. else     System.out.println(\u201cSunday\u201c); \n13. } \n14. } \n \nNested If statement \n\uf0b7 A nested if is an if statement that is the target of another if statement.  \n\uf0b7 Nested if statements mean an if statement inside another if statement.  \n\uf0b7 The statement connected to the nested if statement is only executed when -: \no Condition of outer if statement is true, and \no Condition of the nested if statement is also true. \n\uf0b7 Note: There could be an optional else statement associated with the outer if statement, \nwhich is only executed when the condition of the outer if statement is evaluated to be \nfalse and in this case, the condition of nested if condition won't be checked at all", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1814, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4485818d-698c-4acc-9908-6033abc4c01d": {"__data__": {"id_": "4485818d-698c-4acc-9908-6033abc4c01d", "embedding": null, "metadata": {"page_label": "21", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "908fb9c6-634d-4f78-a3a6-34fd213998ab", "node_type": "4", "metadata": {"page_label": "21", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7714472b0fcc8a50f462083b16e06914655999ddc90f7b01b32528b2ff9e7caf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 6 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n \nNested If Program \n1. int username = Integer.parseInt(args[0]); \n2. int password = Integer.parseInt(args[1]); \n3. double balance = 123456.25; \n4. if(username==1234){ \n5.  if(password==987654){ \n6.   System.out.println(\"Your Balance is =\"+balance); \n7.  }//inner if \n8.  else{ \n9.   System.out.println(\"Password is invalid\"); \n10. } \n}//outer if \n11. else{ \n12.     System.out.println(\"Username is invalid\"); \n13. } \n14.  \n \n \n \n \n \n \n \n \nif(condition 1) \n{ \n if(condition 2) \n { \n      nested-block; \n } \n else \n { \n  nested-block; \n } \n}//if \nelse if(condition 3) \n{ \n     statement-block3; \n} \nelse(condition 4) \n{ \n     statement-block4; \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dbe33a52-1c35-48b4-9202-462e23819459": {"__data__": {"id_": "dbe33a52-1c35-48b4-9202-462e23819459", "embedding": null, "metadata": {"page_label": "22", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e23e11a9-4c5f-4e21-ae69-0b26d3563dcc", "node_type": "4", "metadata": {"page_label": "22", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cec04ffee5b56dda2a3e55bb0a43fe9830467de428de22cc3a39d8d250324f36", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 7 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nSwitch case \nn-way Decision \n\uf0b7 switch\u2026case is a multi-way decision making statement. \n\uf0b7 It is similar to if-else-if ladder statement. \n\uf0b7 It executes one statement from multiple conditions. \n \n \n \nWAP to print day based on number entered \n1. public class Demo  { \n2.  public static void main(String[] args){ \n3.  int d; \n4.  Scanner sc= new  Scanner(System.in); \n5.  d = sc.nextInt(); \n6.  switch (d) { \n7.      case 1: \n8.          System.out.println(\u201cMonday\u201c); break; \n9.      case 2: \n10.          System.out.println(\u201cTuesday\u201c); break; \n11.      case 3: \n12.          System.out.println(\u201cWednesday\u201c); break; \n13.      case 4: \n14.          System.out.println(\u201cThursday\u201c); break; \n15.      case 5: \n16.          System.out.println(\u201cFriday\u201c); break; \n17.      case 6: \n18.          System.out.println(\u201cSaturday\u201c); break; \n19.      case 7: \n20.          System.out.println(\u201cSunday\u201c); break; \n21.      default: \n22.         System.out.println(\u201cInvalid Day\u201c); \n23.      } //switch \n24.   } \n25. } \nswitch (expression) \n{ \n    case constant 1: \n          // Statement-1 \n          break; \n    case constant 2: \n          // Statement-2 \n          break; \n    case constant 3: \n          // Statement-3 \n          break; \ndefault: \n        // Statement-default \n//  if none of the above case matches then this block would be \nexecuted. \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1457, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ebaa9494-4d74-4a3d-9617-0c2076295998": {"__data__": {"id_": "ebaa9494-4d74-4a3d-9617-0c2076295998", "embedding": null, "metadata": {"page_label": "23", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6157f50a-5166-4184-a6c2-c23c153630c2", "node_type": "4", "metadata": {"page_label": "23", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c85045586295b16712a828f07d11958420b143a35394a4fb7d424aa493e88152", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 8 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP to print day based on number entered \n1. public class SwitchExampleDemo { \n2. public static void main(String[] args)  \n3. { \n4. int number = 20; \n5. switch (number) { \n6.  case 10: \n7.   System.out.println(\"10\"); \n8.   break; \n9.  case 20: \n10.  System.out.println(\"20\"); \n11.  break; \n12. default: \n13.  System.out.println(\"Not 10 or 20\"); \n14. }//switch \n15. } \n16. } \n  \nPoints to remember for switch case \n\uf0b7 The condition in the switch should result in a constant value otherwise it would be invalid.  \n\uf0b7 In some languages, switch statements can be used for integer values only. \n\uf0b7 Duplicate case values are not allowed. \n\uf0b7 The value for a case must be of the same data type as the variable in the switch.  \n\uf0b7 The value for a case must be a constant. \n\uf0b7 Variables are not allowed as an argument in switch statement. \n\uf0b7 The break statement is used inside the switch to terminate a statement sequence. \n\uf0b7 The break statement is optional, if eliminated, execution will continue on into the next case. \n\uf0b7 The default statement is optional and can appear anywhere inside the switch block. \n \nIntroduction to loop \nRepeatedly execute a block of statements \n Looping Statements \n\uf0b7 Sometimes we need to repeat certain actions several times or till the some criteria is satisfied. \n\uf0b7 Loop constructs are used to iterate a block of statements several times. \n\uf0b7 Loop constructs repeatedly execute a block of statements for a fixed number of times or till \nsome condition is satisfied \n\uf0b7 Following are looping statements in any programming language, \no Entry Controlled  while, for \no Exit Controlled  do\u2026while \no Unconditional Jump goto (It is advised to never use goto in a program)", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b8ff9687-5a78-49a6-95c2-e3009b1b90b9": {"__data__": {"id_": "b8ff9687-5a78-49a6-95c2-e3009b1b90b9", "embedding": null, "metadata": {"page_label": "24", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dbdc7594-bd7e-4b3d-981f-9c68fb9dd3e5", "node_type": "4", "metadata": {"page_label": "24", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a88d3a719e58c2701e916435df2a7c685de32ffcd476aedc99b883d50d1086da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 9 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n Entry Controlled Loop: While \n\uf0b7 While is an entry controlled loop. \n\uf0b7 It executes a block of statements till the condition is true. \n \n  \n \n\uf0b7 If the number of iteration is not fixed, it is recommended to use while loop. \n \n \n \nWAP to print day based on number entered \n1. public class SwitchExampleDemo { \n2. public static void main(String[] args)  \n3. { \n4. int number = 20; \n5. switch (number) { \n6.  case 10: \n7.   System.out.println(\"10\"); \n8.   break; \n9.  case 20: \n10.  System.out.println(\"20\"); \n11.  break; \n12. default: \n13.  System.out.println(\"Not 10 or 20\"); \n14. }//switch \n15. } \n16. } \n//code will print 1 to 9 \n1. public class WhileLoopDemo { \n2. public static void main(String[] args) { \n3. int number = 1; \n4.  while(number < 10) { \n5.   System.out.println(number); \n6.   number++; \n7.  } \n8.    } \n9. } \n \nwhile(condition)  \n{ \n // true-block \n} \nint i = 1; \nwhile (i <= 5)  \n{ System.out.println(i); \n  i++; \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1056, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2372a8e2-8c35-4e6b-b1f0-86d3ac577cdd": {"__data__": {"id_": "2372a8e2-8c35-4e6b-b1f0-86d3ac577cdd", "embedding": null, "metadata": {"page_label": "25", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a3042550-4bc6-45c1-b23e-21fffed5ae30", "node_type": "4", "metadata": {"page_label": "25", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a1023e1f54a408f47f5ad1a546283fc63191d0673d7a4dd46cb56e49d7200c67", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 10 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP to print odd numbers between 1 to n \n1. import java.util.*; \n2. class WhileDemo{ \n3. public static void main (String[] args){ \n4.  int n,i=1; \n5.  Scanner sc = new Scanner(System.in); \n6.  System.out.print(\"Enter a number:\"); \n7.  n = sc.nextInt(); \n8.  while(i <= n){ \n9.    if(i%2==1) \n10.      System.out.println(i); \n11.    i++; \n12.  } \n13. }} \n \n \nWAP to print factors of a given number \n1. import java.util.*; \n2. class WhileDemo{  \n3. public static void main (String[] args){ \n4. int i=1,n; \n5. Scanner sc = new Scanner(System.in); \n6. System.out.print(\"Enter a Number:\"); \n7. n = sc.nextInt(); \n8. System.out.print(\" Factors:\"); \n9. while(i <= n){ \n10.    if(n%i == 0) \n11.      System.out.print(i +\",\"); \n12.    i++; \n13.  } \n14. }}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 875, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab97a4fb-5410-406e-93bd-967003265df0": {"__data__": {"id_": "ab97a4fb-5410-406e-93bd-967003265df0", "embedding": null, "metadata": {"page_label": "26", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "abfc535f-e449-483e-ae2d-024f1b220c4f", "node_type": "4", "metadata": {"page_label": "26", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "bf44ece000886fe6c269e18164951131a6135e1f0dadbf66129adb692aa9795b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 11 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n Entry Controlled Loop: for (;;) Loop \n\uf0b7 for is an entry controlled loop \n\uf0b7 Statements inside the body of for are repeatedly executed till the condition is true \n \n \n \n\uf0b7 The initialization statement is executed only once, at the beginning of the loop. \n\uf0b7 Then, the condition is evaluated.  \no If the condition is true, statements inside the body of for loop are executed \no If the condition is false, the for loop is terminated. \n\uf0b7 Then, increment / decrement statement is executed \n\uf0b7 Again the condition is evaluated and so on so forth till the condition is true. \n\uf0b7 If the number of iteration is fixed, it is recommended to use for loop. \n \n \n \nWAP to print odd numbers between 1 to n \n1. import java.util.*; \n2. class MyProgram{ \n3. public static void main (String[] args){ \n4.  int i=1; \n5.  Scanner sc = new Scanner(System.in); \n6.    n = sc.nextInt(); \n7.  for(i=1; i<=n; i++)  { \n8.      if(i%2==1) \n9.        System.out.println(i); \n10.    }//for \n11.   }// \n12. } \n//code will print 1 to 9 \n1. public class ForLoopDemo { \n2. public static void main(String[] args){ \n3.  for(int number=1;number<10;number++) \n4.  { \n5.   System.out.println(number); \n6.  } \n7.    } \n8. } \n \nfor(i=1; i <= 5; i++)  \n{ \n   System.out.print(\"Hello World!\"); \n} \nfor (initialization; condition; increment/decrement) \n{ \n    // statements \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "581ecc59-4022-41e4-b894-88c6881d1232": {"__data__": {"id_": "581ecc59-4022-41e4-b894-88c6881d1232", "embedding": null, "metadata": {"page_label": "27", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0862230-1e5b-4799-a1d4-238ae9925d7c", "node_type": "4", "metadata": {"page_label": "27", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e2322086c1e5f71f4e5edf65963cbe654bcd30976b0a91107d91a8561fad4fb0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 12 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP to print factors of a given number \n1. import java.util.*; \n2. class MyProgram{   \n3. public static void main (String[] args){ \n4.  int i=1; \n5.  Scanner sc = new  Scanner(System.in); \n6.    n = sc.nextInt(); \n7.  for(i=1; i<=n; i++){ \n8.       if(n%i == 0) \n9.         System.out.println(i); \n10.   } \n11.  } \n12. } \n \nExit Controlled Loop: do\u2026while \n\uf0b7 do\u2026while is an exit controlled loop. \n\uf0b7 do-while loop is executed at least once because condition is checked after loop body. \n\uf0b7 Statements inside the body of do\u2026while are repeatedly executed till the condition is true. \n\uf0b7 while loop executes zero or more times, do\u2026while loop executes one or more times. \n \n \n \n \n \n \n \n \n//code will print 1 to 9 \n1. public class DoWhileLoopDemo { \n2. public static void main(String[] args) { \n3.  int number = 1; \n4.  do { \n5.   System.out.println(number); \n6.   number++; \n7.  }while(number < 10) ; \n8.   } \n9. } \n \ndo \n{ \n // true-block \n}  \nwhile(condition) ;", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1084, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5a0b4547-8b5a-4290-878a-4def7d1fd0b5": {"__data__": {"id_": "5a0b4547-8b5a-4290-878a-4def7d1fd0b5", "embedding": null, "metadata": {"page_label": "28", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7235bdcb-c70f-4d80-b12d-ac6c80d89de9", "node_type": "4", "metadata": {"page_label": "28", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e8c2ec49e9949dfc32f6b758ededaff541a7e7f393df6c914f56287833608943", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 13 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n \nWAP to print 1 to 10 using do-while loop \n1. import java.util.*; \n2. class MyProgram{   \n3. public static void main (String[] args){ \n4.  int i=1; \n5.  Scanner sc = new  Scanner(System.in); \n6.    n = sc.nextInt(); \n7.  for(i=1; i<=n; i++){ \n8.       if(n%i == 0) \n9.         System.out.println(i); \n10.   } \n11.  } \n12. } \n \nContinue: Skip the statement in the iteration \n\uf0b7 Sometimes, it is required to skip the remaining statements in the loop and continue with the \nnext iteration. \n\uf0b7 continue statement is used to skip remaining statements in the loop. \n\uf0b7 continue is keyword in java. \n\uf0b7  \n \nWAP to calculate the sum of positive numbers. \n1. import java.util.*; \n2. class ContinueDemo{ \n3. public static void main(String[] args) { \n4. int a,n,sum=0;     \n5. Scanner sc = new Scanner(System.in);          \n6. n = sc.nextInt();     \n7. for(int i=0;i<n;i++){         \n8.   a = sc.nextInt();         \n9.   if(a<0){ \n10.    continue; \n11.  System.out.println(\"a=\"+a); //error:unreachable \n       statement \n12.   }//if      \n13.   sum=sum+a;      \n14. }//for     \n15.  System.out.println(\"sum=\"+sum); \n16.  } \n17. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1245, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ca71126b-6a6a-4139-b317-321e8999d8eb": {"__data__": {"id_": "ca71126b-6a6a-4139-b317-321e8999d8eb", "embedding": null, "metadata": {"page_label": "29", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a28f6c02-f15a-4b90-b459-16883fb0484d", "node_type": "4", "metadata": {"page_label": "29", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "62b645f360bd947ebe799b1d58cfe80b9a84ef09f7d15d58416477e98aa84d40", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 14 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n Break: Early exit from the loop \n\uf0b7 Sometimes, it is required to early exit the loop as soon as some situation occurs. \n\uf0b7 E.g. searching a particular number in a set of 100 numbers. As soon as the number is found it \nis desirable to terminate the loop. \n\uf0b7 break is keyword in java. \n\uf0b7 break statement is used to jump out of a loop. \n\uf0b7 break statement provides an early exit from for, while, do\u2026while and switch constructs. \n\uf0b7 break causes exit from the innermost loop or switch. \n\uf0b7  \n \nWAP to calculate the sum of given numbers. User will enter -1 to terminate. \n1. import java.util.*; \n2. class BreakDemo{ \n3. public static void main (String[] args){  \n4.     int a,sum=0; \n5.     System.out.println(\"enter numbers_ enter -1 to break\"); \n6.     Scanner sc = new Scanner(System.in); \n7.     while(true){ \n8.         a = sc.nextInt(); \n9.         if(a==-1) \n10.             break; \n11.         sum=sum+a; \n12.     }//while    \n13.     System.out.println(\"sum=\"+sum); \n14.  } \n15. } \nNested loop \nloop within a loop \n Pattern Programs \n \n   \nWAP to print given pattern (nested loop) \n1. public static void main(String[] args) { \n2. int n=5; \n3. for(int i=1;i<=n;i++){ \n4.   for(int j=1;j<=i;j++){ \n5.       System.out.print(\"*\"); \n6.   }//for j \n7.     System.out.println(); \n8.      }//outer for i \n9.     } \n10. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1438, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6602c73b-d2ce-4c5a-8c82-1061c53a0ec5": {"__data__": {"id_": "6602c73b-d2ce-4c5a-8c82-1061c53a0ec5", "embedding": null, "metadata": {"page_label": "30", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a15d4f20-a0d1-40ff-afdb-a06d16092107", "node_type": "4", "metadata": {"page_label": "30", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "15cd019697c9e7b11264edf443b819ab8e2d03c883532667ab705f6cd7dac1fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 15 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP to print given pattern (nested loop) \n1. class PatternDemo{ \n2. public static void main(String[] args) { \n3.  int n=5; \n4.  for(int i=1;i<=n;i++){ \n5.   for(int j=1;j<=i;j++){     \n    System.out.print(j+\"\\t\"); \n6.   }//for j \n7.      System.out.println(); \n8.    }//outer for i \n9.     } \n10. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 428, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73d72308-9981-4265-876d-5a7584b2f3da": {"__data__": {"id_": "73d72308-9981-4265-876d-5a7584b2f3da", "embedding": null, "metadata": {"page_label": "31", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52d5484a-0672-4188-98f8-e0ca2301263d", "node_type": "4", "metadata": {"page_label": "31", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "281fc43b71a9782cee3eaae1c66f23c694ede62e1ac3997ea27540fcd3d5f05a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 16 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMathematical functions \n\uf0b7 The Java Math class provides more advanced mathematical calculations other than \narithmetic operator. \n\uf0b7 The java.lang.Math class contains methods which performs basic numeric operations such \nas the elementary exponential, logarithm, square root, and trigonometric functions. \n\uf0b7 All the methods of class Math are static. \n\uf0b7 Fields : \no Math class comes with two important static fields \n\uf0a7 E : returns double value of Euler's number (i.e 2.718281828459045).  \n\uf0a7 PI : returns double value of PI (i.e. 3.141592653589793). \nMath class Method: \nMethod Description \nMath.abs() It will return the Absolute value of the given value. \nMath.max() It returns the Largest of two values. \nMath.min() It is used to return the Smallest of two values. \nMath.round() It is used to round of the decimal numbers to the nearest value. \nMath.sqrt() It is used to return the square root of a number. \nMath.cbrt() It is used to return the cube root of a number. \nMath.pow() It returns the value of first argument raised to the power to second \nargument. \nMath.signum() It is used to find the sign of a given value. \nMath.ceil() It is used to find the smallest integer value that is greater than or equal to \nthe argument or mathematical integer. \nMath.copySign() It is used to find the Absolute value of first argument along with sign \nspecified in second argument. \nMath.nextAfter() It is used to return the floating-point number adjacent to the first \nargument in the direction of the second argument. \nMath.nextUp() It returns the floating-point value adjacent to d in the direction of positive \ninfinity. \nMath.nextDown() It returns the floating-point value adjacent to d in the direction of \nnegative infinity. \nMath.floor() It is used to find the largest integer value which is less than or equal to the \nargument and is equal to the mathematical integer of a double value. \nMath.floorDiv() It is used to find the largest integer value that is less than or equal to the \nalgebraic quotient. \nMath.random() It returns a double value with a positive sign, greater than or equal \nto 0.0 and less than 1.0. \nMath.rint() It returns the double value that is closest to the given argument and equal \nto mathematical integer. \nMath.hypot() It returns sqrt(x2 +y2) without intermediate overflow or underflow. \nMath.ulp() It returns the size of an ulp of the argument. \nMath.getExponent() It is used to return the unbiased exponent used in the representation of \na value. \nMath.IEEEremainder() It is used to calculate the remainder operation on two arguments as \nprescribed by the IEEE 754 standard and returns value. \nMath.addExact() It is used to return the sum of its arguments, throwing an exception if the \nresult overflows an int or long.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2869, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13d065cd-2386-45a4-b57a-ee34c706ae0e": {"__data__": {"id_": "13d065cd-2386-45a4-b57a-ee34c706ae0e", "embedding": null, "metadata": {"page_label": "32", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "78103799-7613-4407-945e-94a9150a80f0", "node_type": "4", "metadata": {"page_label": "32", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8a9767463cf20962e17fe8af7dd99c4f24c326b8166c7b4f9fb219056f61630b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2 \u2013 Selections, Mathematical functions & loops \n \n 17 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMath.subtractExact() It returns the difference of the arguments, throwing an exception if the \nresult overflows an int. \nMath.multiplyExact() It is used to return the product of the arguments, throwing an exception if \nthe result overflows an int or long. \nMath.incrementExact() It returns the argument incremented by one, throwing an exception if the \nresult overflows an int. \nMath.decrementExact() It is used to return the argument decremented by one, throwing an \nexception if the result overflows an int or long. \nMath.negateExact() It is used to return the negation of the argument, throwing an exception if \nthe result overflows an int or long. \nMath.toIntExact() It returns the value of the long argument, throwing an exception if the \nvalue overflows an int. \n \nLogarithmic Math Method \nMethod Description \nMath.log() It returns the natural logarithm of a double value. \nMath.log10() It is used to return the base 10 logarithm of a double value. \nMath.log1p() It returns the natural logarithm of the sum of the argument and 1. \nMath.exp() It returns E raised to the power of a double value, where E is Euler's number and it is \napproximately equal to 2.71828. \nMath.expm1() It is used to calculate the power of E and subtract one from it. \n \nTrigonometric Math Method \nMethod Description \nMath.sin() It is used to return the trigonometric Sine value of a Given double value. \nMath.cos() It is used to return the trigonometric Cosine value of a Given double value. \nMath.tan() It is used to return the trigonometric Tangent value of a Given double value. \nMath.asin() It is used to return the trigonometric Arc Sine value of a Given double value \nMath.acos() It is used to return the trigonometric Arc Cosine value of a Given double value. \nMath.atan() It is used to return the trigonometric Arc Tangent value of a Given double value. \n \n \nMath Example \n1. public class MathDemo { \n2. public static void main(String[] args) { \n3.  double sinValue = Math.sin(Math.PI / 2); \n4.  double cosValue = Math.cos(Math.toRadians(80)); \n5.  int randomNumber = (int)(Math.random() * 100); \n6.  // values in Math class must be given in Radians \n7.  // (not in degree) \n8.   System.out.println(\"sin(90) = \" + sinValue); \n9.   System.out.println(\"cos(80) = \" + cosValue); \n10.  System.out.println(\"Random = \" + randomNumber); \n11.   } \n12. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2459, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f4afc7b6-b821-4097-bf3e-33b89340266a": {"__data__": {"id_": "f4afc7b6-b821-4097-bf3e-33b89340266a", "embedding": null, "metadata": {"page_label": "33", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5ed3e2a-2b50-45df-80e5-8411d92c477a", "node_type": "4", "metadata": {"page_label": "33", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b0a64200fce0d1fc1cb41366882274309de4320ada24d7099d509768455d2d11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 1 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nArrays in Java \n \nDefinition: An array is a fixed size sequential collection of elements of same data type grouped \nunder single variable name. \n\uf0b7 An array is a group of like-typed variables that are referred by a common name. \n\uf0b7 Arrays of any type can be created and may have one or more dimensions. \n\uf0b7 A specific element in an array is accessed by its index. \n\uf0b7 Arrays offer a convenient means of grouping related information. \nint percentage[10]; \n \n\uf0b7 Often we need to deal with relatively large set of data. \n\uf0b7 E.g. \n\uf0a7 Percentage of all the students of the college. (May be in thousands) \n\uf0a7 Age of all the citizens of the city. (May be lakhs) \n\uf0b7 We need to declare thousands or lakhs of the variable to store the data which is practically \nnot possible. \n\uf0b7 We need a solution to store more data in a single variable. \n\uf0b7 Array is the most appropriate way to handle such data. \n\uf0b7 As per English Dictionary, \u201cArray means collection or group or arrangement in a specific \norder.\u201d \n \nArray declaration \n \nArray declaration: \ntype var-name[]; \nExample: \nInt student_marks[]; \nAbove example will represent array with no value (null) To link student_marks \nwith actual, physical array of integers, we must allocate one using new keyword. \nExample:  \nint student_marks[] = new int[20]; \n\uf0b7 Normal Variable Declaration: int a; \n\uf0b7 Array Variable Declaration: int b[10]; \n\uf0b7 Individual value or data stored in an array is known as an element of an \narray. \n\uf0b7 Positioning / indexing of an elements in an array always starts with 0 not 1.  \no If 10 elements in an array then index is 0 to 9 \no If 100 elements in an array then index is 0 to 99 \no If 35 elements in an array then index is 0 to 34", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1783, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2650b159-85bc-4615-a56c-f40f098ae1f6": {"__data__": {"id_": "2650b159-85bc-4615-a56c-f40f098ae1f6", "embedding": null, "metadata": {"page_label": "34", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "49d9c393-83fe-4760-a270-6657ed21cc2b", "node_type": "4", "metadata": {"page_label": "34", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "96dd96077a3ece162f659e781c7833c2faef813a8a7ac160983c4ae8b4d35ca4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 2 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 Variable a stores 1 integer number where as variable b stores 10 integer \nnumbers which can be accessed as b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], \nb[8] and b[9]. \nImportant point about Java array \no An array is derived datatype. \no An array is dynamically allocated. \no The individual elements of an array is refereed by their \nindex/subscript value. \no The subscript for an array always begins with 0. \n \n \nOne-Dimensional Array \n\uf0b7 An array using one subscript to represent the list of elements is called one \ndimensional array. \n\uf0b7 A One-dimensional array is essentially a list of like-typed variables. \n\uf0b7 Array declaration: type var-name[]; \n\uf0b7 Example:   int student_marks[]; \n\uf0b7 Above example will represent array with no value (null). \n\uf0b7 To link student_marks with actual array of integers, we must allocate one \nusing new keyword. \n\uf0b7 Example:   \nint student_marks[] = new int[20]; \n \n \n \n \n \nExample (One-Dimensional Array) \n1. public class ArrayDemo{ \n2. public static void main(String[] args) { \n3.  int a[]; // or int[] a \n4. // till now it is null as it does not assigned any  \n        memory \n5.  a = new int[5]; // here we create an array \n6.  a[0] = 5; \n7.  a[1] = 8; \n8.  a[2] = 15; \n9.  a[3] = 84; \n10. a[4] = 53; \n11. /* in java we use length property to determine the \n       length  \n12.  * of an array, unlike c where we used sizeof  \n      function */ \n13. for (int i = 0; i < a.length; i++) { \n14.  System.out.println(\"a[\"+i+\"]=\"+a[i]); \n15. } \n16. } \n17. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1587, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d32ce50-43d6-412a-8645-daeef5737aee": {"__data__": {"id_": "9d32ce50-43d6-412a-8645-daeef5737aee", "embedding": null, "metadata": {"page_label": "35", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1079c78f-53f1-40e0-9e5b-9e0fdaf38c44", "node_type": "4", "metadata": {"page_label": "35", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3a390426477bc536eb56837d9d531daba25afd6ee945f493dcb016e6b2f20976", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 3 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nExample (One-Dimensional Array) \n1. Class AutoArray{ \n2.  public static void main (String args[ ])  \n3.  { \n4.   int month_days[]={31,28,31,30,31,30,31,31, \n5.   30,31,30,31}; \n6.   System.out.println(\u201cApril has\u201d +   \n    month_days[3]  + \u201cdays.\u201d); \n7.  }  } \n \n \n \n \n \n \n \n \n \n \n \nWAP to store 5 numbers in an array and print them \n1. import java.util.*; \n2. class ArrayDemo1{ \n3. public static void main (String[] args){ \n4.  int i, n; \n5.  int[] a=new int[5];   \n6.  Scanner sc = new Scanner(System.in);  \n7.  System.out.print(\"enter Array Length:\"); \n8.  n = sc.nextInt();   \n9.  for(i=0; i<n; i++) { \n10.  System.out.print(\"enter a[\"+i+\"]:\"); \n11.  a[i] = sc.nextInt(); \n12. }   \n13. for(i=0; i<n; i++)   \n14.     System.out.println(a[i]); \n15.    } \n16. } \nOutput: \nenter Array Length:5 \nenter a[0]:1 \nenter a[1]:2 \nenter a[2]:4 \nenter a[3]:5 \nenter a[4]:6 \n1 \n2 \n4 \n5 \n6", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 977, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "726f0e23-9128-4fe6-99bc-74fc9003fb66": {"__data__": {"id_": "726f0e23-9128-4fe6-99bc-74fc9003fb66", "embedding": null, "metadata": {"page_label": "36", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76ce7475-d630-4051-9a77-14cbb43c4a7f", "node_type": "4", "metadata": {"page_label": "36", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e274037b03c66ee6a41b06193c4c0091d017680f7cd0e53e373e74d43fb11931", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 4 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n \n \nWAP to print elements of an array in reverse order \n1. import java.util.*; \n2. public class RevArray{ \n3. public static void  main(String[] args) { \n4.   int i, n; \n5.   int[] a; \n6.   Scanner sc=new Scanner(System.in);     \n7.   System.out.print(\"Enter Size of an Array:\");     \n8.   n=sc.nextInt(); \n9.   a=new int[n]; \n10.   for(i=0; i<n; i++){ \n11.       System.out.print(\"enter a[\"+i+\"]:\"); \n12.       a[i]=sc.nextInt(); \n13.   } \n14.   System.out.println(\"Reverse Array\"); \n15.   for(i=n-1; i>=0; i--)  \n16.       System.out.println(a[i]);   \n17.  } \n18. } \n \n \nWAP to count positive number, negative number and zero from an array of n size \n1. import java.util.*; \n2. class ArrayDemo1{ \n3. public static void main (String[] args){ \n4. int n,pos=0,neg=0,z=0; \n5. int[] a=new int[5];   \n6. Scanner sc = new Scanner(System.in);  \n7. System.out.print(\"enter Array Length:\"); \n8. n = sc.nextInt();   \n9.  for(int i=0; i<n; i++) { \n10.  System.out.print(\"enter a[\"+i+\"]:\"); \n11.  a[i] = sc.nextInt(); \n12.  if(a[i]>0) \n13.   pos++; \n14.  else if(a[i]<0) \n15.   neg++; \n16.  else \n17.   z++; \n18. }  \n19. System.out.println(\"Positive no=\"+pos); \n20. System.out.println(\"Negative no=\"+neg); \n21. System.out.println(\"Zero no=\"+z); \n22. }}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1344, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "66058e73-8f5d-4bea-8c62-1d70ff1b6647": {"__data__": {"id_": "66058e73-8f5d-4bea-8c62-1d70ff1b6647", "embedding": null, "metadata": {"page_label": "37", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9ad0c96-688d-4857-8d6a-3d9b9c812be9", "node_type": "4", "metadata": {"page_label": "37", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e912fdf0beeb8e0a92c73742cf48271a21cad995195f137303a413b03fb68a3f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 5 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \nMultidimensional Array \n \n \n\uf0b7 In java, Multidimensional arrays are actually array of arrays. \n\uf0b7 To declare a multidimensional array variable, specify each additional index \nusing another set of square brackets. \n\uf0b7 For example, following declares two dimensional array: \n int twoD[ ] [ ] = new int [4] [5]; \n\uf0b7 This allocates a 4 b y 5 array and assigns it to twoD. Internally this matrix is \nimplemented as an array of arrays of int. \n\uf0b7 Alternative Array Declaration, There is a second form that may be used to \ndeclare an array: \n  type[ ] var-name; \n\uf0b7 The square brackets follow the type specif ier, and not the name of the array \nvariable. \n\uf0b7 For example, the following two declarations are equivalent: \n   int a1[ ] = new int[4]; \n   int [ ] a1= new int[4]; \n   char twod [ ] [ ] = new char [3] [4]; \n   char [ ] [ ] twod = new char [3] [4]; \n\uf0b7 This alternative declaration form offers convenience when declaring several \narrays at the same time. For example, \n  int [ ] nums1, nums2, nums3; \n\uf0b7 This creates 3 array variables of int type. \n\uf0b7 Example: \nint runPerOver[][] = new int[50][6]; \nManually allocate different size: \nInt runPerOver[][] = new int[3][]; \nrunPerOver[0] = new int[6]; \nrunPerOver[1] = new int[7]; \nrunPerOver[2] = new int[6];", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1351, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5ee7ce2c-812c-49b7-8bba-f268106518f1": {"__data__": {"id_": "5ee7ce2c-812c-49b7-8bba-f268106518f1", "embedding": null, "metadata": {"page_label": "38", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "83567cf1-470f-4e90-b2cf-3fa62d3aa504", "node_type": "4", "metadata": {"page_label": "38", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cdc36f42c24f8905a926c8259e868fb7893600edc8355b2cdb98812bf45eaa15", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 6 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInitialization : \nInt runPerOver[][] = { \n    {0,4,2,1,0,6}, \n    {1,56,4,1,2,4,0}, \n    {6,4,1,0,2,2}, \n            \n \n \n \n \nWAP to read 3 x 3 elements in 2d array \n1. import java.util.*; \n2. class Array2Demo{ \n3. public static void main(String[] args) { \n4.  int size; \n5.  Scanner sc=new Scanner(System.in); \n6.  System.out.print(\"Enter size of an array\"); \n7.  size=sc.nextInt(); \n8.  int a[][]=new int[size][size]; \n9.  for(int i=0;i<a.length;i++){ \n10.  for(int j=0;j<a.length;j++){ \n11.   a[i][j]=sc.nextInt(); \n12.  } \n13. } \n14. for(int i=0;i<a.length;i++){ \n15.  for(int j=0;j<a.length;j++){ \n16.     System.out.print     \n      (\"a[\"+i+\"][\"+j+\"]:\"+a[i][j]+\"\\t\"); \n17.  } \n18.  System.out.println(); \n19. } \n20.  } \n21. } \nOutput: \n11 \n12 \n13 \n14 \n15 \n16 \n17 \n18 \n19 \na[0][0]:11      a[0][1]:12      a[0][2]:13 \na[1][0]:14      a[1][1]:15      a[1][2]:16 \na[2][0]:17      a[2][1]:18      a[2][2]:19", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1008, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c133d795-5ce4-4f5a-a43d-2c0f1fab6979": {"__data__": {"id_": "c133d795-5ce4-4f5a-a43d-2c0f1fab6979", "embedding": null, "metadata": {"page_label": "39", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e04ba52-0b0c-4a6d-8bce-83e9379865f3", "node_type": "4", "metadata": {"page_label": "39", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9cbd033fbdaeaf81ef5a1c776fa5bb394ec56dc3fe3fa524531a90eb2425c8e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 7 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWAP to perform addition of two 3 x 3 matrices \n1. import java.util.*; \n2. class Array2Demo{ \n3. public static void main(String[] args) { \n4.  int size; \n5.  int a[][],b[][],c[][]; \n6.  Scanner sc=new Scanner(System.in); \n7.   System.out.print(\"Enter size of an array:\"); \n8.   size=sc.nextInt(); \n9.   a=new int[size][size]; \n10.  System.out.println(\"Enter array elements:\"); \n11. for(int i=0;i<a.length;i++){ \n12.  for(int j=0;j<a.length;j++){ \n13.      System.out.print(\"Enter     \n      a[\"+i+\"][\"+j+\"]:\"); \n14.      a[i][j]=sc.nextInt(); \n15.  } \n16. } \n17. b=new int[size][size]; \n18. for(int i=0;i<b.length;i++){ \n19.  for(int j=0;j<b.length;j++){ \n20.    System.out.print(\"Enter b[\"+i+\"][\"+j+\"]:\"); \n21.    b[i][j]=sc.nextInt(); \n22.  } \n23. } \n24. c=new int[size][size]; \n25. for(int i=0;i<c.length;i++){ \n26.  for(int j=0;j<c.length;j++){ \n27.   System.out.print(\"c[\"+i+\"][\"+j+\"]:\u201c  \n       +(a[i][j]+b[i][j])+\"\\t\"); \n28.   } \n29.   System.out.println(); \n30.   }//outer for \n31.  }//main() \n32. }//class \nOutput: \nEnter size of an array:3 \nEnter array elements: \nEnter a[0][0]:1 \nEnter a[0][1]:1 \nEnter a[0][2]:1 \nEnter a[1][0]:1 \nEnter a[1][1]:1 \nEnter a[1][2]:1 \nEnter a[2][0]:1 \nEnter a[2][1]:1 \nEnter a[2][2]:1 \nEnter b[0][0]:4 \nEnter b[0][1]:4 \nEnter b[0][2]:4 \nEnter b[1][0]:4 \nEnter b[1][1]:4 \nEnter b[1][2]:4", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1426, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9bb1118-e94f-457f-91b3-5b9f2a4844e3": {"__data__": {"id_": "d9bb1118-e94f-457f-91b3-5b9f2a4844e3", "embedding": null, "metadata": {"page_label": "40", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fce3a458-297e-4f35-bd27-c75230b76427", "node_type": "4", "metadata": {"page_label": "40", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "84b26c45e9d8702df1c5a6c9aae3a385c5b1d2960d9a440030662c8a724ed302", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 8 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nEnter b[2][0]:4 \nEnter b[2][1]:4 \nEnter b[2][2]:4 \nc[0][0]:5       c[0][1]:5       c[0][2]:5 \nc[1][0]:5       c[1][1]:5       c[1][2]:5 \nc[2][0]:5       c[2][1]:5       c[2][2]:5 \n \n \nInitialization of an array elements \nOne dimensional Array \n\uf0b7 int a[5] = { 7, 3, -5, 0, 11 };  // a[0]=7, a[1] = 3, a[2] = -5, a[3] = 0, a[4] = 11 \n\uf0b7 int a[5] = { 7, 3 };   // a[0] = 7, a[1] = 3, a[2], a[3] and a[4] are 0 \n\uf0b7 int a[5] = { 0 };    // all elements of an array are initialized to 0 \n \nTwo dimensional Array \n\uf0b7 int a[2][4] = { { 7, 3, -5, 10 }, { 11, 13, -15, 2} }; // 1st row is 7, 3, -5, 10 & 2nd row is  \n          11, 13, -15, 2 \n\uf0b7 int a[2][4] = { 7, 3, -5, 10, 11, 13, -15, 2 };  // 1st row is 7, 3, -5, 10 & 2nd row is  \n       11, 13, -15, 2 \n\uf0b7 int a[2][4] = { { 7, 3 }, { 11} };   // 1st row is 7, 3, 0, 0 & 2nd row is 11, 0, 0, 0 \n\uf0b7 int a[2][4] = { 7, 3 };    // 1st row is 7, 3, 0, 0 & 2nd row is 0, 0, 0, 0 \n\uf0b7 int a[2][4] = { 0 };    // 1st row is 0, 0, 0, 0 & 2nd row is 0, 0, 0, 0", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab68a0c6-3831-4683-9d0a-2e33e9f60866": {"__data__": {"id_": "ab68a0c6-3831-4683-9d0a-2e33e9f60866", "embedding": null, "metadata": {"page_label": "41", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "564770a3-2cb1-468a-ad96-d667d0746f3a", "node_type": "4", "metadata": {"page_label": "41", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "36599dbd300dfc6a4edb5e1f4b871818311aba60df9c83e21896b492e792d27d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 9 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nSearching in Array \n\uf0b7 Searching is th e process of looking for a specific element in an array. for example, \ndiscovering whether a certain element is included in the array. \n\uf0b7 Searching is a common task in computer programming. Many algorithms and data \nstructures are devoted to searching. \n\uf0b7 We will discuss two commonly used approaches as follows: \n Linear Search \nThe linear search approach compares the key element key sequentially with each \nelement in the array. It continues to do so until the key matches an element in \nthe  \n       array or the array is exhausted without a match being found. \n \nLinearSearchDemo.java \n1. import java.util.*; \n2. class LinearSearchDemo{ \n3. public static void main(String[] args) { \n4.  int size; \n5.  int a[]={1,2,3,4,5,6,7,8,9}; \n6.  int search; \n7.  boolean flag=false; \n8.  Scanner sc=new Scanner(System.in); \n9.  System.out.print(\"Enter element to search\"); \n10. search=sc.nextInt();  \n11. for(int i=0;i<a.length;i++){ \n12.  if(a[i]==search){ \n13.   System.out.println(\"element found at \n         \"+i+\"th index\"); \n14.   flag=true; \n15.   break; \n16.  } //if \n17. } \n18. if(!flag) \n19. System.out.println(\"element NOT found!\"); \n20. } \n21. } \nOutput: \nEnter element to search 6 \nelement found at 5th index \nEnter element to search 35 \nelement NOT found!", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1401, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dbe06757-2df7-46e3-aaa6-8a2d8c768822": {"__data__": {"id_": "dbe06757-2df7-46e3-aaa6-8a2d8c768822", "embedding": null, "metadata": {"page_label": "42", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a17c383-a0ae-44a0-a24a-d61cea00ba60", "node_type": "4", "metadata": {"page_label": "42", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7f4521e6f745acacfe26a8c6f881de145edb7a6469602995a029b0825b727578", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 10 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nBinary Search \nThe binary search first compares the key with the element in the middle of the \narray. Consider the following three cases:  \n\uf0b7 If the key is less than the middle element, you need to continue to search for \nthe key only in the first half of the array. \n\uf0b7 If the key is equal to the middle element, the search ends with a match. \n\uf0b7 If the key is greater than the middle element, you need to continue to search \nfor the key only in the second half of the array. \nNote: Array should be sorted in ascending order if we want to use Binary Search. \n \nBinary Search Demo \n1. import java.util.*; \n2. class BinaryDemo{ \n3. public static void main(String[] args){ \n4.   int size; \n5.   int a[]={1,2,3,4,5,6,7,8,9}; \n6.   int search; \n7.   boolean flag=false; \n8.   Scanner sc=new Scanner(System.in); \n9.   System.out.print(\"Enter element to search:\"); \n10. search=sc.nextInt(); \n11. int low=0; \n12. int high= a.length-1; \n13. while(high>=low){ \n14. int mid=(high+low)/2; \n15. if(search==a[mid]){ \n16.    flag=true; \n17.    System.out.println(\"element found   \n       at \"+mid+\" index \"); \n18.   break; \n19. } \n20. else if(search<a[mid]){ \n21.  high=mid-1; \n22. } \n23. else if(search>a[mid]){ \n24.  low=mid+1; \n25. } \n26. }//while \n \n27. if(!flag) \n28.  System.out.println(\"element not found\"); \n29.   } \n30. } \nOutput: \nEnter element to search:5 \nelement found at 4 index \nEnter element to search:9 \nelement found at 8 index \nEnter element to search:56 \nelement not found", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1577, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fac961eb-8fdb-49d7-9e92-ec1d59e73e0a": {"__data__": {"id_": "fac961eb-8fdb-49d7-9e92-ec1d59e73e0a", "embedding": null, "metadata": {"page_label": "43", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e3a8dee-0b72-42d1-80b4-483dd1820252", "node_type": "4", "metadata": {"page_label": "43", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e0d7258d66f8793c05b2190f68af0158d74eab3c84b9b7f0fd24fd3b2f9b0124", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 11 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nSorting Array \n\uf0b7 Sorting, like searching, is a common task in computer programming. Many different \nalgorithms have been developed for sorting. \n\uf0b7 There are many sorting techniques available, we are going to explore selection sort. \n\uf0b7 Selection sort \no Finds the smallest number in the list and swaps it with the first element. \no It then finds the smallest number remaining and swaps it with the second element, \nand so on, until only a single number remains. \n \n \n \n \n \nSelection Sort Demo \n1. import java.util.*; \n2. class SelectionSortDemo{ \n3.  public static void main(String[] args) { \n4.  int a[]={ 5, 2, 9, 3, 4, 1, 8, 6, 7 }; \n5. for (int i = 0; i < a.length - 1; i++) { \n6. // Find the minimum in the list[i..a.length-1] \n7.   int min = a[i]; \n8.   int minIndex = i; \n9.   for (int j = i + 1; j < a.length; j++) { \n10.    if (min > a[j]) { \n11.      min = a[j]; \n12.      minIndex = j; \n13.    } \n14.   }//inner for loop j   \n15. // Swap a[i] with a[minIndex]  \n16.   if (minIndex != i) { \n17.  a[minIndex] = a[i]; \n18.  a[i] = min; \n19.  } \n20.  }//outer for i \n21.  for(int temp: a) { // this is foreach loop  \n22.  System.out.print(temp + \", \"); \n23.    } \n24.   }//main() \n25. }//class \nOutput: \n1, 2, 3, 4, 5, 6, 7, 8, 9,", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1337, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c061e1f6-43ec-48e0-b7fc-de6548d17f2e": {"__data__": {"id_": "c061e1f6-43ec-48e0-b7fc-de6548d17f2e", "embedding": null, "metadata": {"page_label": "44", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "457124bb-7086-4e5e-982a-87329735e09b", "node_type": "4", "metadata": {"page_label": "44", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c12b36a10529c93bd67698a2d80770937ee079887c93c69b16a0708b9fa8fffb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 12 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMethods in Java \n What is Method? \n\uf0b7 A method is a group of statements that performs a specific task. \n\uf0b7 A large program can be divided into the basic building blocks known as \nmethod/function. \n\uf0b7 The function contains the set of programming statements enclosed by {  }. \n\uf0b7 Program execution in many programming language starts from the main function. \nmain is also a method/function \n \nMethod Definition \n\uf0b7 A method definition defines the method header and body. \n\uf0b7 A method body part defines method logic. \nSyntax: return-type method_name(datatyp1 arg1, datatype2 arg2, \n\u2026) \n{ \n functions statements \n} \n \nExample: \n \nint addition(int a, int b);  \n{ \n return a+b; \n} \n \n \nWAP to add two number using add(int, int) method \n1. class MethodDemo{ \n2.  public static void main(String[] args) { \n3.   int a=10,b=20,c; \n4.   MethodDemo md=new MethodDemo(); \n5.   c=md.add(a,b); \n6.   System.out.println(\"a+b=\"+c); \n7.  }//main() \n \n8.   int add(int i, int j){ \n9.      return i+j; \n10.        } \n11. } \nOutput: \na+b=30 \n \n Actual parameters v/s Formal parameters \n\uf0b7 Values that are passed from the calling functions are known actual parameters. \n\uf0b7 The variables declared in the function prototype or definition are known as formal \nparameters. \n\uf0b7 Name of formal parameters can be same or different from actual parameters. \n\uf0b7 Sequence of parameter is important, not name. \n \nvoid main() \n{ \n    // body part \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1505, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1800ce8a-21d3-4ac7-8448-3662a737b7e1": {"__data__": {"id_": "1800ce8a-21d3-4ac7-8448-3662a737b7e1", "embedding": null, "metadata": {"page_label": "45", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dae985b2-2307-42bb-b856-7066c6347b55", "node_type": "4", "metadata": {"page_label": "45", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e1b437f47b872edde7b9399f50451d1f9affe28fcd6e5ebbea67759c376f19f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 13 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n Return Statement \n\uf0b7 The function can return only one value. \n\uf0b7 Function cannot return more than one value. \n\uf0b7 If function is not returning any value then return type should be void. \n \n \n \nWAP to calculate the Power of a Number using method \n1. class MethodDemo{ \n2. import java.util.*; \n3. public class PowerMethDemo1{ \n4. public static void main(String[] args){     \n5.   int num, pow, res;      \n6.   Scanner sc=new Scanner(System.in);     \n7.   System.out.print(\"enter num:\");     \n8.   num=sc.nextInt();     \n9.   System.out.print(\"enter pow:\");     \n10.   pow=sc.nextInt();    \n11.   PowerMethDemo1 pmd=new PowerMethDemo1();     \n12.   res = pmd.power(num, pow);     \n13.   System.out.print(\"ans=\"+res);  \n14.   } //main() \n15. int power(int a, int b){         \n16.     int i, r = 1;         \n17.     for(i=1; i<=b; i++)         \n18.     {   \n19.        r = r * a;         \n20.     }    \n21.     return r;     \n22.   }//power()     \n23. }//class \nOutput: \nenter num:5 \nenter pow:3 \nans=125", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1101, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e08db5aa-26f5-4a13-a995-70619c97b946": {"__data__": {"id_": "e08db5aa-26f5-4a13-a995-70619c97b946", "embedding": null, "metadata": {"page_label": "46", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0050b886-f95f-4df4-af3e-9c55ee983186", "node_type": "4", "metadata": {"page_label": "46", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d92bb6444b59cf10cd7a2620c037c0f640974a31c3abfe0dc2d40c3fae275a3a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 14 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n Types of Methods(Method Categories) \nFunctions can be divided in 4 categories based on arguments and return value. \n\uf0b7 Method without arguments and without return value: void add(); \n \n\uf0b7 Method without arguments and with return value: int add(); \n \n\uf0b7 Method with arguments and without return value: void add(int, int); \n \n\uf0b7 Method with arguments and with return value: int add(int, int); \n \nAdvantages of Method \nReduced Code Redundancy \n\uf0b7 Rewriting the same logic or code again and again in a program can be avoided. \nReusability of Code \n\uf0b7 Same function can be call from multiple times without rewriting code. \nReduction in size of program  \n\uf0b7 Instead of writing many lines, just function need to be called. \nSaves Development Time \n\uf0b7 Instead of changing code multiple times, code in a function need to be changed. \nMore Traceability of Code \n\uf0b7 Large program can be easily understood or traced when it is divide into functions. \nEasy to Test & Debug \n\uf0b7 Testing and debugging of code for errors can be done easily in individual function.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1139, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b0c2ede-4f53-4069-94cc-6216b071594f": {"__data__": {"id_": "7b0c2ede-4f53-4069-94cc-6216b071594f", "embedding": null, "metadata": {"page_label": "47", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2514a873-f337-40aa-bc70-b32e5789bc96", "node_type": "4", "metadata": {"page_label": "47", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e8877079f0d1086772e9f755239759f36115edf11242479fa61f88400ecfee4c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 15 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMethod Overloading \n\uf0b7 Definition:  When two or more methods are implemented that share same name but  \n  different parameter(s), the methods are said to be overloaded, and the  \n  process is referred to as method overloading. \n\uf0b7 Method overloading is one of the ways that Java implements polymorphism. \n\uf0b7 When an overloaded method is invoked, Java uses the type and/or number of arguments \nas its guide to determine which version of the overloaded method to actually call.  \n\uf0b7 E.g.  public void draw() \npublic void draw(int height, int width) \npublic void draw(int radius) \n\uf0b7 Thus, overloaded methods must differ in the type and/or number of their parameters.  \n\uf0b7 While in overloaded methods with different return types and same name & parameter are \nnot allowed, as the  return type alone is insufficient for the compiler to distinguish two \nversions of a method. \n \nMethod Overloading: Compile-time Polymorphism \n1. class Addition{ \n2. int i,j,k; \n3.   void add(int a){ \n4.  i=a; \n5.  System.out.println(\"add i=\"+i); \n6.   } \n7.   void add(int a,int b){\\\\overloaded add() \n8.  i=a; \n9.  j=b; \n10.  System.out.println(\"add i+j=\"+(i+j));   \n11.   } \n12. void add(int a,int b,int c){\\\\overloaded add() \n13.  i=a; \n14.  j=b; \n15.  k=c; \n16.  System.out.println(\"add i+j+k=\"+(i+j+k)); \n17.   } \n18. } \n19. class OverloadDemo{ \n20. public static void          main(String[] args){ \n21.   Addition a1= new Addition(); \n22.   //call all versions of add() \n23.  a1.add(20); \n24.  a1.add(30,50); \n25.  a1.add(10,30,60); \n26.  } \n27. } \n \nOutput: \nadd i=20 \nadd i+j=80 \nadd i+j+k=100", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1675, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8688bed-0e56-4141-a041-a3b17e1d606f": {"__data__": {"id_": "c8688bed-0e56-4141-a041-a3b17e1d606f", "embedding": null, "metadata": {"page_label": "48", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "536ca54f-82b3-45e2-8504-c37550f6ee08", "node_type": "4", "metadata": {"page_label": "48", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "71ec8bf7e680b757a1894cd54e4268876271e145cdefbff566c953fe203d2d09", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 16 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n Method Overloading :Points to remember \n\uf0b7 Method overloading supports polymorphism because it is one way that Java \nimplements the \u201cone interface, multiple methods\u201d paradigm. \n\uf0b7 Overloading increases the readability of the program. \n\uf0b7 There are two ways to overload the method in java \no By changing number of arguments \no By changing the data type \n\uf0b7 In java, method overloading is not possible by changing the return type of \nthe method only because of ambiguity. \n \nCan we overload java main() method? \n\uf0b7 Yes, by method overloading. We can have any number of main methods in a \nclass by method overloading \n\uf0b7 But JVM calls main () method which receives string array as arguments only.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 791, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32fb41df-752f-4385-8dd1-2087a2c6c18d": {"__data__": {"id_": "32fb41df-752f-4385-8dd1-2087a2c6c18d", "embedding": null, "metadata": {"page_label": "49", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0a99f145-3fe6-486c-bdf1-bd00041c0b62", "node_type": "4", "metadata": {"page_label": "49", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7525d09bacc87fd498616ab4db9cad6a191820ca5d7003daf72cb460bb6b3f82", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 17 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nScope, Lifetime and Visibility of a Variable \nWhenever we declare a variable, we also determine its scope, lifetime and visibility. \n \nScope Scope is defined as the area in which the declared variable is \u2018accessible\u2019.  \nThere are five scopes: program, file, function, block, and class. \nScope is the region or section of code where a variable can be accessed. \nScoping has to do with when a variable is accessible and used. \nLifetime The lifetime of a variable is the period of time in which the variable is \nallocated a space (i.e., the period of time for which it \u201clives\u201d). There are \nthree lifetimes in C: static, automatic and dynamic. \nLifetime is the time duration where an object/variable is in a valid state. \nLifetime has to do with when a variable is created and destroyed \nVisibility Visibility is the \u201caccessibility\u201d of the variable declared. It is the result of \nhiding a variable in outer scopes.  \n \nScope of a Variable \n \n \n \nScope Description \nLocal (block/function) \"visible\" within function or statement block from point of declaration \nuntil the end of the block. \nClass  \"seen\" by class members. \nFile(program) visible within current file. \nGlobal  visible everywhere unless \"hidden\".", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1306, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8862eb2e-781a-4e32-9849-3f6822c27771": {"__data__": {"id_": "8862eb2e-781a-4e32-9849-3f6822c27771", "embedding": null, "metadata": {"page_label": "50", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d55c31d3-22e5-45e9-bc98-d7a39955f214", "node_type": "4", "metadata": {"page_label": "50", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "50fea6e2bb0f86a96d5852dc5469e1bf95045f5b9d2d80f113406aff03183e27", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3 \u2013 Methods and Arrays \n \n 18 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nLifetime of a variable \n\uf0b7 The lifetime of a variable or object is the time period in which the variable/object has \nvalid memory. \n\uf0b7 Lifetime is also called \"allocation method\" or \"storage duration\u201c. \n Lifetime Stored \nStatic Entire duration of the program's execution. data segment \nAutomatic Begins when program execution enters the function or \nstatement block and ends when execution leaves the \nblock. \nfunction call stack \nDynamic Begins when memory is allocated for the object (e.g.,  \nby a call to  malloc() or using  new) and ends when \nmemory is deallocated (e.g., by a call to  free() or \nusing delete).  \n heap \n \nVariable Type Scope of a Variable Lifetime of a Variable \nInstance Variable Throughout the class except in \nstatic methods \nUntil object is available in the \nmemory \nClass Variable Throughout the class Until end of the Class  \nLocal Variable Throughout the block/function in \nwhich it is declared \nUntil control leaves the block", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1055, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51c0d53f-a883-4f56-8079-9bbce223ef24": {"__data__": {"id_": "51c0d53f-a883-4f56-8079-9bbce223ef24", "embedding": null, "metadata": {"page_label": "51", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8c04afa-9dc7-47d3-bab7-1b965644032f", "node_type": "4", "metadata": {"page_label": "51", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4a80e84dc3f68145290dc7de4d6aa632a08c33f8073c5a8448d9c7439595a3b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 1 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nIntroduction to Classes in java \nWhat is Class? \n\uf0b7 Class is derived datatype, it combines members of different datatypes into one. \n\uf0b7 Defines new datatype (primitive ones are not enough).                 \n\uf0b7 For Example: Car, College, Bus etc. \n\uf0b7 This new datatype can be used to create objects. \n\uf0b7 A class is a template for an object. \n \n \n \n \n \nIntroduction to Objects in java \nWhat is Object? \n\uf0b7 An object is an instance of a class. \n\uf0b7 An object has a state and behavior.  \n Example: A dog has  \n  states - color, name, breed as well as  \n  behaviors \u2013 barking, eating. \n\uf0b7 The state of an object is stored in fields (variables), while methods (functions) display the \nobject's behavior.  \n\uf0b7 An Object is a key to understand Object Oriented Technology. \n\uf0b7 An entity that has state and behavior is known as an object. e.g., Mobile, Car, Door, \nLaptop etc  \nclass Car{ \n String company; \n String model; \n double price; \n double mileage; \n \u2026\u2026\u2026 \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1043, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ece149d9-6598-4793-a254-47a5eeccc090": {"__data__": {"id_": "ece149d9-6598-4793-a254-47a5eeccc090", "embedding": null, "metadata": {"page_label": "52", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4ee7901a-cb2e-4af0-9e91-9ba796a8e75a", "node_type": "4", "metadata": {"page_label": "52", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1f10f04c1e0bc1b5511879a61ba25b625ff68e9fd04917cb07dddc51bbcfc584", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 2 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 Each and every object posses \n1. Identity \n2. State \n3. Behavior  \nPhilosophy of Object Oriented \n\uf0a7 Our real world is nothing but classification of objects \n\uf0a7 E.g. Human, Vehicle, Library, River, Watch, Fan, etc. \n\uf0a7 Real world is organization of different objects which have their own characteristics, \nbehavior \n\uf0a7 Characteristic of Human: Gender, Age, Height, Weight, Complexion, etc. \n\uf0a7 Behavior of Human: Walk, Eat, Work, React, etc. \n\uf0a7 Characteristic of Library: Books, Members, etc. \n\uf0a7 Behavior of Library: New Member, Issue Book, Return Book etc. \n\uf0a7 The OO philosophy suggests that the things manipulated by the program should \ncorrespond to things in the real world. \n\uf0a7 Classification is called a Class in OOP \n\uf0a7 Real world entity is called an Object in OOP \n\uf0a7 Characteristic is called Property in OOP \n\uf0a7 Behavior is called Method in OOP \n \n \nClasses and Objects", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 970, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3d821be-663b-4401-a243-8c41608c391b": {"__data__": {"id_": "b3d821be-663b-4401-a243-8c41608c391b", "embedding": null, "metadata": {"page_label": "53", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8c13c66-1012-4036-9f2d-256c03117b26", "node_type": "4", "metadata": {"page_label": "53", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5dfec8c2f959d51021580784eaa44de906def3c936736eae9455fe71b35a9cfe", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 3 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 Class can be defined in multiple ways \no A class is the building block. \no A class is a blueprint for an object. \no A class is a user-defined data type. \no A class is a collection of objects of the similar kind.  \no A class is a user-defined data type which combines data and methods. \no A class describes both the data and behaviors of objects. \n\uf0b7 Class contains data members (also known as field or property or data) and member \nfunctions (also known as method or action or behavior) \n\uf0b7 Classes are similar to structures in C. \n\uf0b7 Class name can be given as per the Identifier Naming Conventions. \n \nObject Definition:  \n\uf0b7 An Object is an instance of a Class. \n\uf0b7 An Object is a variable of a specific Class \n\uf0b7 An Object is a data structure that encapsulates data and functions in a single construct.  \n\uf0b7 Object is a basic run-time entity \n\uf0b7 Objects are analogous to the real-world entities.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 992, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6f2f7d8b-0e86-4236-afae-fd5d976d7202": {"__data__": {"id_": "6f2f7d8b-0e86-4236-afae-fd5d976d7202", "embedding": null, "metadata": {"page_label": "54", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c79798b1-451a-43d3-86d6-fa0df6b24c05", "node_type": "4", "metadata": {"page_label": "54", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c79dd3fdb686e32678dc59853abd1db5733f5a348b602d7a5232fca6a3399ae2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 4 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n \nCreating Object & Accessing members \n\uf0b7 new keyword creates new object \n\uf0b7 Syntax: \nClassName objName = new ClassName(); \n\uf0b7 Example : \nSmartPhone iPhone = new SmartPhone(); \n\uf0b7 Object variables and methods can be accessed using the dot (.) operator \n\uf0b7 Example: iPhone.storage = 8000; \nDeclaring an Object \n\uf0b7 When we create a class, we are creating a new data type. \n\uf0b7 Object of that data type will have all the attributes and abilities that are designed in \nthe class. \n\uf0b7 The new operator dynamically allocates (that is, allocates at run time) memory for an \nobject and returns a reference to it.  \n\uf0b7 This reference is, more or less, the address in memory of the object allocated by new.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 789, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "26db0622-eb05-4eb7-9f20-857aa91d20ee": {"__data__": {"id_": "26db0622-eb05-4eb7-9f20-857aa91d20ee", "embedding": null, "metadata": {"page_label": "55", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9662899b-9ddd-4928-8fab-0c81b3b417c5", "node_type": "4", "metadata": {"page_label": "55", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "95fe518d468437bef17d809751d8fab09124bc21ef9fcaf813851b796df89462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 5 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 This reference is then stored in the variable. Thus, in Java, all class objects must be \ndynamically allocated. \n \n \n \n\uf0b7 new operator dynamically allocates memory for an object \n\uf0b7 Here, s1 is a variable of the class type. \n\uf0b7 The class name followed by parentheses specifies the constructor for the class. \n\uf0b7 It is important to understand that new allocates memory for an object during run \ntime. \n \nAssigning Object Reference \n \n \nHere, r1 and r2 will both refer to the same \nobject. The assignment of r1 to r2 did not \nallocate any memory or copy any part of the \noriginal object. It simply makes r2 refer to the \nsame object as does r1 \nHere, r1 has been set to null, but r2 still points \nto the original object.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 815, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "818b1703-eea0-4efd-8e7c-f589f16793f2": {"__data__": {"id_": "818b1703-eea0-4efd-8e7c-f589f16793f2", "embedding": null, "metadata": {"page_label": "56", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cf954d2-a0a2-4a90-9e97-36400b8c1652", "node_type": "4", "metadata": {"page_label": "56", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f36f8c812d26d6a973edf3d26b2ef13751ab24d0655c3bf504731b1601272e11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 6 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWAP using class Person to display name and age \n1. class MyProgram {     \n2. public static void main(String[] args) {                          \n3.   Person p1= new Person();         \n4.   Person p2= new Person();         \n5.   p1.name=\"modi\";         \n6.   p1.age=71;         \n7.   p2.name=\"bachchan\";         \n8.   p2.age=80;         \n9.   System.out.println(\"p1.name=\"+p1.name);         \n10. System.out.println(\"p2.name=\"+p2.name);         \n11.   System.out.println(\"p1.age=\"+p1.age);         \n12.   System.out.println(\"p2.age=\"+p2.age);     \n13.  }//main() \n14. }//class myProgram \n \n15. class Person \n16. {     \n17.  String name;     \n18.  int age; \n19. }//class person \n20.  \nOutput: \np1.name=modi \np2.name=bachchan \np1.age=71 \np2.age=80", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "887c0d11-96de-4631-8bf5-a6b6fb8a1ea0": {"__data__": {"id_": "887c0d11-96de-4631-8bf5-a6b6fb8a1ea0", "embedding": null, "metadata": {"page_label": "57", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe24141f-6c6f-4216-b2b5-32ec15520587", "node_type": "4", "metadata": {"page_label": "57", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5dfbfc97b7af6a592998fb6c5cc66b6d4cae4446f779255f4528c7ec5c43b7db", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 7 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWAP using class Person to display name and age with method \n1. class MyProgram {     \n2. public static void main(String[] args){                          \n3.   Person p1=new Person();         \n4.   Person p2=new Person();         \n5.   p1.name=\"modi\";         \n6.   p1.age=71;  \n7.   p2.name=\"bachchan\";         \n8.   p2.age=80;         \n9.   p1.displayName();         \n10.   p2.displayName();         \n11.   p1.displayAge();         \n12.   p2.displayAge();  \n13.  } //main() \n14. } //class myProgram \n \n15. class Person{     \n16.  String name;     \n17.  int age; \n18.  public void displayName(){ \n19.   System.out.println(\"name=\"+name);     \n20.  }     \n21.  public void displayAge(){              \n22.    System.out.println(\"age=\"+age);           \n23.  } \n24. }//class person \nOutput: \nname=modi \nname=bachchan \nage=71 \nage=80", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 927, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "46de473a-11bf-4f4b-b769-2cfb3d4238f0": {"__data__": {"id_": "46de473a-11bf-4f4b-b769-2cfb3d4238f0", "embedding": null, "metadata": {"page_label": "58", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e8c68b6-f61f-4872-92e7-504eab0132d6", "node_type": "4", "metadata": {"page_label": "58", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8ba7addc747957798f68792663f6d2d5f0af282900a4b8bdd8d43f59e261f53e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 8 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP using class Rectangle and calculate area using method \n1. import java.util.*; \n2. class MyProgram {     \n3.   public static void main(String[] args){         \n4.   Rectangle r1=new Rectangle();         \n5.   Scanner sc=new Scanner(System.in);         \n6.   System.out.print(\"enter height:\");         \n7.   r1.height=sc.nextFloat();         \n8.   System.out.print(\"enter width:\");         \n9.   r1.width=sc.nextFloat();         \n10.   r1.calArea();     \n11.  } //main() \n12. }//class myProgram \n \n13. class Rectangle{     \n14. float height;     \n15. float width;     \n16. public void calArea() {         \n17. System.out.println( \"Area=\"+height*width);     \n18.  } //calArea() \n19. } //class \n \nOutput: \nenter height:30.55 \nenter width:20.44 \nArea=624.442", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 860, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1580cd8f-1013-4355-8313-efa590406574": {"__data__": {"id_": "1580cd8f-1013-4355-8313-efa590406574", "embedding": null, "metadata": {"page_label": "59", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e000f48a-aaaa-462a-aac0-0cc695c8c061", "node_type": "4", "metadata": {"page_label": "59", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c9fa8ebc481f73fa1a5c0758d6af7e339ac22fa2111ea7a50ea5372d55d6252e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 9 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nWAP using class Rectangle and calculate area with Return value \n1. import java.util.*; \n2. class MyProgram {     \n3. public static void main(String[] args){ \n4.   float area;         \n5.   Rectangle r1=new Rectangle();         \n6.   Scanner sc=new Scanner(System.in);         \n7.   System.out.print(\"enter height:\");         \n8.   r1.height=sc.nextFloat();         \n9.   System.out.print(\"enter width:\");         \n10.   r1.width=sc.nextFloat();         \n11.   area=r1.calArea();     \n12.   System.out.println(\u201cArea=\"+area); \n13.  }//main() \n14. }//class myProgram \n \n15. class Rectangle{     \n16. float height;     \n17. float width;     \n18. public float calArea() {         \n19.  return height*width;     \n20.  }//calArea() \n21. }//class \nOutput: \nenter height:30.55 \nenter width:20.44 \nArea=624.442 \n \nWAP using class Cube and calculate area using method with parameter \n1. import java.util.*; \n2. class MyProgramCube {     \n3.  public static void main \n4.    (String[] args){  \n5.   float area;        \n6.   Cube c1= new Cube();    \n7.   area=c1.calArea(10,10,10);     \n8.   System.out.println(\"area=\"+area); \n9.    }//main() \n10. }//class myProgram \n11. class Cube{     \n12. float height;     \n13. float width;     \n14. float depth;  \n15. float calArea(float h, float w, float d)  \n16. {   height=h; \n17.     width=w; \n18.     depth=d;     \n19.  return height*width*depth;  \n20.  }//calArea() \n21. }//class \nOutput: \narea=1000.0", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1535, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2af48ccb-0a5e-4b83-91dc-d7067a58ae62": {"__data__": {"id_": "2af48ccb-0a5e-4b83-91dc-d7067a58ae62", "embedding": null, "metadata": {"page_label": "60", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "da08a124-f7fe-4afd-b64f-93b422f4b831", "node_type": "4", "metadata": {"page_label": "60", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2da6e18c2ea4bc4802b519c69a4b14e020e05885b736f85eb3394622379eb58b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 10 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \nWAP using class Cube and calculate area of two objects \n1. import java.util.*; \n2. class MyProgramCube {     \n3. public static void main(String[] args){  \n4.    float area;        \n5.    Cube c1= new Cube(); //Obj1  \n6.    Cube c2= new Cube(); //Obj2  \n7.  System.out.println(\u201cc1 area=\u201c+c1.calArea(10,10,10)); \n8.  System.out.println(\u201cc2 area=\u201c+c2.calArea(20,20,20)); \n9.   } //main() \n10. } //class \n \n11. class Cube{     \n12. float height;     \n13. float width;     \n14. float depth;  \n15. float calArea(float h, float w, float d)  \n16. {   height=h; \n17.     width=w; \n18.     depth=d;     \n19.  return height*width*depth;  \n20.  } //calArea() \n21. } //class \n22.  \nOutput: \nc1 area=1000.0 \nc2 area=8000.0 \n \nClass vs. Object \nClass Object \nClass is a Blueprint or template. Object is the instance of a class. \nClass creates a logical framework that defines \nthe relationship between its members. \nWhen you declare an object of a class, you are \ncreating an instance of that class. \nClass is a logical construct. An object has physical reality. (i.e., an object \noccupies space in memory.) \nClass is a group or collection of similar object. \ne.g. Car \nAn Object is defined as real-world entity \ne.g.: Audi, Volkswagen, Tesla, Ferrari etc. \nClass is declared only once An Object can be created as many times as \nrequired \nClass doesn\u2019t allocate memory when it is \ncreated. \nAn Object allocates the memory upon creation \nClass can exist without its objects. An Object can\u2019t exist without a class. \nClass: Profession \nClass: Mobile \nClass: Subject \nClass: Student \nClass: Color \nObject: Doctor, Teacher, Lawyer, Politician\u2026 \nObject: iPhone, Samsung, 1plus\u2026 \nObject: Maths, English, Science, Computer\u2026 \nObject: John, Aarav, Smita\u2026 \nObject: Blue, Green, Red, Yellow, Violet, \nBlack\u2026", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1882, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "accf1851-0c9b-4f43-b445-f4db17f9bfe7": {"__data__": {"id_": "accf1851-0c9b-4f43-b445-f4db17f9bfe7", "embedding": null, "metadata": {"page_label": "61", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "888cc36f-35ab-426b-a27b-394bbd03e02a", "node_type": "4", "metadata": {"page_label": "61", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6839cf654b9275cffcc37435b98bd740fed255518ee44ddfdc008eb57399676a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 11 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nConstructor \n\uf0b7 A constructor in Java is a special type of method that is used to initialize objects.  \n\uf0b7 The constructor is called when an object of a class is created. \n\uf0b7 A constructor initializes an object immediately upon creation.  \n\uf0b7 It has the same name as the class in which it resides and is syntactically similar to a method. \n\uf0b7 JVM first allocates the memory for variables (obje cts) and then executes the constructor to \ninitialize instance variables. \n\uf0b7 The JVM calls it automatically when we create an object. \n\uf0b7 A constructor defines what happens when an object of a class is created. \n \n \nProperties of Constructor \n\uf0b7 Constructor is invoked automatically whenever an object of class is created. \n\uf0b7  Constructors do not have return types and they cannot return values, not even void. \n\uf0b7 All classes have constructors by default: if you do not create a class constructor yourself, Java \ncreates one for you known as default constructor. \n\uf0b7 Constructor is a method that is called at runtime during the object creation by using the new \noperator. The JVM calls it automatically when we create an object. \n\uf0b7 It is called and executed only once per object.  \n\uf0b7 It means that when an object of a class is created, constructor is called. When we create 2nd \nobject then the constructor is again called during the second time. \n \nTypes of Constructor \n \n \n \n \n \nclass Cube{     \ninstance variable1 \ninstance variable1 \n\u2026 \n Cube() \n { \n      //initailze object\n  \n } \n} //class", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1582, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7937d2b-7f65-4bbd-a22f-a012fd87eb01": {"__data__": {"id_": "c7937d2b-7f65-4bbd-a22f-a012fd87eb01", "embedding": null, "metadata": {"page_label": "62", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b308015d-0bcd-426b-82fd-04c5cf0b3f69", "node_type": "4", "metadata": {"page_label": "62", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6733578ab8338a526d92eca49730ec6ff303374be11059efd053345ba09d940b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 12 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nDefault Constructor \n\uf0b7 A constructor defines what occurs when an object of a class is created. \n\uf0b7 Most classes explicitly define their own constructors within their class definition but if no \nexplicit constructor is specified then java will automatically supply a default constructor. \n\uf0b7 Once you define your own constructor, the default constructor is no longer used. \n\uf0b7 The default constructor automatically initializes all instance variables to zero.  \n \nCode before compilation: \n \n \nCode after compilation: \n \n \n \n \nNo-Argument Constructor: MyMain.java \n1. class Cube {   \n2.  double width; \n3.  double height; \n4.  double depth;   \n5.  Cube()  \n6.  { \n7.   System.out.println(\"Constructing cube\"); \n8.   width = 10; \n9.   height = 10; \n10.  depth = 10; \n11.   }//Cube() \n12. }//class \n13. class MyMain{     \n14. public static void main(String[] args){         \n15.    Cube c=new Cube();      \n16.  } \n17. } \nNote:  If you implement any constructor then you no longer receive a \n default constructor from Java compiler. \n \nParameterized Constructor \nclass MyConst{    \n MyConst(){ \n  //Default Constructor\u2026 \n  }  \npublic static void main(String[] args)  {         \n    c=new MyConst();      \n } \n} \nclass MyConst {     \npublic static void main(String[] args) {         \n   MyConst c=new MyConst();      \n } \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1415, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c1d84dba-339a-4c21-834a-a87379cd294c": {"__data__": {"id_": "c1d84dba-339a-4c21-834a-a87379cd294c", "embedding": null, "metadata": {"page_label": "63", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc5ef580-785a-4ca8-b302-b675286b71eb", "node_type": "4", "metadata": {"page_label": "63", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "201cdbdc46c57b27aaeceb106e1a00b096f51d2742f3fae00a8194630ea41258", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 13 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nParameterized Constructor: MyMain.java \n1. class Cube {   \n2.  double width, height, depth; \n3.  Cube(double w, double h, double d)  \n4.   { System.out.println(\"Constructing cube\"); \n5.   width = w; \n6.   height = h; \n7.   depth = d; \n8.    }//Cube() \n9. }//class \n10. class MyMain{     \n11. public static void main(String[] args){         \n12.  Cube c=new Cube(10,10,10);      \n13.  } \n14. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 496, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f0b82ffe-7bde-4693-8057-9af248219ec7": {"__data__": {"id_": "f0b82ffe-7bde-4693-8057-9af248219ec7", "embedding": null, "metadata": {"page_label": "64", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93030057-49af-4768-9481-c5d99e024146", "node_type": "4", "metadata": {"page_label": "64", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d7228d6379e6cf51618d989331f39f1d77aa5afc2a3f43cd9621c5f2aa09932f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 14 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nCopy Constructor  \n\uf0b7 It is a special type of constructor that is used to create a new object using the existing object \nof a class that had been created previously.  \n\uf0b7 It creates a new object by initializing the object with the instance of the same class. \n \nCopy Constructor: MyProgramCopy.java \n1. class Student{   \n2.  String name; \n3.  int rollno; \n4.  Student(String s_name, int s_roll){ \n5.        System.out.println(\"ConstructorInvoked\"); \n6.         this.name=s_name; \n7.        this.rollno=s_roll; \n8.      } //Constructor1 \n \n9.  Student(Student s){ //CopyConstructor \n10.       System.out.println(\"CopyConstructor Invoked\"); \n11.      this.name=s.name; \n12.      this.rollno=s.rollno; \n13.    } //Constructor2 \n \n14.    public void display(){ \n15.     System.out.print(\"name=\"+name); \n16.     System.out.println(\"  rollno=\"+rollno); \n17.  } // display() \n18. } //class \n \n19. class MyProgramCopy {     \n20. public static void main(String[] args){       \n21.   Student s1=new Student(\"darshan\",101); \n22.   //invoking Copy Constructor  \n23.   Student s2=new Student(s1); \n24.   s1.display(); \n25.   s2.display(); \n26.  } //main() \n27. } //class myProgram \nOutput: \nConstructor Invoked \nCopyConstructor Invoked \nname=darshan  rollno=101 \nname=darshan  rollno=101 \n \nAdvantages of Copy Constructor \n\uf0b7 It is easier to use when our class contains a complex object with various parameters. \n\uf0b7 Whenever we need to add all the field of a class to another object, t hen just send the \nreference of previously created object. \n\uf0b7 One of the most importance of copy constructors is that there is no need for any typecasting. \n\uf0b7 Using a copy constructor, we can have complete control over object creation. \n\uf0b7 With Copy Constructor, we can pass object of the class as a parameter(pass by reference).", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1897, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fff754c0-01fc-4cc2-9b62-e4dbe4b1a845": {"__data__": {"id_": "fff754c0-01fc-4cc2-9b62-e4dbe4b1a845", "embedding": null, "metadata": {"page_label": "65", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dbf1fafd-2a61-4fc0-8511-97efbf8f77e4", "node_type": "4", "metadata": {"page_label": "65", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "bed70023222fdf3c265be41d3d5d2604b543094c7d052a44c3843d3f79ac51e2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 15 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWhy Constructor? \n\uf0b7 The pivotal purpose of constructor is to initialize the instance variable of the class. \n\uf0b7 We use constructors to initialize the object with the default or initial state.  \n\uf0b7 Through constructor, we can request the user of that class for required dependencies. \n\uf0b7 A constructor within a class allows constructing the object of the class at runtime.  \n\uf0b7 Allocates appropriate memory to objects. \n\uf0b7 If we need to execute some code at the time of ob ject creation, we can write them inside \nthe constructor. \n\uf0b7 Example: \no If we talk about a Cube class then class variables are width, height and depth.  \no But when it comes to creating its object( i.e. Cube will now exist in the \ncomputer\u2019s memory), then can a cube be there with no value defined for its \ndimensions? The answer is \u201cNO\u201d.  \no So constructors are used to assign values to the class variables at the time of \nobject creation. \n \nWhen to use Constructor? \n\uf0b7 When we need to execute some code at the time of object creation. \n\uf0b7  Used for the initialization of instance variables. \n\uf0b7 To assign the default value to instance variables. \n\uf0b7 To initializing objects of the class. \n \nConstructor() vs. Method() \n Constructor() Method() \nNaming Constructor name must be same as \nclass name. \nMethod name can be anything. \nReturn \ntypes \nConstructor does not have any return \ntype, not even void. \nMethod must have return types, at \nleast void. \nCall Constructor can be invoked implicitly \nwhen object is created. \nMethod is called by the programmer. \nInvoked explicitly. \nPurpose To initialize an object To execute the code \nInheritance Constructor cannot be inherited by \nsubclass. \nMethod can be inherited by subclass.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1794, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4716bbba-4ca7-4aa8-a903-0a078c4f22cf": {"__data__": {"id_": "4716bbba-4ca7-4aa8-a903-0a078c4f22cf", "embedding": null, "metadata": {"page_label": "66", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c2051a7-0c5d-4f93-b8c5-b9ab9816071a", "node_type": "4", "metadata": {"page_label": "66", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0ffb09d179646c609ad8ebe1d24abfd0d5c63a036f44a4471505a461a67018f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 16 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nConstructor Overloading \n\uf0b7 Constructor overloading in Java is a technique of having more than on e constructor with \ndifferent parameter lists.  \n\uf0b7 They are arranged in a way that each constructor performs a different task.  \n\uf0b7 They are differentiated by the compiler by the number of parameters in the list and their \ntypes. \n \nConstructor Overloading \n1. class Balance{ \n2.  int accNo; \n3.  double bal; \n4.  Balance(){ \n5.    System.out.println(\"inside const1\"); \n6.    bal=0; \n7.  } \n8.  Balance(double b){ \n9.    System.out.println(\"inside const2\"); \n10.      bal=b; \n11.  } \n12. Balance(int a,double b){ \n13.    System.out.println(\"inside const3\"); \n14.    bal=b; \n15.    accNo=a; \n16.  } \n17. } \n18. class Account{ \n19. public static void main(String  args[]){ \n20.    Balance b1= new Balance(); \n21.    Balance b2= new Balance(100); \n22.    Balance b3=new Balance(1201,10000); \n23.  System.out.println(\"b1.bal=\"+b1.bal); \n24.  System.out.println(\"b2.bal=\"+b2.bal); \n25.  System.out.println(\"b3.bal=\"+b3.bal+    \n       \"b3.accNo=\"+b3.accNo); \n26.  } \n27. } \n \nDestructor \n\uf0b7 Destructor is the opposite of the constructor. Constructor is used to initialize objects while \nthe destructor is used to delete or destroy the object that releases the resource occupied by \nthe object. \n\uf0b7 Definition: Destructor is an instance member function which is invoked automatically \nwhenever an object is going to be destroyed.  \n\uf0b7 In other words, a destructor is the last function that is going to be called before an object is \ndestroyed. \n\uf0b7 In java, there is a special method named garbage collector that automatically called when an \nobject is no longer used.  \n\uf0b7 When an object completes its life -cycle the garbage collector deletes that object and de -\nallocates or releases the memory occupied by the object.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1906, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a16c88d4-09b2-401a-b405-0eeebaef577f": {"__data__": {"id_": "a16c88d4-09b2-401a-b405-0eeebaef577f", "embedding": null, "metadata": {"page_label": "67", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31cbb412-e76f-47e1-9990-00667bfaa5a5", "node_type": "4", "metadata": {"page_label": "67", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0cf2c1375700402c5ca3fd779168614e5d94a8ba92fd52ed570463a0d7cde497", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 17 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 In C++, dynamically allocated objects must be manually released by use of a delete operator. \n\uf0b7 Java takes a different approach: it handles de-allocation automatically.  \n\uf0b7 The technique that accomplishes this is known as \u201cgarbage collection\u201d. \nWhy Destructor? \n\uf0b7 When we create an object of the class(using new), it occupies some space in the memory. If \nwe do not delete these objects, it remains in the memory and occupies unnecessary space. \n\uf0b7 To resolve this problem, we use the destructor.  \n\uf0b7 Remember that there is no concept of destructor in Java.  \n\uf0b7 Instead of destructor, Java provides the garbage collector that works the same as the \ndestructor.  \n\uf0b7 The garbage collector is a program (thread) that runs on the  JVM. It automatically deletes \nthe unused objects (objects that are no longer used) and free-up the memory.  \n\uf0b7 The programmer has no need to manage memory, manually. \nWorking of garbage collector(destructor) in java \n\uf0b7 When the object is created it occupies the space in the heap. These objects are used by the \nthreads.  \n\uf0b7 If the objects are no longer used by the thread it becomes eligible for the garbage collection. \n\uf0b7 The memory occupied by that object is now available for new objects that are being created.  \n\uf0b7 When the garbage collector destroys an object, the JRE calls  finalize() method to close the \nconnections such as database and network connection. \n \nStatic in Java \n \n \n\uf0b7 The static keyword is used for memory management.  \n\uf0b7 We can apply static keyword with variables, methods, blocks and nested classes.  \n\uf0b7 The static keyword belongs to the class than an instance of the class. \n\uf0b7 The static can be: \n1. Variable (also known as a class variable) \n2. Method (also known as a class method) \n3. Block \n4. Nested class", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1866, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e74a1021-7937-4327-b921-dfe42a7d8af5": {"__data__": {"id_": "e74a1021-7937-4327-b921-dfe42a7d8af5", "embedding": null, "metadata": {"page_label": "68", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9632360f-3bce-4b58-9ec7-e62b86086cf1", "node_type": "4", "metadata": {"page_label": "68", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f67fb7a1ad9d96a6c9cd54429113172664d283a78ca28d0c96159934878bb6bd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 18 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nStatic Variable \n\uf0b7 Static variables have a property of preserving their value even afte r they are out of their \nscope. \n\uf0b7 The static variable gets memory only once in the class area at the time of class loading. \n\uf0b7 Advantage of static variable : It makes program  memory efficient  (static variable saves \nmemory). \n\uf0b7 Syntax: static type variable_name; \n\uf0b7  \nCharacteristics of static variable: \n\uf0b7 It is initialized to zero  when the first object of its class is created. No other initialization is \nallowed. \n\uf0b7 Only one copy of that member is created for the entire class and is shared by all the objects \nof that class, no matter how many objects are created. \n\uf0b7 It is visible only within the class, but its lifetime is the entire program. \n\uf0b7 Static variables are normally used to maintain values common for all objects. \n\uf0b7 The class constructor does not initialize static variable. \n \nStatic Method vs Non-Static Method \n \n\uf0b7  \nCharacteristic of static method \n\uf0b7 A static method can call only other static methods and cannot call a non-static method from \nit. \n\uf0b7 A static method can be accessed directly by the class name and doesn\u2019t need any object \n\uf0b7 A static method cannot refer to \u201cthis\u201d or \u201csuper\u201d keywords in anyway \nRestrictions on static method \n1. The static method cannot use non static data member or call non-static method directly. \n2. this and super cannot be used in static context.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1499, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a491eaf2-a96c-4226-9241-b1afea6c9b6e": {"__data__": {"id_": "a491eaf2-a96c-4226-9241-b1afea6c9b6e", "embedding": null, "metadata": {"page_label": "69", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "71d871bb-5f2a-4d9c-941c-6ad7aa3451f4", "node_type": "4", "metadata": {"page_label": "69", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e605bc875d30a9f04eaead57ab170ea83ac193ccc33804361d9386ff41471592", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 19 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nStatic Method: WAP using class Rectangle and calculate area \n1. import java.util.*; \n2. class Rectangle{     \n3.  static float height;     \n4.  static float width;     \n5.  static void calArea() {         \n6.   System.out.println( \"Area= \"+height*width);     \n7.   } //calArea() \n8. } //class \n9. class MyRectangle {     \n10. public static void main(String[] args){         \n11.   Rectangle r1= new Rectangle();         \n12.   Scanner sc= new Scanner(System.in);         \n13.   System.out.print(\"enter height:\");         \n14.   r1.height=sc.nextFloat();         \n15.   System.out.print(\"enter width:\");         \n16.   r1.width=sc.nextFloat();         \n17.   Rectangle.calArea();     \n18.  } //main() \n19. } //class \nOutput: \nenter height:30.55 \nenter width:20.44 \nArea=624.442 \nStatic Block \n\uf0b7 Static block is executed exactly once, when the class is first loaded. \n\uf0b7 It is used to initialize static variables of the class. \n\uf0b7 It will be executed even before the main() method. \n \nHow to call static block in java? \n\uf0b7 Unlike method, there is no specified way to call a static block. \n\uf0b7 The static block executes automatically when the class is loaded in memory.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1261, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b21344ef-3d24-4f30-88cb-ee868ca3cbf6": {"__data__": {"id_": "b21344ef-3d24-4f30-88cb-ee868ca3cbf6", "embedding": null, "metadata": {"page_label": "70", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0b939f2c-e1a0-4f73-9296-3aff5dc4e35b", "node_type": "4", "metadata": {"page_label": "70", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "023a5b23ecb2f73d7727962f9364d36962b8baa0d6d925d78c027e8b57409d12", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 20 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nExample: Static Block, Method and Variable \n1. class StaticDemo { \n2.  static int a = 4; //static variable declared & initialized \n3.  static int b;  //static variable declared \n4.  static void dispValue(int x) { \n5.  System.out.println(\"Static method initialized.\"); \n6.  System.out.println(\"x = \" + x); \n7.  System.out.println(\"a = \" + a); \n8.  System.out.println(\"b = \" + b); \n9.  } //static method \n  \n10. static { \n11.   System.out.println(\"Static block initialized.\"); \n12.    b= a * 5; \n13.  } //static block \n14. public static void main(String args[]) { \n15.  System.out.println(\"inside main()...\"); \n16.  dispValue(44); \n17.  } //main() \n18. } //class \nOutput: \nStatic block initialized. \ninside main()... \nStatic method initialized. \nx = 44 \na = 4 \nb = 20 \nPoints to remember for static keyword \n1. When we declare a field static, exactly a single copy of that field is created and shared \namong all instances of that class. \n2. Static variables belong to a class, we can access them directly using class name. Thus, \nwe don't need any object reference. \n3. We can only declare static variables at the class level. \n4. We can access static fields without object initialization. \n5. Static methods can't be overridden. \n6. Abstract methods can't be static. \n7. Static methods can't use this or super keywords. \n8. Static methods can't access instance variables and instance methods directly. They need \nsome object reference to do so. \n9. A class can have multiple static blocks.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1588, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d7792318-54fe-4d6d-8f6c-1b39e24692d3": {"__data__": {"id_": "d7792318-54fe-4d6d-8f6c-1b39e24692d3", "embedding": null, "metadata": {"page_label": "71", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f5507c0-bf08-453c-8b28-8b15218dee87", "node_type": "4", "metadata": {"page_label": "71", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "943394fd9d526aabccc2f70cd57dd4a52314edac38ef5082a0ff48681dc62fb8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 21 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMutable and Immutable Objects \nThe content of mutable object can be changed, while content of immutable objects cannot be \nchanged.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 231, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b6fae8ea-8a42-4f18-a834-c4aae19cd802": {"__data__": {"id_": "b6fae8ea-8a42-4f18-a834-c4aae19cd802", "embedding": null, "metadata": {"page_label": "72", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e80fb77f-18b0-4d0e-93c9-67f2627fc319", "node_type": "4", "metadata": {"page_label": "72", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4dbbf3255985c0f37a8c4a3a8d7f9a2b4241b5b3f8bb616a99f7abc9411ac667", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 22 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nPassing Objects as Argument \nIn order to understand how and why we need to pass object as an argument in methods, lets see the  \nexample. \n \nExample: Passing Objects as Argument \n1. class Time{ \n2.  int hour; \n3.  int minute; \n4.  int second; \n5.  public Time(int hour, int minute, int second) { \n6.   this.second = second; \n7.   this.minute = minute; \n8.   this.hour = hour; \n9.  } \n \n10. void add(Time t) { \n11.  this.second += t.second; \n12.  if(this.second>=60) { \n13.   this.minute++; \n14.   this.second-=60; \n15. } \n16. this.minute += t.minute; \n17. if(this.minute>=60) { \n18.   this.hour++; \n19.   this.minute-=60; \n20. }//if \n21. this.hour += t.hour; \n22. } \n23. } \n24. public class TimeDemo { \n25.  public static void main(String[] args) { \n26.  Time t1 = new Time(11,59,55); \n27.  Time t2 = new Time(0,0,5); \n28.  t1.add(t2);//passing Object as an argument \n29.  System.out.println(t1.hour + \":\" + t1.minute + \":\" +   \n           t1.second); \n30. } \n31. } \n32.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1070, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6294c955-8ad3-4531-bb26-6426f7f85191": {"__data__": {"id_": "6294c955-8ad3-4531-bb26-6426f7f85191", "embedding": null, "metadata": {"page_label": "73", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36fdc9e4-1f60-40d5-80f9-95d5324d6802", "node_type": "4", "metadata": {"page_label": "73", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d4864132d1a391b8afa170402c010432e41e06e50e8337b3a364dfec8d25701", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 23 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nArray of Objects \n\uf0b7 We can create an array of object in java. \n\uf0b7 Similar to primitive data type array we can also create and use arrays of derived data types \n(class). \n \nExample: Array of Objects \n1. class Student{ \n2.  int rollNo; \n3.  String name; \n4.  public Student(int rollNo, String name) { \n5.       this.rollNo = rollNo; \n6.       this.name = name; \n7.  } \n8.  void printStudentDetail() { \n9.    System.out.println(\"| \"+rollNo+\" | -- | \"+name +\" |\"); \n10.  } \n11. } \n12. public class ArrayOfObjectDemo { \n13. public static void main(String[] args) { \n14. Student[] stu = new Student[3]; \n15. stu[0] = new Student(101,\"darshan\"); \n16. stu[1] = new Student(102, \"OOP\"); \n17. stu[2] = new Student(103,\"java\"); \n18. stu[0].printStudentDetail(); \n19. stu[1].printStudentDetail(); \n20. stu[2].printStudentDetail(); \n21. } \n22. } \nNested Class \n\uf0b7 Nested Class: Class within another class \n\uf0b7 Scope: Nested class is bounded by the scope of its enclosing class. \no E.g. class B is defined within class A, then B is known to A, but not outside of A. \n\uf0b7 A nested class has access to the members, including private members of the class in which it \nis nested.  \n\uf0b7 However, the enclosing class does not have access to the members of the nested class. i.e. \nClass B can access private member of class A, while reverse is not accessible.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1430, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b45d5071-7d46-4515-9fdb-4f9715691d1d": {"__data__": {"id_": "b45d5071-7d46-4515-9fdb-4f9715691d1d", "embedding": null, "metadata": {"page_label": "74", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08b5d0c7-3abb-4609-9f50-fc63cf85a4a6", "node_type": "4", "metadata": {"page_label": "74", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "13b5f2967c6bf16f8204cccb142672c849595beccf807646c978046ff41498b0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 24 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nTypes of Nested class: \n \nNon-Static Nested Class \n\uf0b7 The most imp type of nested class is the inner class. \n\uf0b7 An inner class is a non-static nested class. \n\uf0b7 It has access to all of the variables and methods of its outer class and may refer to them \ndirectly in the same way that other non-static member of the outer class do. \n \n \nNon-Static Nested Class: InnerOuterDemo.java \n1. class Outer{ \n2.  private int a=100;//instance variable  \n3.  void outerMeth(){   \n4.    Inner i= new Inner(); \n5.    System.out.println(\"inside outerMeth()...\"); \n6.    i.innerMeth(); \n7.  } \n8.  class Inner{ \n9.    int b=20; \n10.    void innerMeth(){    \n11.           System.out.println(\"inside innerMeth()...\"  \n12.          +(a+b)); \n13.   } \n14.   } //inner class \n15. } //outer class \n \n16. class InnerOuterDemo{ \n17. public static void main(String[]  args)  \n18.    { \n19.   Outer o= new Outer(); \n20.   o.outerMeth(); \n21.  } \n22. } //InnerOuterDemo \nOutput: \ninside outerMeth()... \ninside innerMeth()...120", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1097, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cec251bd-fe7c-4858-845b-3ed524c8e61b": {"__data__": {"id_": "cec251bd-fe7c-4858-845b-3ed524c8e61b", "embedding": null, "metadata": {"page_label": "75", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "736c8476-3c79-47fc-baf1-ce0f6bc2c252", "node_type": "4", "metadata": {"page_label": "75", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6b1bc3958060088d7fa07dff51e59ad45bd8c3364348bd58f40414f30c31d4ea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 25 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nStatic Nested Class: InnerOuterDemo \n\uf0b7 A static nested class is one which has the static modifier applied because it is static, it must \naccess the member of its enclosing class through an object. i.e. it can not refer to members \nof its enclosing class directly. \n\uf0b7 Because of this reason, static nested classes are rarely used.  \n \n \nStatic Nested Class: InnerOuterDemo \n1. class Outer{ \n2.   \n3.  void outerMeth(){   \n4.    Inner i= new Inner(); \n5.    System.out.println(\"inside outerMeth()...\"); \n6.    i.innerMeth(); \n7.  } \n8.  static class Inner{ \n9.    int b=20; \n10.    void innerMeth(){    \n11.           System.out.println(\"inside innerMeth()...\"  \n12.          +(a+b)); \n13.   } \n14.   } //inner class \n15. } //outer \n16. class InnerOuterDemo{ \n17. public static void main(String[]       args)  \n18.    { \n19.   Outer o= new Outer(); \n20.   o.outerMeth(); \n21.  } \n22. } //InnerOuterDemo \nOutput: \ninside outerMeth()... \ninside innerMeth()...120 \nPoints to remember: Inner class \n\uf0b7 Inner class implements a security mechanism in Java. \n\uf0b7 Reduces encapsulation, more organized code  by logically grouping the classes.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1229, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cfc0fe45-f4a2-4cdc-b143-e1add1e1c340": {"__data__": {"id_": "cfc0fe45-f4a2-4cdc-b143-e1add1e1c340", "embedding": null, "metadata": {"page_label": "76", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d7beb1c-030c-49c9-a521-744190aa9861", "node_type": "4", "metadata": {"page_label": "76", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "75674fbb30cc2227073e78f5f2d5e2feb8a7ba94eed59f0e9cbbed3bf4e47247", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 26 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nimport keyword \n\uf0b7 import keyword is used to import built -in and user-defined packages into your java source \nfile so that your class can refer to a class that is in another package by directly using its name. \n\uf0b7 There are 3 different ways to refer to class/interface that is present in different package \no import the class/interface you want to use. \no import all the classses/interfaces from the package. \no Using fully qualified name.  \n\uf0b7 We can import a class/interface of other package using a import keyword at the first l ine of \ncode. \n \n \n\uf0b7 We can import all the classes/interfaces of other package using a import keyword at the first \nline of code with the wildcard (*). \n \n\uf0b7 It is possible to use classes from other packages without importing the class using fully \nqualified name of the class. \n\uf0b7 Example : \n \n \n \n \n \n \n \n \n \n \n \njava.util.Scanner s = new java.util.Scanner(System.in); \nimport java.util.*; \npublic class DemoImport { \npublic static void main(String[] args) \n{ \nScanner s = new Scanner(System.in); \nDate d = new Date(); \n// Code \n} \n} \nimport java.util.Scanner; \npublic class DemoImport { \npublic static void main(String[] args) \n{ \nScanner s = new Scanner(System.in); \n// Code \n} \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1312, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "511132cf-6218-40e3-aa54-8709facdd2c0": {"__data__": {"id_": "511132cf-6218-40e3-aa54-8709facdd2c0", "embedding": null, "metadata": {"page_label": "77", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5eb5dadb-c00d-4d92-851d-204296e3c65c", "node_type": "4", "metadata": {"page_label": "77", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1873870a15b7cdc4ab3d267077433bff0c5307ecd20b31b1cfc1f701d2f65eee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4 \u2013 Objects & Classes \n \n 27 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nStatic Import \n\uf0b7 The static import feature of Java 5 facilitate the java programmer to access any static \nmember of a class directly. \n\uf0b7 Advantage: Less coding is required if you have to access any static member of a class more \nfrequently. \n\uf0b7 Disadvantage: If you overuse the static import feature, it makes the program unreadable \nand unmaintainable. \n \n \n \nAccess Control \n \n \n \n \nimport static java.lang.System.out; \npublic class S2{   \n  public static void main(String args[]){   \n   out.println(\"Hello main\");   \n  }   \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 627, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01af1717-58fd-4770-acc9-67814326d42f": {"__data__": {"id_": "01af1717-58fd-4770-acc9-67814326d42f", "embedding": null, "metadata": {"page_label": "78", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "094592ff-ca76-45b1-9899-d10bf5084415", "node_type": "4", "metadata": {"page_label": "78", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ccd956b1d195bef8bee26b27dc462c338f7c29fad6dfbd50509d9e402d295530", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 1 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nWhat is OOP? \n\uf0b7 OOP (Object-Oriented Programming) is a programming paradigm that is completely based \non \u2018objects\u2019.  \n\uf0b7 Object-Oriented Programs insists to have a lengthy and extensive design phase, which results \nin improved designs and fewer defects.  \n\uf0b7 Object-oriented programming provides a higher level way for programmers to envision and \ndevelop their applications.  \n\uf0b7 In an object -oriented programming language, less emphasis is placed upon the flow of \nexecution control. Instead, the program is viewed as a set of ob jects interacting with each \nother in defined ways.  \n\uf0b7 An OOP programmer can bind new software objects to make completely new \nprograms/system.  \n \nWhat is Object-Orientation? \n\uf0b7 Object-oriented modeling and design is a way of thinking about problems using models \norganized around real-world concepts. \n\uf0b7 The fundamental construct is object, which combine data structure and behavior. \n\uf0b7 Object-Oriented Models are useful for \no Understanding problems \no Communicating with application experts \no Modeling enterprises \no Preparing documentation \no Designing System \n \nThinking in objects and class relationships \nFew Real World Classes with behavior / action / methods", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1306, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3857dbc3-0c96-4ec7-be82-4cd2f95e1545": {"__data__": {"id_": "3857dbc3-0c96-4ec7-be82-4cd2f95e1545", "embedding": null, "metadata": {"page_label": "79", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc83e3fb-74cb-4070-b244-b58db0fdf8fa", "node_type": "4", "metadata": {"page_label": "79", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ccdccd00eabb1cdf077e5bc4ccd710fe24a67984d4d08cb1dbb67edd178bf5e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 2 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nFew of Real World Objects \n \n \nProcedural Programming v/s Object Oriented Programming \n \n \nProcedural Programming  Object Oriented Programming \nProgram is divided into functions Program is divided into classes & objects \nThe emphasis is on doing things The emphasis is on data \nPoor modeling to real world problems Strong modeling to real world problems \nDifficult to maintain large projects Easy to maintain large projects \nPoor data security Strong data security \nCode can\u2019t be reused in another project Code can be reused across the projects \nNot extensible Extensible  \nProductivity is low Productivity is high \nDon\u2019t provide support for new data types Provides support to new data types \nDon\u2019t provide automatic memory management Provides automatic memory management \ne.g. Pascal, C, Basic, Fortran e.g. C++, C#, Java", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 928, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e1a78f10-b94c-4952-ba60-0a74e2b59785": {"__data__": {"id_": "e1a78f10-b94c-4952-ba60-0a74e2b59785", "embedding": null, "metadata": {"page_label": "80", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c187e14d-2843-4e88-abb2-ed7ebcd97d34", "node_type": "4", "metadata": {"page_label": "80", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "530c2361640b73df53e092f48143ad6ebc488a0556a22d3973faedc568460b0d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 3 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nPrinciples of OOP \n  \n \nInheritance \n           \n \n\uf0b7 The mechanism  of a cl ass to derive properties and characteristics from another class is \ncalled Inheritance.  \n\uf0b7 Inheritance is the process, by which a class can acquire(reuse) the properties and methods \nof another class. \n\uf0b7 The mechanism of deriving a new class from an old class is called inheritance. \n\uf0b7 The new class is called derived class and old class is called base class. \n\uf0b7 It is the most important feature of Object Oriented Programming.  \n\uf0b7 Base Class: The class whose properties are inherited by sub class is called Base Class/Super \nclass/Parent class. \n\uf0b7 Derived Class:  The class that inherits properties from another class is called Sub \nclass/Derived Class/Child class.  \n\uf0b7 Inheritance is implemented using super class and sub class relationship in object -oriented \nlanguages. \n\uf0b7 The derived class may have all the features of the base class and the programmer can add \nnew features to the derived class. \n\uf0b7 Inheritance is also known as \u201cIS-A relationship\u201d between parent and child classes. \n\uf0b7 For Example : \no Car IS A Vehicle \no Bike IS A Vehicle  \no EngineeringCollege IS A College", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1265, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0f81e678-539a-4e49-89a5-09655665aeae": {"__data__": {"id_": "0f81e678-539a-4e49-89a5-09655665aeae", "embedding": null, "metadata": {"page_label": "81", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "85618e65-c3af-474d-8eb7-667f8acd02eb", "node_type": "4", "metadata": {"page_label": "81", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "738da439224e69c3f61cdd679ee25e3b1bd3839475c5a2c4f4fe5d58703e51ca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 4 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \no MedicalCollege IS A College \no MCACollege IS A College \nInheritance: Advantages \n\uf0b7 Promotes reusability \n\uf0b7 When an existing code is reused, it leads to less development and maintenance costs. \n\uf0b7 It is used to generate more dominant objects. \n\uf0b7 Avoids duplicity and data redundancy. \n\uf0b7 Inheritance makes the sub classes follow a standard interface. \n \nImplementing Inheritance \nTo inherit a class, you simply incorporate the definition of one class into another by using \n\u201cextends\u201d keyword. \nSyntax: \n \n \nImplementing Inheritance in java \n \n \n                      \nclass subclass-name extends superclass-name { \n // body of class\u2026 \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 741, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "923de7a4-2eb2-4560-a0b9-857144a3f170": {"__data__": {"id_": "923de7a4-2eb2-4560-a0b9-857144a3f170", "embedding": null, "metadata": {"page_label": "82", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d8a18c18-56ef-4ffd-9e06-03bd4eece34c", "node_type": "4", "metadata": {"page_label": "82", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "329d55fef3233538fb863123574c2f5ef460eef276148bc33484abf54d70ff6e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 5 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \n1. class Person \n2. { \n3.   String name; \n4.     long contact;  \n5.    public void  dispContact()   {  \n System.out.println(\u201cnum=\u201d+contact); \n6.       } \n7. } \n8. class Employee extends Person  \n9. { \n10.     int empID; \n11.     String designation; \n12. } \n13. Class Customer extends Person  \n14. { \n15.  int customerID; \n16.     int invoiceNo; \n17. } \n \n \nProperty of Inheritance", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 490, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "79f1461a-9900-494b-9a40-8df36914b427": {"__data__": {"id_": "79f1461a-9900-494b-9a40-8df36914b427", "embedding": null, "metadata": {"page_label": "83", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4dff270a-b6a4-48a7-a91d-d4621104c33e", "node_type": "4", "metadata": {"page_label": "83", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e6aa39d7e91535b5bf4614baa4babb81cc5c8f0f3273a2eb0f1793c2871821f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 6 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nInheritanceDemo.java \n1. class A{ \n2.  protected int i; \n3.  int j; \n4.  void showij(){ \n5.  System.out.println(\"i=\"+i+\" j=\"+j); \n6.  } \n7. } \n \n8. class B extends A{ //inheritance \n9.  int k; \n10.  void showk(){ \n11.   System.out.println(\"k=\"+k); \n12.  } \n13.  void add(){ \n System.out.println(\"i+j+k=\"+(i+j+k)); \n14.  } \n15. } \n \n16. class InheritanceDemo{ \n17. public static void main(String[] args)  \n18.   { \n19.   A superObjA= new A(); \n20.   superObjA.i=10; \n21.   superObjA.j=20; \n22.   B subObjB= new B(); \n23.   subObjB.k=30; \n24.   superObjA.showij(); \n25.   subObjB.showk(); \n26.   subObjB.add(); \n27.  }   \n28. } \n \n \nTypes of Inheritance in Java", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 769, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4dffbe38-e457-427f-a9e0-f67e394086fe": {"__data__": {"id_": "4dffbe38-e457-427f-a9e0-f67e394086fe", "embedding": null, "metadata": {"page_label": "84", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93b1bc81-6a2a-4de7-ae6c-e18df843af9f", "node_type": "4", "metadata": {"page_label": "84", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8215abdef55ea15fba7041e9dcae3797bcf7f4a91e021aa06d5764b00ff9cc5d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 7 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nSingle Inheritance \n \n \n \nSingle Inheritance Example \n1. class A{ \n2.  protected int i; \n3.  int j; \n4.  void showij(){ \n5.  System.out.println(\"i=\"+i+\" j=\"+j); \n6.  } \n7. } \n8. class B extends A{ //inheritance \n9.  int k; \n10.  void showk(){ \n11.   System.out.println(\"k=\"+k); \n12.  } \n13.  void add(){ \n System.out.println(\"i+j+k=\"+(i+j+k)); \n14.  } \n15. } \n16. class InheritanceDemo{ \n17. public static void main(String[]    \n   args)  \n18.   { \n19.   A superObjA= new A(); \n20.   superObjA.i=10; \n21.   superObjA.j=20; \n22.   B subObjB= new B(); \n23.   subObjB.i=100 \n24.   subObjB.j=100; \n25.   subObjB.k=30; \n26.   superObjA.showij(); \n27.   subObjB.showk(); \n28.   subObjB.add(); \n29.  }   \n30. } \n \n \n \n \n \n \nNote: Multiple and Hybrid Inheritance \nis not supported in Java with the Class \nInheritance, we can still use those \nInheritance with Interface.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 971, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39ca05ae-168e-46d3-b778-b7fa34c9357e": {"__data__": {"id_": "39ca05ae-168e-46d3-b778-b7fa34c9357e", "embedding": null, "metadata": {"page_label": "85", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "51faaea8-4329-4396-b806-f4d6117810cf", "node_type": "4", "metadata": {"page_label": "85", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "87c3d156b4572039293f1f1e26ac1243d5eefa7667daa11a2ea95cd957b110d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 8 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 104, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e53d180-1b2a-4c59-bff1-d49e25d0c3b3": {"__data__": {"id_": "9e53d180-1b2a-4c59-bff1-d49e25d0c3b3", "embedding": null, "metadata": {"page_label": "86", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5636b0c-4054-4c3d-9129-bb4d03da6f83", "node_type": "4", "metadata": {"page_label": "86", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c551fc506cafc1eaaa7cdb5144dd9b425a5ad29f3da36be5f39a4655cfadcce0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 9 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nHierarchical Inheritance \n  \nHierarchical Inheritance Example \n1. class A{ \n2.  protected int i; \n3.  int j; \n4.  void showij(){ \n5.   System.out.println(\"inside class A:i=\"+i+\" j=\"+j); \n6.  } \n7. } \n8. class B extends A{ \n9.  int k; \n10. void showk(){   \n11.  System.out.println(\"inside class B:k=\"+k); \n12. } \n13. void add_ijk(){   \n System.out.println(i+\"+\"+j+\"+\"+k+\"=\"+(i+j+k)); \n14. }} \n15. class C extends A{ \n16. int m; \n17. void showm(){ \n18.  System.out.println(\"inside class C:k=\"+m); \n19. } \n20. void add_ijm(){ \n21.  System.out.println(i+\"+\"+j+\"+\"+m+\"=\"+(i+j+m)); \n22. } \n23. } \n24. class InheritanceLevel{ \n25.  public static void main(String[] args) { \n26.   A superObjA= new A(); \n27.   superObjA.i=10; \n28.   superObjA.j=20; \n29.   superObjA.showij(); \n30.   B subObjB= new B(); \n31.   subObjB.i=100; \n32.   subObjB.j=200; \n33.   subObjB.k=300; \n34.   subObjB.showk(); \n35.   subObjB.add_ijk(); \n36.   C subObjC= new C(); \n37.   subObjC.i=1000; \n38.   subObjC.j=2000;; \n39.   subObjC.m=3000;   \n40.   subObjC.showm(); \n41.   subObjC.add_ijm(); \n42.  }   \n43. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1182, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84fb5f29-1d56-4bcd-8e2b-3558bea169ec": {"__data__": {"id_": "84fb5f29-1d56-4bcd-8e2b-3558bea169ec", "embedding": null, "metadata": {"page_label": "87", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ec0f30d-99a1-441d-a34d-48d6b7604b02", "node_type": "4", "metadata": {"page_label": "87", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "89361183b8368d154ca89e88542de7424ae5d9ca91de181ec39c276278567448", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 10 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMultilevel Inheritance \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nMultilevel Inheritance \n1. class A{ \n2.  protected int i; \n3.  int j; \n4.  void showij(){ \n5.  System.out.println(\"inside class A:i=\"+i+\" j=\"+j); \n6.  } \n7. } \n8. class B extends A{ \n9.  int k; \n10.  void showk(){   \n11.  System.out.println(\"inside class B:k=\"+k); \n12.  } \n13.  void add_ijk(){ \n System.out.println(i+\"+\"+j+\"+\"+   \n k+\"=\"+(i+j+k)); \n14.  }} \n15. class C extends B{ \n16.  int m; \n17.  void showm(){ \n18.  System.out.println(\"inside class C:k=\"+m); \n19.  } \n20.  void add_ijkm(){ \n21.  System.out.println(i+\"+\"+j+  \n \"+\"+k+\"+\"+m+\"=\"+(i+j+k+m)); \n22.  } \n23. } \n24. class InheritanceMultilevel{ \n25.  public static void main(String[] args) { \n26.   A superObjA= new A(); \n27.   superObjA.i=10; \n28.   superObjA.j=20; \n29.   superObjA.showij(); \n30.   B subObjB= new B(); \n31.   subObjB.i=100; \n32.   subObjB.j=200; \n33.   subObjB.k=300; \n34.   subObjB.showk(); \n35.   subObjB.add_ijk(); \n36.   C subObjC= new C(); \n37.   subObjC.i=1000; \n38.   subObjC.j=2000; \n39.   subObjC.k=3000; \n40.   subObjC.m=4000;   \n41.   subObjC.showm(); \n42.   subObjC.add_ijkm(); \n43.  }   \n44. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1302, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "752f322b-2dde-468f-a73c-21a1be3704a3": {"__data__": {"id_": "752f322b-2dde-468f-a73c-21a1be3704a3", "embedding": null, "metadata": {"page_label": "88", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "05e834e0-22f7-47c5-a86f-0d4ef71dd284", "node_type": "4", "metadata": {"page_label": "88", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "bf82a7a0558cfa65e26508dcf2d22cf2e66d74f40351961a8ae32ad5a377ec75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 11 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOutput: \ninside class A:i=10 j=20 \ninside class B:k=300 \n100+200+300=600 \ninside class C:k=4000 \n1000+2000+3000+4000=10000 \nDerived Class with Constructor \n \n \nOutput: \ninside default Constructor:CUBE \ninside Constructor:CUBEWEIGTH \ninside default Constructor:CUBE \nDerived Class with Constructor \n1. class Cube{ \n2.  protected double height,width,depth; \n3.  Cube(){ \n4.        System.out.println(\"inside default Constructor:CUBE\"); \n5.  } \n6.  double volume(){ \n7.        return height*width*depth; \n8.  } \n9. } \n10. class CubeWeight extends Cube{ \n11.  double weigth; \n12.  CubeWeight(double h,double w,double d, double m) \n13.  { \n14.    System.out.println(\"inside Constructor:CUBEWEIGTH\"); \n15.   height=h;C \n16.   width=w; \n17.   depth=d; \n18.   weigth=m; \n19.  }} \n20. class CubeInherit{ \n21.  public static void main(String[] args) { \n22. CubeWeight cw1= new CubeWeight(10,10,10,20.5); \n23. CubeWeight cw2= new CubeWeight(100,100,100,200.5); \n24. System.out.println(\"cw1.volume()=\" +cw1.volume()); \n25. System.out.println(\"cw2.volume()=\"+cw2.volume()); \n26.   }}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1177, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "80b264a6-2305-4c8f-9fc4-4c9f87a92370": {"__data__": {"id_": "80b264a6-2305-4c8f-9fc4-4c9f87a92370", "embedding": null, "metadata": {"page_label": "89", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16f2c195-a0ae-41d6-a5e4-1aa991095497", "node_type": "4", "metadata": {"page_label": "89", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "28c34248ee8fee9e48093ea3b0267edef65dc028461de717300191e9fe258586", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 12 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \ninside Constructor:CUBEWEIGTH \ncw1.volume()=1000.0 \ncw2.volume()=1000000.0", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83a4b02f-4df5-4f9b-bb4d-693b8697eaf8": {"__data__": {"id_": "83a4b02f-4df5-4f9b-bb4d-693b8697eaf8", "embedding": null, "metadata": {"page_label": "90", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15255d20-a991-4b93-95f4-61cf1edbbfd5", "node_type": "4", "metadata": {"page_label": "90", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b5178af9e8ab84a3a499c6ad932eb13897767fac07be2d369d9595893a12d929", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 13 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nSuper Keyword \n\uf0b7 Whenever a subclass needs to refer to its immediate superclass, it can do so by use of the \nkeyword super.  \n\uf0b7 Super has two general forms: \n1. Calls the superclass constructor.  \n2. Used to access a members (i.e. instance variable or method) of the superclass. \n \nUsing super to Call Superclass Constructors \n \nNote: Call to super must be first statement in constructor", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 494, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "119554d3-0087-4e74-a1fc-7743599ea83c": {"__data__": {"id_": "119554d3-0087-4e74-a1fc-7743599ea83c", "embedding": null, "metadata": {"page_label": "91", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb394b6e-8745-42d9-b987-b20235bbd12c", "node_type": "4", "metadata": {"page_label": "91", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e284ec94e47f0c206b25779f15e1dfece89b887bbdc43d3f50d1901687326ed7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 14 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOutput: \nConstructor:CUBE \nConstructor:CUBEWEIGTH \nConstructor:CUBE \nConstructor:CUBEWEIGTH \ncw1.volume()=1000.0 \ncw1.weigth=20.5 \ncw2.volume()=1000000.0 \ncw2.weigth=200.5 \n \nsuper to Call Superclass Constructors \n1. class Cube{ \n2.  protected double height,width,depth; \n3.  Cube(double h,double w,double d){ \n4.   System.out.println(\"Constructor: CUBE\"); \n5.   height=h; \n6.   width=w; \n7.   depth=d; \n8.  } \n9.  double volume(){ \n10.  return height*width*depth; \n11.  } \n12. } \n13. class CubeWeight extends Cube{ \n14.  double weigth; \n15.  CubeWeight(double h,double w,double d, double m){ \n16.    super(h,w,d); //call superclassConstructor \n17.    System.out.println(\"Constructor:CUBEWEIGTH\"); \n18.    weigth=m; \n19.  } \n20. } \n21. class CubeInheritSuper{ \n22.   public static void main(String[] args) { \n23.  CubeWeight cw1= new CubeWeight(10,10,10,20.5); \n24.  CubeWeight cw2= new CubeWeight(100,100,100,200.5); \n25.  System.out.println(\"cw1.volume()=\"+cw1.volume()); \n26.  System.out.println(\"cw1.weigth=\"+cw1.weigth); \n27.  System.out.println(\"cw2.volume()=\"+cw2.volume()); \n28.  System.out.println(\"cw2.weigth=\"+cw2.weigth);  \n29.   } \n30. } \nUsing super to access members \n\uf0b7 The second form of super acts somewhat like this, except that it always refers to the \nsuperclass of the subclass in which it is used. \n \n\uf0b7 This second form of super is most applicable to situations in which member names of a \nsubclass hide members by the same name in the superclass.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1576, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "daf9808a-bf79-488b-a3da-099e81c51f3c": {"__data__": {"id_": "daf9808a-bf79-488b-a3da-099e81c51f3c", "embedding": null, "metadata": {"page_label": "92", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "91a47347-385a-4bcc-8ff9-18d119c370e5", "node_type": "4", "metadata": {"page_label": "92", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3549c790e92074d0b03e09cc0cdffae5938eed4b319db57fdbd020e624da42ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 15 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOutput: \nsuper.i=12 \nthis.i=56 \nUsing super to access members \n1. class A{ \n2.  int i; \n3. } \n4. class B extends A{ \n5.  int i,k; \n6.  B(int a,int b){ \n7.   super.i=a; \n8.   this.i=b; \n9.  } \n10.  void show(){ \n11.  System.out.println(\"super.i=\"+super.i); \n12.  System.out.println(\"this.i=\"+this.i); \n13.  } \n14. } \n15. class SuperMemberDemo{ \n16. public static void main(String[] args)     \n17.   { \n18.   B b= new B(12,56); \n19.    b.show(); \n20.  }   \n21. } \nPoints to remember for super \n\uf0b7 When a subclass calls super( ), it is calling the constructor of its immediate superclass.  \n\uf0b7 This is true even in a multileveled hierarchy.  \n\uf0b7 super( ) must always be the first statement executed inside a subclass constructor. \n\uf0b7 If a constructor does not explicitly call a superclass constructor, the Java compiler \nautomatically inserts a call to the no-argument constructor of the superclass. \n\uf0b7 The most common application of super keyword is to eliminate the ambiguity between \nmembers of superclass and sub class. \n \nAccess Control \nAccess Modifier   Description \nPrivate(-) The access level of a private modifier is only within the class. It cannot be \naccessed from outside the class. \nDefault(~) The access level of a default modifier is only within the package. It c annot be \naccessed from outside the package. If you do not specify any access level, it will \nbe the default. \nProtected(#) The access level of a protected modifier is within the package and outside the \npackage through child class. If you do not make the chi ld class, it cannot be \naccessed from outside the package. \nPublic(+) The access level of a public modifier is everywhere. It can be accessed from within \nthe class, outside the class, within the package and outside the package.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1869, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd62a585-c02e-4a9d-aaf4-9ffd4439b7be": {"__data__": {"id_": "dd62a585-c02e-4a9d-aaf4-9ffd4439b7be", "embedding": null, "metadata": {"page_label": "93", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82cfcfb3-b754-40be-ae20-52cf132abb8b", "node_type": "4", "metadata": {"page_label": "93", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "86b6fb149a53a7114d4cc658304f91e352a0454915be7d13fdd909339a090f70", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 16 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nPolymorphism \n\uf0b7 Polymorphism: It is a Greek term means, \u201cOne name many Forms\u201d. \n \n\uf0b7 Most important concept of object oriented programming \n\uf0b7 In OOP, Polymorphism is the ability of an object to take on many forms. \n\uf0b7 Polymorphism is the method in an object-oriented programming language that does different \nthings depending on the class of the object which calls it. \n\uf0b7 Polymorphism can be implemented using the concept of overloading and overriding. \n \nPolymorphism: Advantages \n\uf0b7 Single variable can be used to store multiple data types. \n\uf0b7 Easy to debug the codes. \n\uf0b7 It allows to perform a single act in different ways. \n\uf0b7 Polymorphism allows the object to decide which form of the function to implement at \ncompile-time (overloading) as well as run-time (overriding). \n\uf0b7 Reduces coupling, increases reusability and makes code easier to read.  \n \nImplementing Polymorphism \n \n \nMethod Overriding \n\uf0b7 In a class hierarchy, when a method in a subclass has the same name and type signature as a \nmethod in its superclass, then the method in the subclass is said to override the method in the \nsuperclass. \n\uf0b7 Definition: If subclass (child class) has the same method as declared in the parent class, it is \nknown as method overriding in Java.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1348, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2d2c724-28a3-4275-a5a1-59ef9ef713ca": {"__data__": {"id_": "b2d2c724-28a3-4275-a5a1-59ef9ef713ca", "embedding": null, "metadata": {"page_label": "94", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5ff7c4d-74ea-42e1-975e-51ef995367f5", "node_type": "4", "metadata": {"page_label": "94", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1abce051ea3eae872a89a146126edfe9df1b978f51d36b57176447dc57dedd6b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 17 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nMethod Overriding Demo \n1. class Shape{ \n2.  void draw(){ \n3.   System.out.println(\"Draw Shape\"); \n4.  } \n5. } \n6. class Circle extends Shape{ \n7.  void draw(){ \n8.   System.out.println(\"Draw Circle\"); \n9.  } \n10. } \n11. class Square extends Shape{ \n12.  void draw(){ \n13.   System.out.println(\"Draw Square\"); \n14.  } \n15. } \n16. class OverrideDemo{ \n17.  public static void main(String[] args) { \n18.  Circle c= new Circle(); \n19.  c.draw(); //child class meth() \n20.  Square sq= new Square(); \n21.  sq.draw();//child class meth() \n22.  Shape sh= new Shape(); \n23.  sh.draw();//parentClass meth() \n24.  } \n25. } \nOutput: \nDraw Circle \nDraw Square \nDraw Shape \nWhy Overriding? \n\uf0b7 Method overriding is used to provide the specific implementation of a method which is already \nprovided by its superclass. \n\uf0b7 Method overriding is used for runtime polymorphism. \n\uf0b7 By combining inheritance with overridden methods, a superclass can define the general form \nof the methods that will be used by all of its subclasses. \n\uf0b7 Dynamic, run -time polymorphism is one of the most powerful mechanisms that object -\noriented design brings to bear on code reuse and robustness. \n \nMethod Overriding: Points to remember \n\uf0b7 Method overriding occurs only when the names and the type signat ures of the two methods \nare identical. If they are not, then the two methods are simply overloaded. \n\uf0b7 The method must have the same name as in the parent class \n\uf0b7 The method must have the same parameter as in the parent class. \n\uf0b7 There must be an IS-A relationship (inheritance).", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1658, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3e9ab179-3cda-4a19-8c6c-f49b88a1863f": {"__data__": {"id_": "3e9ab179-3cda-4a19-8c6c-f49b88a1863f", "embedding": null, "metadata": {"page_label": "95", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8f94c17-6d76-47aa-a97a-745f76f2864e", "node_type": "4", "metadata": {"page_label": "95", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0650ea4120ad9fad104132b02f456185cfbd81875c0aa73ecff1521c97408544", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 18 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nOverloading vs Overriding \nMethod Overloading Method Overriding \nOverloading:Method with same name \ndifferent signature \nOverriding:Method with same name same \nsignature \nKnown as Compile-time Polymorphism Known as Run-time Polymorphism \nIt is performed within class. It occurs in two classes with IS-A (inheritance) \nrelationship. \nInheritance and method hiding is not involved \nhere. \nHere subclass method hides the super class \nmethod. \n \nDynamic Method Dispatch \n\uf0b7 Dynamic method dispatch is the mech anism by which a call to an overridden method is \nresolved at run time, rather than compile time. \n\uf0b7 Dynamic method dispatch is important because this is how Java implements run -time \npolymorphism. \nA a = new A(); //object of parent class \nB b = new B(); //object of child class \n \nA a = new B();//Up casting(Dynamic Method Dispatch) \n \nB b= new A(); //Error! Not Allowed", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 984, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b3c5b17-dfe5-46b2-b1b7-b6dcf1512dba": {"__data__": {"id_": "5b3c5b17-dfe5-46b2-b1b7-b6dcf1512dba", "embedding": null, "metadata": {"page_label": "96", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "90c9ddc4-2748-4720-960f-381a5280db47", "node_type": "4", "metadata": {"page_label": "96", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "db96598be099d5c4926dd146e8e14f5edab3166047345fdca67b86c9dfd7f742", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 19 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nDynamic Method Dispatch Demo \n1. class A{ \n2.  void display(){ \n3.   System.out.println(\"inside class A\"); \n4.  } \n5. } \n6. class B extends A{ \n7. void display(){ \n8.   System.out.println(\"inside class B\"); \n9.  } \n10. } \n11. class C extends A{ \n12. void display(){ \n13.   System.out.println(\"inside class C\"); \n14.  } \n15. } \n16. class DispatchDemo{ \n17.  public static void main(String[] args) { \n18.   A a = new A(); \n19.   B b = new B(); \n20.   C c = new C(); \n21.   A r; //obtain a reference of type A  \n22.   r=a; \n23.   r.display(); \n24.   r=b; \n25.   r.display(); \n26.   r=c; \n27.   r.display(); \n28.  } \n29. } \nOutput:  \ninside class A \ninside class B \ninside class \n\u201cfinal\u201d keyword \n\uf0b7 The final keyword is used for restriction.  \n\uf0b7 final keyword can be used in many context  \n\uf0b7 Final can be: \n1. Variable \nIf you make any variable as final, you cannot change the value of final variable (It will be \nconstant). \n2. Method \nIf you make any method as final, you cannot override it. \n3. Class \n     If you make any class as final, you cannot extend it.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1166, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fc185ee-b16c-412c-b478-447cca0fe5f3": {"__data__": {"id_": "8fc185ee-b16c-412c-b478-447cca0fe5f3", "embedding": null, "metadata": {"page_label": "97", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f281ebc7-7b94-4f30-85d6-aff0f2f404b3", "node_type": "4", "metadata": {"page_label": "97", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d5491a759ecf797711cb271193843b21188937fc13d5d914d6768850f955f963", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 20 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\u201cfinal\u201d as a variable \nCannot change the value of final variable. \n \n \n \n \n\u201cfinal\u201d as a method \nIf you make any method as final, you cannot override it. \n \n \n \npublic class FinalDemo { \n final int speedlimit=90;//final variable   \n void run(){   \n speedlimit=400; //ERROR!  \n }   \n public static void main(String args[]){   \nFinalDemo obj=new  FinalDemo();   \n  obj.run();   \n }   \n} \nclass BikeClass{   \n  final void run(){ \n System.out.println(\"Running Bike\"); \n  }   \n}   \n      \nclass Pulsar extends BikeClass{   \n   void run(){ \n System.out.println(\"Running Pulsar\");//ERROR! \n   }   \n      \n   public static void main(String args[]){   \n    Pulsar p= new Pulsar();   \n    p.run();   \n   }   \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 806, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b889c51e-3104-40d0-b280-d671e50cb7a1": {"__data__": {"id_": "b889c51e-3104-40d0-b280-d671e50cb7a1", "embedding": null, "metadata": {"page_label": "98", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5319a5b9-d85d-417a-b724-d30ee5b64ca6", "node_type": "4", "metadata": {"page_label": "98", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3004038ba4fd654380a271b25e999cb00a285969a8ad617f102751bd024224c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 21 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\u201cfinal\u201d as a Class \n   If you make any class as final, you cannot extend it.  \n \n \nEncapsulation \n\uf0b7 The action of enclosing something in. \n\uf0b7 In OOP, encapsulation refers to the bundling of data with the methods. \n \n\uf0b7 The wrapping up of data and functions into a single unit is known as encapsulation \n\uf0b7 The insulation of the data from direct access by the program is called data hi ding or \ninformation hiding. \n\uf0b7 It is the process of enclosing one or more details from outside world through access right. \nAdvantages \n\uf0b7 Protects an object from unwanted access  \n\uf0b7 It reduces implementation errors. \n\uf0b7 Simplifies the maintenance of the application and makes the application easy to understand. \n\uf0b7 Protection of data from accidental corruption. \n \n \n \n \n \nfinal class BikeClass{   \n   void run(){ \n System.out.println(\"Running Bike\"); \n   }   \n}        \nclass Pulsar extends BikeClass //ERROR! \n{   \n   void run(){ \n System.out.println(\"Running Pulsar\"); \n   }   \n      \n   public static void main(String args[]){   \n    Pulsar p= new Pulsar();   \n    p.run();   \n   }   \n}  \n Data Members(e.g. int a=10) \n   + \n  Methods(e.g. add() ) \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c7af7990-8be0-4010-af47-281891342db5": {"__data__": {"id_": "c7af7990-8be0-4010-af47-281891342db5", "embedding": null, "metadata": {"page_label": "99", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "671eb83d-2cbd-46c6-8cc2-46bc47146b4f", "node_type": "4", "metadata": {"page_label": "99", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "389db89f97e12c90d0487fc2a061b5d5c846f0b63a718b76ae6aa8f25a556682", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 22 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nAbstraction \n\uf0b7 Data abstraction is also termed as information hiding. \n\uf0b7 Abstraction is the concept of object -oriented programming that \u201crepresents\u201d only essential \nattributes and \u201chides\u201d unnecessary information.  \n\uf0b7 Abstraction is all about representing the simplified view and avoid complexity of the system. \n\uf0b7 It only shows the data which is relevant to the user. \n\uf0b7 In object-oriented programming, it can be implemented using Abstract Class. \nAdvantages: \n\uf0b7 It reduces programming complexity. \n\uf0b7 Example: \nA car is viewed as a car rather than its numerous individual components. \n \nAbstraction vs. Encapsulation \nAbstraction Encapsulation \nIt means act of removing/ withdrawing \nsomething unnecessary. \nIt is act of binding code and data together and \nkeep the data secure from outside \ninterference. \nApplied at Designing stage. Applied at Implementation stage. \nE.g. Interface and Abstract Class E.g. Access Modifier (public, protected, \nprivate) \nPurpose: Reduce code complexity Purpose: Data protection \n \nImplementing Abstraction \n\uf0b7 Abstraction is a process of hiding the implementation details from the user, only the \nfunctionality will be provided to the user.  \n\uf0b7 In other words, the user will have the information on what the object does instead of how the \nobject will do it. \n\uf0b7 Abstraction is achieved using Abstract classes and interfaces. \n\uf0b7 A class which contains the abstract keyword in its declaration is known as abstract class. \no Abstract classes may or may not contai n abstract methods, i.e., methods without \nbody ( public void get(); ) \no But, if a class has at least one abstract method, then the class must be declared \nabstract. \no If a class is declared abstract, it cannot be instantiated. \no To use an abstract class, we have to inherit it to another class and provide \nimplementations of the abstract methods in it.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1959, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92ca2f04-457e-4611-8ebd-83fb550e5937": {"__data__": {"id_": "92ca2f04-457e-4611-8ebd-83fb550e5937", "embedding": null, "metadata": {"page_label": "100", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce2cdce3-5457-4e81-b2ca-ff8ed85946d9", "node_type": "4", "metadata": {"page_label": "100", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "649c11df84233f5aed23b142fe3bbdf18de7629bbd06319d4fd47ccef766c0f2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 23 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nAbstract class \n \n \nAbstract class (Example) \n1. abstract class Car { \n2.  public abstract double getAverage(); \n3. } \n4. class Swift extends Car{ \n5.  public double getAverage(){ \n6.   return 22.5; \n7.  } \n8. } \n9. class Baleno extends Car{ \n10.  public double getAverage(){ \n11.   return 23.2; \n12.   } \n13. } \n14. public class MyAbstractDemo{ \n15.  public static void main(String ar[]){ \n16.   Swift s = new Swift(); \n17.   Baleno b = new Baleno(); \n18.   System.out.println(s.getAverage()); \n19.   System.out.println(b.getAverage()); \n20.  } \n21. } \n \n \nWhy Abstract Class? \n\uf0b7 Sometimes, we need to define a superclass that declares the structure of a given abstraction \nwithout providing a complete implementation. \n\uf0b7 The superclass will only define a generalized form that will be shared by all the subclasses. \n\uf0b7 The subclasses will fill the details of every method. \n\uf0b7 When a superclass is unable to create a meaningful implementation for a method. \n \nPoints to remember for Abstract Class \n\uf0b7 To declare a class abstract, you simply use the abstract keyword in front of the class keyword \nat the beginning of the class declaration.  \n\uf0b7 There can be no objects of an abstract class. That is, an abstract class cannot be directly \ninstantiated with the new operator. Such objects would be useless, because an abstract class \nis not fully defined. \n\uf0b7 Cannot declare abstract constructors, or abstract static methods.  \n\uf0b7 Any subclass of an abstract class must either implement all of the abstract methods in the \nsuperclass, or be itself declared abstract.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1668, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa80bb22-e0b4-41a2-b070-fb2171b1509b": {"__data__": {"id_": "fa80bb22-e0b4-41a2-b070-fb2171b1509b", "embedding": null, "metadata": {"page_label": "101", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65ef7e3e-ba2a-4986-825e-c34d9a907d01", "node_type": "4", "metadata": {"page_label": "101", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9635d96e037d2b41d0ad8d52e6859d8e6792d542239957bce41270bc6f72e994", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 24 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInterface \n\uf0b7 An interface is similar to an abstract class with the following exceptions \no All methods defined in an interface are abstract.   \no Interfaces doesn\u2019t contain any logical implementation \no Interfaces cannot contain instance variables.  However, they can contain public \nstatic final variables (ie. constant class variables) \n\uf0b7 Interfaces are declared using the \"interface\" keyword \n\uf0b7 Interfaces are more abstract than abstract classes \n\uf0b7 Interfaces are implemented by classes using the \"implements\" keyword \n\uf0b7 Interfaces are syntac tically similar to classes, but they lack instance variables, and their \nmethods are declared without any body. \n \nInterface: Syntax \n \n \n \n \naccess interface name  \n{ \nreturn-type method-name1(parameter-list); \ntype final-varname1 = value; \n} \naccess class classname \n    [extends superclass] \n    [implements interface [,interface...]] { \n// class-body \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1010, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d19a24ee-9587-4cbe-8f45-e7e7d8424cd6": {"__data__": {"id_": "d19a24ee-9587-4cbe-8f45-e7e7d8424cd6", "embedding": null, "metadata": {"page_label": "102", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "986c7444-2e5b-40c7-8f00-35a1b20c3914", "node_type": "4", "metadata": {"page_label": "102", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "077715a188028add7aaa5c30bb58df247285c157441f645063b958c22f8b80e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 25 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nInterface (Example) \n1. interface VehicleInterface { \n2.  int a = 10; \n3.  public void turnLeft(); \n4.  public void turnRight(); \n5.  public void accelerate(); \n6.  public void slowDown(); \n7. } \n8. public class DemoInterface{ \n9.  public static void main(String[] a) \n10. { \n11.  CarClass c = new CarClass(); \n12.  c.turnLeft(); \n13. } \n14. } \n15. class CarClass implements VehicleInterface \n16. { \n17. public void turnLeft() { \n18. System.out.println(\"Left\"); \n19. } \n20. public void turnRight() { \n21. System.out.println(\"Right\"); \n22. } \n23. public void accelerate() { \n24. System.out.println(\"Speed\"); \n25. } \n26. public void slowDown() { \n27. System.out.println(\u201cBrake\"); \n28. } \n29. } \nOutput: \nLeft", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 817, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5a73c747-9d03-4297-b3fb-fa9131fb25ec": {"__data__": {"id_": "5a73c747-9d03-4297-b3fb-fa9131fb25ec", "embedding": null, "metadata": {"page_label": "103", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4d345eb-ead8-4da3-a32d-62e01175934a", "node_type": "4", "metadata": {"page_label": "103", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "18c10acbd3aa4a3442ce6aa49561c40bc0d32299db4493f0b5d357b46c55fa59", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 26 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInterface: Partial Implementations \n\uf0b7 If a class includes an interface but does not fully implement the methods defined by that \ninterface, then that class must be declared as abstract. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nInterface: Partial Implementations \n1. interface VehicleInterface { \n2. int a = 10; \n3. public void turnLeft(); \n4. public void turnRight(); \n5. public void accelerate(); \n6. public void slowDown(); \n7. } \n8. public class DemoInterface{ \n9.  public static void main(String[] a) \n10. { \n11. CarClass c = new CarClass(); \n12. c.turnLeft(); \n13. } \n14. } \n15. abstract class CarClass implements VehicleInterface \n16. { \n17. public void turnLeft() { \n18.  System.out.println(\"Left\"); \n19. } \n20. public void turnRight() { \n21.  System.out.println(\"Right\"); \n22. } \n23. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 948, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "399734c1-bf89-43ae-ab1a-d8bdc76287ee": {"__data__": {"id_": "399734c1-bf89-43ae-ab1a-d8bdc76287ee", "embedding": null, "metadata": {"page_label": "104", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3164f871-e248-4348-942f-b57f0f459974", "node_type": "4", "metadata": {"page_label": "104", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d7f58c1b290de7c1f38773ac8d9351506af693b83fe5e769cddc70a818179ddb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 27 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n \n \nInterface:Example StackDemo.java \n1. interface StackIntf{ \n2.   public void push(int p); \n3.   public int pop(); \n4. } \n5. class CreateStack implements StackIntf{ \n6.   int mystack[]; \n7.   int tos; \n8.   CreateStack(int size){ \n9.    mystack= new int[size]; \n10.   tos=-1; \n11.  } \n12.  public void push(int p){ \n13.   if(tos==mystack.length-1){ \n14.    System.out.println(\"StackOverflow\"); \n15.   } \n16.   else{ \n17.    mystack[++tos]=p; \n18.   } \n19.  } \n20.  public int pop(){ \n21.   if(tos<0){ \n22.    System.out.println(\"StackUnderflow\"); \n23.    return 0; \n24.  } \n25.  else return mystack[tos--];   \n26.  } \n27. } \n28. class StackDemo{ \n29.  public static void main(String[] args) { \n30.  CreateStack cs1= new CreateStack(5); \n31.  CreateStack cs2= new CreateStack(8); \n32.  for(int i=0;i<5;i++)  \n33.   cs1.push(i); \n34.  for(int i=0;i<8;i++)  \n35.    cs2.push(i); \n36.  System.out.println(\"MyStack1=\"); \n37.  for(int i=0;i<5;i++)  \n38.   System.out.println(cs1.pop()); \n \n39.  System.out.println(\"MyStack2=\"); \n \n40.  for(int i=0;i<8;i++)  \n41.   System.out.println(cs2.pop()); \n42.  } \n43. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1213, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "720f92a0-9161-4622-a09c-173ff6a3b7da": {"__data__": {"id_": "720f92a0-9161-4622-a09c-173ff6a3b7da", "embedding": null, "metadata": {"page_label": "105", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e77a5c31-ee02-4d95-9054-aed9803ca9fb", "node_type": "4", "metadata": {"page_label": "105", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cde82324ac4ecea373b1aabeb17b9528b05ce85bcc168b66407af2f021d7365c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 28 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInterfaces Can Be Extended \n\uf0b7 One interface can inherit another by use of the keyword extends.  \n\uf0b7 The syntax is the same as for inheriting classes.  \n\uf0b7 When a class implements an interface that inherits another interface, it must provide \nimplementations for all methods defined within the interface inheritance chain.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 426, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "954c7471-d57b-46b4-9c59-9852ca881400": {"__data__": {"id_": "954c7471-d57b-46b4-9c59-9852ca881400", "embedding": null, "metadata": {"page_label": "106", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "848aa548-f1bc-4ca7-97f2-9cd6d4065210", "node_type": "4", "metadata": {"page_label": "106", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1cd43af9e53ee0456b1e805faf8c22f4e43988fbd6696db21b1c3af241265cb2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 29 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInterfaceHierarchy.java \n1. interface A{ \n2.  void method1(); \n3.  void method2(); \n4. } \n5. interface B extends A{ \n6.  void method3(); \n7. } \n8. interface C extends A{ \n9.  void method4(); \n10. } \n11. class InterfaceHierarchy{ \n12. public static void main(String[] args) { \n13.  MyClass1 c1=new MyClass1(); \n14.  MyClass2 c2=new MyClass2(); \n15.  c1.method1(); \n16.  c1.method2(); \n17.  c1.method3(); \n18.  c2.method1(); \n19.  c2.method2(); \n20.  c2.method4(); \n21.  } \n22. } \n23. class MyClass1 implements B{ \n24.  public void method1(){ \n25.   System.out.println(\"inside MyClass1:method1()\");} \n26.   \n27.  public void method2(){ \n28.    System.out.println(\"inside MyClass1:method2()\"); \n29.  } \n30.   \n31.  public void method3(){ \n32.    System.out.println(\"inside MyClass1:method3()\"); \n33.  } \n34. } \n35. class MyClass2 implements C{ \n36.  public void method1(){ \n37.  System.out.println(\"inside MyClass2:method1()\");} \n38.   \n39.  public void method2(){ \n40.  System.out.println(\"inside MyClass2:method2()\"); \n41.  } \n42.   \n43.  public void method4(){ \n44.  System.out.println(\"inside MyClass2:method4()\"); \n45.  } \n46. }", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1237, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b28b651a-4b18-4489-9871-23ad11cd58a5": {"__data__": {"id_": "b28b651a-4b18-4489-9871-23ad11cd58a5", "embedding": null, "metadata": {"page_label": "107", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23f769ff-7bd8-4b4f-9cdf-6acdb0f609e9", "node_type": "4", "metadata": {"page_label": "107", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "551b140520ceb617057a711325b948bfdc80360d1d552f6ecf138d02c29f7765", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 30 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nInterface: Points to Remember \n\uf0b7 Any number of classes can implement an interface.  \n\uf0b7 One class can implement any number of interfaces. \n\uf0b7 To implement an interface, a class must create the complete set of methods defined by the \ninterface. However, each class is free to determine the details of its own implementation. \n \nAbstract class vs. Interface \nAbstract class  Interface \nAbstract class doesn't support multiple \ninheritance. \nInterface supports multiple inheritance. \nAbstract class can have abstract and non-\nabstract methods. \nInterface can have only abstract methods. \nAbstract class can have final, non-final, static \nand non-static variables. \nInterface has only static and final variables. \nAn abstract class can extend another Java \nclass and implement multiple Java interfaces. \nAn interface can extend another Java interface \nonly. \nA Java abstract class can have class members \nlike private, protected, etc. \nMembers of a Java interface are public by \ndefault. \n \ninstanceof operator \nSyntax: \n (Object reference variable ) instanceof (class/interface type) \nExample: \n boolean result = name instanceof String; \nWrapper classes \n\uf0b7 A Wrapper class is a class whose object wraps or contains a primitive datatypes.  \n\uf0b7 When we create an object to a wrapper class, it contains a field and in this field, we can store \na primitive datatypes.  \n\uf0b7 In other words, we can wrap a primitive value into a wrapper class object. \n\uf0b7 Use of wrapper class : \no They convert primitive datatypes into objects. \no The classes in java.util package handles only objects and hence wrapper classes help \nin this case also. \no Data structures in the Collection framework, such as ArrayList and Vector, store only \nobjects (reference types) and not primitive types. \no An object is needed to support synchronization in multithreading.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1937, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "71ffe8d6-300e-48b1-b872-5fb8c54f0611": {"__data__": {"id_": "71ffe8d6-300e-48b1-b872-5fb8c54f0611", "embedding": null, "metadata": {"page_label": "108", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4971e5ef-698f-464c-8958-128f8ef4f2ef", "node_type": "4", "metadata": {"page_label": "108", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6bf6ffd34e04a2336b87e02336abee6c31e0e0463e4d96285dae2dbde09db770", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 31 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nPrimitive datatypes: Wrapper class \nPrimitive datatype Wrapper class Example \nbyte Byte Byte b = new Byte((byte) 10); \nshort Short Short s = new Short((short) 10); \nint Integer Integer i = new Integer(10); \nlong Long Long l = new Long(10); \nfloat Float Float f = new Float(10.0); \ndouble Double Double d = new Double(10.2); \nchar Character Character c = new Character('a'); \nboolean Boolean Boolean b = new Boolean(true); \n \nParsing the String \nUsing wrapper class we can parse string to any primitive datatype (Except char). \n \n \nBigInteger and BigDecimal \n\uf0b7 The BigInteger class found in java.math package is used for mathematical operation which \ninvolves very big integer calculations that are outside the limit of all available primitive data \ntypes.  \no For example factorial of 100 contains 158 digits in it so we can\u2019t sto re it in any \nprimitive data type available. \no There is no theoretical limit on the upper bound of the range because memory is \nallocated dynamically \n \n \n\uf0b7 The BigDecimal class found in java.math package provides operation for arithmetic, \ncomparison, hashing, rounding, manipulation and format conversion.  \no This method can handle very small and very big floating point numbers with great \nprecision. \n\uf0b7 An object of the String class represents a string of characters. \nbyte b1 =   Byte.parseByte(\"10\"); \nshort s =   Short.parseShort(\"10\"); \nint i =   Integer.parseInt(\"10\"); \nlong l =   Long.parseLong(\"10\"); \nfloat f =   Float.parseFloat(\"10.5\"); \ndouble d =  Double.parseDouble(\"10.5\"); \nboolean b2 =  Boolean.parseBoolean(\"true\"); \nchar c =   Character.parseCharacter('a'); \nBigDecimal bd = new BigDecimal(\"111111.000000000000000000025\"); \nSystem.out.println(bd); //111111.000000000000000000025 \nimport java.math.BigInteger; \npublic class DemoBigNumbers { \n public static void main(String[] args) { \n  BigInteger bi = new BigInteger(\"1234567891234567891234567890\"); \n  System.out.println(bi); // will return 1234567891234567891234567890 \n} \n}", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fc1ee5d9-61a7-44a7-8b30-2d1443b7d844": {"__data__": {"id_": "fc1ee5d9-61a7-44a7-8b30-2d1443b7d844", "embedding": null, "metadata": {"page_label": "109", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7df6724-9d5d-4e0b-9c41-88a706675cce", "node_type": "4", "metadata": {"page_label": "109", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e49341f904c866d23c4994df0032a7feb16ed2043749287c79ea4c7cde90fc45", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 32 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \n\uf0b7 The String class belongs to the java.lang package, which does not require an import \nstatement. \n\uf0b7 Like other classes, String has constructors and methods. \n\uf0b7 String class has two operators, + and += (used for concatenation). \nEmpty String : \n\uf0b7 An empty String has no characters.  Its length is 0. \n \n\uf0b7 Not the same as an uninitialized String. \n \n \n\uf0b7 Copy constructor creates a copy of an existing String. \n \nString Class \n\uf0b7 In java, a string is a sequence of characters. But, unlike many other languages that \nimplement strings as character arrays, java implements strings as objects of type String.  \n\uf0b7 When we create a String object, we are creating a string that cannot be changed. That is, \nonce a String object has been created, we cannot change the characters that comprise that \nstring. We can perform all types of operations.  \n\uf0b7 For those cases in which a modifiable string is desired, java provides two options: \nStringBuffer and StringBuilder. Both hold strings that can be modified after they are \ncreated. \n\uf0b7 The String, StringBuffer and StringBuilder classes ar e defined in java.lang. Thus, they are \navailable to all programs automatically. All three implements CharSequence interface. \n\uf0b7 String Constructor \n\uf0b7 The String class support several constructors. To create an empty String, you call the default \nconstructor. \n\uf0b7 For example, \n String s=new String(); \n this will create an instance of with no characters in it. \n String s = new String(\u201cComputer Deparatment\u201d);", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1595, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "21cb6b2f-5154-4c86-8113-5df0c5295112": {"__data__": {"id_": "21cb6b2f-5154-4c86-8113-5df0c5295112", "embedding": null, "metadata": {"page_label": "110", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3eab9638-1d48-4c0a-a80c-4ddff47d225c", "node_type": "4", "metadata": {"page_label": "110", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1e58a5ab87be978067b3f716837ed7af7242eab39cd6143d7b555de60e6ddedd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 33 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nclass StringEx  \n{ \n public static void main(String args[]) \n { \n  String s1=new String(\"Computer Department\"); \n  String s2; \n  s2=s1 + \"Darshan University\"; \n  System.out.println(s2); \n } \n} \n \nString Immutability \nAdvantage Disadvantage \nConvenient \u2014 Immutable objects are \nconvenient because several references can \npoint to the same object safely. \nLess efficient \u2014 you need to create a new string \nand throw away the old one even for small \nchanges. \nString name=\"DIET - Rajkot\"; \nfoo(name); \n//Some operations on String name \nname.substring(7,13); \nbar(name);  \nString word = \"java\"; \nchar ch = Character.toUpperCase( \n  word.charAt (0)); \nword =  ch + word.substring (1);  \n \n \nString Methods \nMethod Call Task Performed \nS2=s1.toLowerCase; Conver ts the string s1 to lowercase \nS2=s1.toUpperCase; Converts the string s1 to uppercase \nS2=s1.replace(\u2018x\u2019,\u2019y\u2019) Replace all appearances of x with y. \nS2=s1.trim() Remove white spaces at the beginning and end of the string s1 \nS1.equals(s2) Returns true if s1 and s2 are equal \nS1.equalsIgnoreCase(s2) Returns true if s1=s2, ignoring the case of characters \nS1.length() Gives the length of s1 \nS1.CharAt(n) Gives the nth character of s1 \nS1.compareTo(s2) Returns \u2013ve if s1<s2, +ve if s1>s2, and 0 if s1=s2 \nS1.concat(s2) Concatenates s1 and s2 \nS1.substring(n) Gives substring starting from nth character. \nS1.substring(n,m) Gives substring starting from nth char up to mth  \nString.ValueOf(p)  Returns the string representation of the specified type argument.", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1620, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ef275ebd-cf66-4950-a016-bbd35cfb6e7d": {"__data__": {"id_": "ef275ebd-cf66-4950-a016-bbd35cfb6e7d", "embedding": null, "metadata": {"page_label": "111", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "421207d8-0e6f-484f-967f-2555d2bfcd95", "node_type": "4", "metadata": {"page_label": "111", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "24a532085ad63201def29fde19ee4cba367d2e66ad5596f131f7144b498c1f55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 34 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \ntoString()  This object (which is already a string!) is itself returned.  \nS1.indexOf(\u2018x\u2019) Gives the position of the first occurrence of \u2018x\u2019 in the string s1 \nS1.indexOf(\u2018x\u2019,n) Gives the position of \u2018x\u2019 that occurs after nth position in the string s1 \nString.ValueOf(variable) Converts the parameter value of string representation \n \nStringBuffer \n\uf0b7 The java.lang.StringBuffer class is a thread-safe, mutable sequence of characters.  \n\uf0b7 Following are the important points about StringBuffer: \n\uf0a7 A string buffer is like a String, but can be modified (mutable). \n\uf0a7 It contains some particular sequence of characters, but the length and content of \nthe sequence can be changed through certain method calls. \n\uf0a7 They are safe for use by multiple threads. \n\uf0b7 StringBuffer defines these Constructor: \nStringBuffer() \nStringBuffer(int size) \nStringBuffer(String str) \nStringBuffer(CharSequence chars) \n\uf0b7 Remember : \u201cStringBuffer\u201d is mutable \n\uf0b7 As StringBuffer class is mutable, we need not to replace the reference with a new reference \nas we have to do it with String class. \n \n \nStringBuffer Methods \nMethod Description \nappend(String s) Used to append the specified string with this string. \ninsert(int offset, String s) Used to insert the specified string with this string at the \nspecified position. \nreplace(int startIndex, int endIndex, \nString str) \nUsed to replace the string from specified startIndex and \nendIndex. \ndelete(int startIndex, int endIndex) Used to delete the string from specified startIndex and \nendIndex. \nreverse() Used to reverse the string. \n \n \n \n \n \nStringBuffer str1 = new StringBuffer(\"Hello Everyone\"); \nstr1.reverse();  \n// as it is mutable can not write str1 = str1.reverse(); \n// it will change to value of the string itself \nSystem.out.println(str1); \n// Output will be \u201cenoyrevE olleH\u201d", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 1923, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3fa92031-c919-4de4-9545-f4faac7e7b39": {"__data__": {"id_": "3fa92031-c919-4de4-9545-f4faac7e7b39", "embedding": null, "metadata": {"page_label": "112", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c3e354b-ee7a-4678-83c8-7d7a572c298e", "node_type": "4", "metadata": {"page_label": "112", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "26e01181d906f9c30b089cbcc8568ec6760f6a30ecb8b019270f6b6ebea718ae", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 35 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nString Builder \n\uf0b7 Java StringBuilder class is used to create mutable string. \n\uf0b7 The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. \n\uf0b7 It is available since JDK 1.5. \n\uf0b7 It has similar methods as StringBuffer like append, insert, reverse etc\u2026 \nArrayList \n\uf0b7 The java.util.ArrayList class provides resizable-array and implements the List interface. \n\uf0b7 Following are the important points about ArrayList: \n\uf0b7 It implements all optional list operations and it also permits all elements, including null.  \n\uf0b7 It provides methods to manipulate the size of the array that is used internally to store the \nlist. \nArrayList (constructors) : \nSr Constructor & Description \n1 ArrayList() \nThis constructor is used to create an empty list with an initial capacity sufficient to hold \n10 elements. \n2 ArrayList(Collection<? extends E> c) \nThis constructor is used to create a list containing the elements of the specified \ncollection. \n3 ArrayList(int initialCapacity) \nThis constructor is used to create an empty list with an initial capacity. \n \nArrayList (method) \nSr Method & Description \n1 void add(int index, E element) \nThis method inserts the specified element at the specified position in this list. \n2 boolean addAll(Collection<? extends E> c) \nThis method appends all of the elements in the specified collection to the end of this list, \nin the order that they are returned by the specified collection's Iterator \n3 void clear() \nThis method removes all of the elements from this list. \n4 boolean contains(Object o) \nThis method returns true if this list contains the specified element. \n5 E get(int index) \nThis method returns the element at the specified position in this list. \n6 int indexOf(Object o) \nThis method returns the index of the first occurrence of the specified element in this list, \nor -1 if this list does not contain the element. \n7 boolean isEmpty() \nThis method returns true if this list contains no elements. \n8 int lastIndexOf(Object o)", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 2104, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2eb5de4-8312-4a53-a314-4e4fea3e0cd3": {"__data__": {"id_": "f2eb5de4-8312-4a53-a314-4e4fea3e0cd3", "embedding": null, "metadata": {"page_label": "113", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c50c304-e2f3-41ef-b6b3-c32a0eeb6a4e", "node_type": "4", "metadata": {"page_label": "113", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5c4d822087115049b03bea4c50fa03b1e6ebc98b10ed00a0ce9c6db7d6eba5fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5 \u2013 Object Oriented Thinking \n \n 36 \n \nProf. Swati R. Sharma | 3140705 \u2013 Object Oriented Programming - I \nThis method returns the index of the last occurrence of the specified element in this list, \nor -1 if this list does not contain the element. \n9 boolean remove(Object o) \nThis method removes the first occurrence of the specified element from this list, if it is \npresent. \n10 E set(int index, E element) \nThis method replaces the element at the specified position in this list with the specified \nelement. \n11 int size() \nThis method returns the number of elements in this list. \n12 Object[] toArray() \nThis method returns an array containing all of the elements in this list in proper sequence \n(from first to last element).", "mimetype": "text/plain", "start_char_idx": 1, "end_char_idx": 732, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4647e945-117a-4a58-8ff2-da92f53a862a": {"__data__": {"id_": "4647e945-117a-4a58-8ff2-da92f53a862a", "embedding": null, "metadata": {"page_label": "1", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "34f32bf2-cab4-4f29-988a-d8e3d83bb064", "node_type": "4", "metadata": {"page_label": "1", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fb466d09f5ea921cdab8033a043135482dd69c9c903804d84419677593766bbf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \nIntroduction to Data Structure \n\uf0b7 Computer is an electronic machine which is used for data processing and manipulation. \n\uf0b7 When programmer collects such type of data for processing, he would require to store all of them in \ncomputer\u2019s main memory. \n\uf0b7 In order to make computer work we need to know \no Representation of data in computer. \no Accessing of data. \no How to solve problem step by step. \n\uf0b7 For doing this task we use data structure. \n \n \nWhat is Data Structure? \n\uf0b7 Data structure is a representation of the logical relationship existing between individual elements of \ndata. \n\uf0b7 Data Structure is a way of organizing all data items that considers not only the elements stored but also \ntheir relationship to each other. \n\uf0b7 We can also define data structure as a mathematical or logical model of a particular organization of \ndata items. \n\uf0b7 The representation of particular data structure in the main memory of a computer is called as storage \nstructure. \n\uf0b7 The storage structure representation in auxiliary memory is called as file structure. \n\uf0b7 It is defined as the way of storing and manipulating data in organized form so that it can be used \nefficiently. \n\uf0b7 Data Structure mainly specifies the following four things \no Organization of Data \no Accessing methods \no Degree of associativity \no Processing alternatives for information \n\uf0b7 Algorithm + Data Structure = Program \n\uf0b7 Data structure study covers the following points \no Amount of memory require to store. \no Amount of time require to process. \no Representation of data in memory. \no Operations performed on that data.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1695, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2fa3c04c-622f-41f2-9ed8-09a8b662beaa": {"__data__": {"id_": "2fa3c04c-622f-41f2-9ed8-09a8b662beaa", "embedding": null, "metadata": {"page_label": "2", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a84acb4-157e-4903-b272-0ce07c3295cb", "node_type": "4", "metadata": {"page_label": "2", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "00f861a6278e13587fc4f91c4073e0891a3614975938cc52b42b6eb8f97e53fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \nClassification of Data Structure \n \n \n \nData Structures are normally classified into two broad categories \n1. Primitive Data Structure \n2. Non-primitive data Structure \nData types  \nA particular kind of data item, as defined by the values it can take, the programming language used, or \nthe operations that can be performed on it. \nPrimitive Data Structure \n\uf0b7 Primitive data structures are basic structures and are directly operated upon by machine instructions. \n\uf0b7 Primitive data structures have different representations on different computers. \n\uf0b7 Integers, floats, character and pointers are examples of primitive data structures. \n\uf0b7 These data types are available in most programming languages as built in type. \no Integer: It is a data type which allows all values without fraction part. We can use it for whole numbers. \no Float: It is a data type which use for storing fractional numbers. \no Character: It is a data type which is used for character values. \nDATA  \nSTRUCTURE \nPRIMITIVE \nINTEGER FLOATING \nPOINT \nCHARACTER POINTER \nNON \nPRIMITIVE \nARRAY LIST \nLINEAR LIST \nSTACK QUEUE \nNON \nLINEAR LIST \nGRAPH TREE \nFILE", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "036aa7d3-51dd-467e-9028-0f26ea6c4b1d": {"__data__": {"id_": "036aa7d3-51dd-467e-9028-0f26ea6c4b1d", "embedding": null, "metadata": {"page_label": "3", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "759569dd-8a42-4a3a-b2ce-2b47a3da9fca", "node_type": "4", "metadata": {"page_label": "3", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8e608a1cc773037c1557aff43c2dad5ca9be2c1c687c2957991430e1722108d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \nPointer: A variable that holds memory address of another variable are called pointer. \nNon primitive Data Type \n\uf0b7 These are more sophisticated data structures. \n\uf0b7 These are derived from primitive data structures. \n\uf0b7 The non-primitive data structures emphasize on structuring of a gro up of homogeneous or heterogeneous  \ndata items. \n\uf0b7 Examples of Non-primitive data type are Array, List, and File etc. \n\uf0b7 A Non-primitive data type is further divided into Linear and Non-Linear data structure \no Array: An array is a fixed-size sequenced collection of elements of the same data type. \no List: An ordered set containing variable number of elements is called as Lists. \no File: A file is a collection of logically related information. It can be viewed as a large list of records \nconsisting of various fields. \nLinear data structures \n\uf0b7 A data structure is said to be Linear, if its elements are connected in linear fashion by means of logically or in \nsequence memory locations. \n\uf0b7 There are two ways to represent a linear data structure in memory, \no Static memory allocation \no Dynamic memory allocation \n\uf0b7 The possible operations on the linear data structure are: Traversal, Insertion, Deletion, Searching, Sorting \nand Merging. \n\uf0b7 Examples of Linear Data Structure are Stack and Queue. \n\uf0b7 Stack: Stack is a data structure in which insertion and deletion operations are  performed at one end only. \no The insertion operation is referred to as \u2018PUSH\u2019 and deletion operation is referred to as \u2018POP\u2019 operation. \no Stack is also called as Last in First out (LIFO) data structure. \n\uf0b7 Queue: The data structure whi ch permits the insertion at one end and Deletion at another end, known as \nQueue. \no End at which deletion is occurs is known as FRONT end and another end at which insertion occurs is \nknown as REAR end. \no Queue is also called as First in First out (FIFO) data structure. \nNonlinear data structures \n\uf0b7 Nonlinear data structures are those data structure in which data items are not arranged in a sequence. \n\uf0b7 Examples of Non-linear Data Structure are Tree and Graph. \n\uf0b7 Tree: A tree can be defined as finite set of data items (nod es) in which data items are arranged in branches \nand sub branches according to requirement. \no Trees represent the hierarchical relationship between various elements. \no Tree consist of nodes connected by edge, the node represent ed by circle and edge lives connecting to \ncircle.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2532, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84fdbae2-e521-4d37-a300-974d68f5502f": {"__data__": {"id_": "84fdbae2-e521-4d37-a300-974d68f5502f", "embedding": null, "metadata": {"page_label": "4", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6687b18a-5ac5-4152-8b02-86c80392a504", "node_type": "4", "metadata": {"page_label": "4", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "bbded1310e245b321a0c18dc9482227a27b6d6daa488556b6791f4c5414b9b23", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n\uf0b7 Graph: Graph is a collection of nodes (Information) and connecting edges (Logical relation) between nodes. \no A tree can be viewed as restricted graph. \no Graphs have many types: \n\uf0a7 Un-directed Graph \n\uf0a7 Directed Graph \n\uf0a7 Mixed Graph \n\uf0a7 Multi Graph \n\uf0a7 Simple Graph \n\uf0a7 Null Graph \n\uf0a7 Weighted Graph \n \n \nDifference between Linear and Non Linear Data Structure \nLinear Data Structure Non-Linear Data Structure \nEvery item is related to its previous and next time. Every item is attached with many other items. \nData is arranged in linear sequence. Data is not arranged in sequence. \nData items can be traversed in a single run. Data cannot be traversed in a single run. \nEg. Array, Stacks, linked list, queue. Eg. tree, graph. \nImplementation is easy. Implementation is difficult. \n \n \nOperation on Data Structures \nDesign of efficient data structure must take operations to be performed on the data structures into account. The \nmost commonly used operations on data structure are broadly categorized into following types \n1. Create \nThe create operation results in reserving memory for program elements. This can be done by declaration \nstatement. Creation of data structure may take place either during compile -time or run -time. malloc() \nfunction of C language is used for creation. \n2. Destroy \nDestroy operation destroys memory space allocated for specified data structure. free() function of C \nlanguage is used to destroy data structure. \n3. Selection \nSelection operation deals with accessing a particular data within a data structure.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1653, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "10b4ba33-ec5b-4fee-8114-fe507c446de1": {"__data__": {"id_": "10b4ba33-ec5b-4fee-8114-fe507c446de1", "embedding": null, "metadata": {"page_label": "5", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "04686cde-dba4-4e88-befe-d0926f8ec288", "node_type": "4", "metadata": {"page_label": "5", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3617b202771bb72f95970393a49d01eb4fb63e70b6ef1b2b5f3149ca1550b7e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \n4. Updation \nIt updates or modifies the data in the data structure. \n5. Searching \nIt finds the presence of desired data item in the list of data items, it may also find the locations of all \nelements that satisfy certain conditions.  \n6. Sorting \nSorting is a pro cess of arranging all data items in a data structure in a particular order, say for example, \neither in ascending order or in descending order. \n7. Merging \nMerging is a process of combining the data items of two different sorted list into a single sorted list. \n8. Splitting  \nSplitting is a process of partitioning single list to multiple list. \n9. Traversal \nTraversal is a process of visiting each and every node of a list in systematic manner. \n \nTime and space analysis of algorithms \nAlgorithm \n\uf06c An essential aspect to data structures is algorithms. \n\uf06c Data structures are implemented using algorithms.  \n\uf06c An algorithm is a procedure that you can write as a C function or program, or any other language. \n\uf06c An algorithm states explicitly how the data will be manipulated. \nAlgorithm Efficiency \n\uf06c Some algorithms are more efficient than others. We would prefer to choose an efficient algorithm, so it \nwould be nice to have metrics for comparing algorithm efficiency. \n\uf06c The complexity of  an algorithm is a function describing the efficiency of the algorithm in terms of the \namount of data the algorithm must process.  \n\uf06c Usually there are natural units for the domain and range of this function. There are two main complexity \nmeasures of the efficiency of an algorithm \n\uf06c Time complexity \n\uf06e Time Complexity is a function describing the amount of time an algorithm takes in terms of the \namount of input to the algorithm.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1807, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "669a5a06-8a63-44df-bcd6-aac64626da6d": {"__data__": {"id_": "669a5a06-8a63-44df-bcd6-aac64626da6d", "embedding": null, "metadata": {"page_label": "6", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23bd9ee1-80fa-41dd-970e-6f787832ce05", "node_type": "4", "metadata": {"page_label": "6", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1cf32abdc4656e4820696d68cc55db7a1e5b6776889673f5b840661dd741f671", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Introduction to Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n\uf06e \"Time\" can mean the number of memory accesses performed, the number of comparisons betw een \nintegers, the number of times some inner loop is executed, or some other natural unit related to the \namount of real time the algorithm will take.  \n\uf06c Space complexity  \n\uf06e Space complexity is a function describing the amount of memory (space) an algorithm tak es in terms \nof the amount of input to the algorithm.  \n\uf06e We often speak of \"extra\" memory needed, not counting the memory needed to store the input itself. \nAgain, we use natural (but fixed-length) units to measure this.  \n\uf06e We can use bytes, but it's easier to use, say, number of integers used, number of fixed-sized structures, \netc. In the end, the function we come up with will be independent of the actual number of bytes \nneeded to represent the unit.  \n\uf06e Space complexity is som etimes ignored because the space used is minimal and/or obvious, but \nsometimes it becomes as important an issue as time. \n \nWorst Case Analysis \nIn the worst case analysis, we calculate upper bound on running time of an algorithm. We must know the case \nthat causes maximum number of operations to be executed. For Linear Search, the worst case happens when \nthe element to be searched is not present in the array. When x is not present, the search () functions compares \nit with all the elements of array [] one by one. Therefore, the worst case time complexity of linear search would \nbe. \nAverage Case Analysis \nIn average case analysis, we take all possible i nputs and calculate computing time for all of the inputs. Sum all \nthe calculated values and divide the sum by total number of inputs. We must know (or predict) distribution of \ncases. For the linear search problem, let us assume that all cases are uniformly  distributed. So we sum all the \ncases and divide the sum by (n+1).  \nBest Case Analysis \nIn the best case analysis, we calculate lower bound on running time of an algorithm. We must know the case \nthat causes minimum number of operations to be executed. In th e linear search problem, the best case occurs \nwhen x is present at the first location. The number of operations in worst case is constant (not dependent on n). \nSo time complexity in the best case would be.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2344, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fcd4ff7-8d8e-458c-9d4e-f5e79ec3f078": {"__data__": {"id_": "8fcd4ff7-8d8e-458c-9d4e-f5e79ec3f078", "embedding": null, "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fc7ece1-0583-4b38-b5f3-7edba87a2661", "node_type": "4", "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "49c082b78883e586611245e5db615a92f0e9ad52970f124093349f4d5a3e5cb0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "41a756a3-df54-4afb-989e-48d3d1e16b59", "node_type": "1", "metadata": {}, "hash": "efb0116d725689d9523b401921552e9a21d96cb1a052c78959ded51f9663774a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \nExplain Array in detail \nOne Dimensional Array \n\uf0b7 Simplest data structure that makes use of computed address to locate its elements is the one -\ndimensional array or vector; number of memory locations is sequentially allocated to the vector. \n\uf0b7 A vector size is fixed and therefore requires a fixed number of memory locations. \n\uf0b7 Vector A with subscript lower bound of \u201cone\u201d is represented as below\u2026. \n \nTwo Dimensional Array \n\uf0b7 Two dimensional arrays are also called table or matrix, two dimensional arrays have two subscripts \n\uf0b7 Two dimensional array in which elements are stored column by column is called as column major matrix \n\uf0b7 Two dimensional array in which elements are stored row by row is called as row major matrix \n\uf0b7 First subscript denotes number of rows and second subscript denotes the number of columns \n\uf0b7 Two dimensional array consisting of two rows and four columns as above F ig is stored sequentially by \ncolumns :  A [ 1, 1 ], A [ 2 , 1 ], A [ 1 , 2 ], A [ 2 , 2 ], A [ 1 , 3 ], A [ 2 , 3 ], A [ 1, 4 ], A [ 2, 4 ] \n\uf0b7 The address of element A [ i , j ] can be obtained by expression Loc (A [ i , j ]) = L0 + (j-1)*2 + i-1 \n\uf0b7 In general for two dimensional array consisting of n rows and m columns the address element A [ i , j ] is \ngiven by Loc (A [ i , j ]) = L0 + (j-1)*n + (i \u2013 1) \n\uf0b7 In row major matrix, array can be generalized to arbitrary lower and upper bound in its subscri pts, \nassume that b1 \u2264 I \u2264 u1 and b2 \u2264 j \u2264u2 \n \n\uf0b7 For row major matrix : Loc (A [ i , j ]) = L0 + ( i \u2013 b1 ) *(u2-b2+1) + (j-b2) \n[ 1 , 1 ] [ 1 , 2 ] [ 1 , 3 ] [ 1 ,m ] \n[ 2 , 1 ] [ 2 , 2 ] [ 2 , 3 ] [ 2 m ] \nb1, b2 \nRow major matrix \n[ n , 1 ] [ n , 2 ] [ n , 3 ] [ n , m ] \nb1, u2 \nu1, b2 \n[ 1 , 1 ] [ 1 , 2 ] [ 1 , 3 ] [ 1 , 4 ] \n[ 2 , 1 ] [ 2 , 2 ] [ 2 , 3 ] [ 2 , 4 ] \ncol 1 col 2 col 3 col 4 \nrow 1 \nrow 2 \nColumn major matrix \nNo of Columns = m = u2 \u2013 b2 + 1 \n \nA [i] \nL0 \nL0 + (i-1)C \n\uf0b7 L0 is the address of the first word allocated to the first element of \nvector A.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41a756a3-df54-4afb-989e-48d3d1e16b59": {"__data__": {"id_": "41a756a3-df54-4afb-989e-48d3d1e16b59", "embedding": null, "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fc7ece1-0583-4b38-b5f3-7edba87a2661", "node_type": "4", "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "49c082b78883e586611245e5db615a92f0e9ad52970f124093349f4d5a3e5cb0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fcd4ff7-8d8e-458c-9d4e-f5e79ec3f078", "node_type": "1", "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "999a3b6317610d57d03eaf0f0b38ebdd267d4735f1c291ac5b4c9e8abe6e6c3f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "\uf0b7 C words are allocated for each element or node \n\uf0b7 The address of Ai is given equation Loc (Ai) = L0 + C (i-1) \n\uf0b7 Let\u2019s consider the more general case of representing a vector A \nwhose lower bound for it\u2019s subscript is given by some variable b. \nThe location of Ai is then given by Loc (Ai) = L0 + C (i-b) \n\uf0b7", "mimetype": "text/plain", "start_char_idx": 2083, "end_char_idx": 2392, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "23ff13f1-fe3b-46f0-9f27-f6b1193f10be": {"__data__": {"id_": "23ff13f1-fe3b-46f0-9f27-f6b1193f10be", "embedding": null, "metadata": {"page_label": "8", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39647dc8-1c5e-4848-b5bd-fa75426bf8ed", "node_type": "4", "metadata": {"page_label": "8", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c0bf1200f31ac10cb48e5f298f77135ebfb74111651b672005d2c3afb7614121", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n \nApplications of Array \n1. Symbol Manipulation (matrix representation of polynomial equation) \n2. Sparse Matrix \nSymbol Manipulation using Array \n\uf0b7 We can use array for different kind of operations in polynomial equation such as addition, subtraction, \ndivision, differentiation etc\u2026 \n\uf0b7 We are interested in finding suitable representation for polynomial so that different operations like \naddition, subtraction etc\u2026 can be performed in efficient manner \n\uf0b7 Array can be used to represent Polynomial equation \n\uf0b7 Matrix Representation of Polynomial equation \n Y Y2 Y3 Y4 \nX X Y X Y2 X Y3 X Y4 \nX2 X2 Y X2 Y2 X2 Y3 X2 Y4 \nX3 X3 Y X3 Y2 X3 Y3 X3 Y4 \nX4 X4 Y X4 Y2 X4 Y3 X4 Y4 \n \ne.g. 2x2+5xy+Y2  \nis represented in matrix form as below \ne.g. x2+3xy+Y2+Y-X  \nis represented in matrix form as below \n  Y Y2 Y3 Y4 \n 0 0 1 0 0 \nX 0 5 0 0 0 \nX2 2 0 0 0 0 \nX3 0 0 0 0 0 \nX4 0 0 0 0 0 \n \n  Y Y2 Y3 Y4 \n 0 0 1 0 0 \nX -1 3 0 0 0 \nX2 1 0 0 0 0 \nX3 0 0 0 0 0 \nX4 0 0 0 0 0 \n \n \n\uf0b7 Once we have algorithm for converting the polynomial equation to an array representation and another \nalgorithm for converting array to polynomial equation, then different operations in array (matrix) will be \ncorresponding operations of polynomial equation \n \nWhat is sparse matrix? Explain \n\uf0b7 An mXn matrix is said to be sparse if \u201cmany\u201d of its elements are zero. \n\uf0b7 A matrix that is not sparse is called a dense matrix. \n\uf0b7 We can device a simple representat ion scheme whose space requirement equals the size of the non -\nzero elements.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1605, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9e790f68-bbef-4c8c-857f-0412234597d4": {"__data__": {"id_": "9e790f68-bbef-4c8c-857f-0412234597d4", "embedding": null, "metadata": {"page_label": "9", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a585341-1cf5-481d-8733-640349525f36", "node_type": "4", "metadata": {"page_label": "9", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4cacb751715857811a0b7dbca560825c34ae135958533f8b197103ce77b257cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n\uf0b7 Example:- \no The non-zero entries of a sparse matrix may be mapped into a linear list in row-major order.  \no For example the non-zero entries of 4X8 matrix of below fig.(a) in row major order are 2, 1, 6, 7, \n3, 9, 8, 4, 5 \n0 0 0 2 0 0 1 0 \n0 6 0 0 7 0 0 3 \n0 0 0 9 0 8 0 0 \n0 4 5 0 0 0 0 0 \n                                                Fig (a) 4 x 8 matrix \nTerms 0 1 2 3 4 5 6 7 8 \nRow 1 1 2 2 2 3 3 4 4 \nColumn 4 7 2 5 8 4 6 2 3 \nValue 2 1 6 7 3 9 8 4 5 \n                                 Fig (b) Linear Representation of above matrix \n \n\uf0b7 To construct matrix structure we need to record \n(a) Original row and columns of each non zero entries \n(b) No of rows and columns in the matrix \n\uf0b7 So each element of the array into which the sparse matrix is mapped need to have three fields : row, \ncolumn and value \n\uf0b7 A corresponding amount of time is saved creating the linear list representation over initialization of two \ndimension array. \n \n                                            A = \n \n\uf0b7 Here from 6X7=42 elements, only 10 are non zero.  A[1,3]=6, A[1,5]=9, A[2,1]=2, A[2,4]=7, A[2,5]=8, \nA[2,7]=4, A[3,1]=10, A[4,3]=12, A[6,4]=3, A[6,7]=5. \n\uf0b7 One basic method for storing such a sparse matrix is to store non -zero elements in one dimensional \narray and to identify each array elements with row and column indices fig (c). \n \n ROW  COLUMN  A \n1 1  3  6 \n2 1  5  9 \n0 0 6 0 9 0 0 \n2 0 0 7 8 0 4 \n10 0 0 0 0 0 0 \n0 0 12 0 0 0 0 \n0 0 0 0 0 0 0 \n0 0 0 3 0 0 5", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1567, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29a770ca-3da3-4766-8227-030e8e319f0c": {"__data__": {"id_": "29a770ca-3da3-4766-8227-030e8e319f0c", "embedding": null, "metadata": {"page_label": "10", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c5e26fa-87e9-4d59-a276-dd11e42a6171", "node_type": "4", "metadata": {"page_label": "10", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5253d9dc9ad7b98bec17bf92c4e7acfa18c7d6d37417eba77dd01072c4f6a1f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n3 2  1  2 \n4 2  4  7 \n5 2  5  8 \n6 2  7  4 \n7 3  1  10 \n8 4  3  12 \n9 6  4  3 \n10 6  7  5 \nFig (c ) \n   COLUMN  A \n  1 3  6 \n ROW 2 5  9 \n1 1 3 1  2 \n2 3 4 4  7 \n3 7 5 5  8 \n4 8 6 7  4 \n5 0 7 1  10 \n6 9 8 3  12 \n  9 4  3 \n  10 7  5 \n   \n \nFig(d) \n\uf0b7 A more efficient representation in terms of storage requirement and access time to the row of the \nmatrix is shown in fid (d). The row vector changed so that its i th element is the index to the first of the \ncolumn indices for the element in row I of the matrix. \nLinked Representation of Sparse matrix \nTypical node to represent non-zero element is \n \nRow \nNumber \nColumn \nNumber \nValue Pointer To \nNext Node \n 1 3 6  1 5 9  2 1 2  2 4 7  \n2 5 8  2 7 4  3 1 10  4 3 12  \n6 7 5 NULL 6 4 3  \nROW NO First Column \nfor row no COLUMN  NO", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 883, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b01154d2-2de2-47b1-aa50-87543f9098a8": {"__data__": {"id_": "b01154d2-2de2-47b1-aa50-87543f9098a8", "embedding": null, "metadata": {"page_label": "11", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b640d3b8-9248-4d35-b236-1bf5ea09d95a", "node_type": "4", "metadata": {"page_label": "11", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "98f3e84f1462436c3aa03189ae820cf1aa562926e948301da84fbd145d47105c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \n \nWrite algorithms for Stack Operations \u2013 PUSH, POP, PEEP \n\uf0b7 A linear list which allows insertion and deletion of an element at one end only is called stack. \n\uf0b7 The insertion operation is called as PUSH and deletion operation as POP. \n\uf0b7 The most and least accessible elements in stack are known as top and bottom of the stack respectively. \n\uf0b7 Since insertion and deletion operations are performed at one end of a stack, the elements can only be \nremoved in the opposite orders from that in which they were added to the stack; such a linear list is \nreferred to as a LIFO (last in first out) list. \n \n \n \n \n\uf0b7 A pointer TOP keeps track of the top element in the stack. Initially, when the stack is empty, TOP has a \nvalue of \u201cone\u201d and so on. \n\uf0b7 Each time a new element is inserted in the stack, the pointer is incremented by \u201cone\u201d b efore, the \nelement is placed on the stack. The pointer is decremented by \u201cone\u201d each time a deletion is made from \nthe stack. \nApplications of Stack \n\uf06c Recursion \n\uf06c Keeping track of function calls \n\uf06c Evaluation of expressions \n\uf06c Reversing characters \n\uf06c Servicing hardware interrupts \n\uf06c Solving combinatorial problems using backtracking. \n \nProcedure : PUSH (S, TOP, X) \n\uf0b7 This procedure inserts an element x to the top of a stack which is represented by a vector S containing N \nelements with a pointer TOP denoting the top element in the stack.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32e93560-36f4-4713-bd63-9eb55be73842": {"__data__": {"id_": "32e93560-36f4-4713-bd63-9eb55be73842", "embedding": null, "metadata": {"page_label": "12", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8b9ad8c-8c87-485b-9867-8037a19ebb71", "node_type": "4", "metadata": {"page_label": "12", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5b6a3de2a4a36fa709fdbbd85420262904e2058b2fb5fada5f2d23da64731a54", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n \nFunction : POP (S, TOP) \n\uf0b7 This function removes the top element f rom a stack which is represented by a vector S and returns this \nelement. TOP is a pointer to the top element of the stack. \n \nFunction : PEEP (S, TOP, I) \n\uf0b7 This function returns the value of the ith element from the TOP of the stack which is represented by a vector \nS containing N elements. The element is not deleted by this function. \n \n \n1. [Check for stack Underflow] \nIf TOP - I +1 \u2264 0 \nThen Write (\u2018STACK UNDERFLOW ON PEEP\u2019) \n Take action in response to Underflow \n  Exit \n2. [Return Ith element from top of the stack \nReturn (S[TOP \u2013 I + 1]) \n1. [Check for underflow of stack] \nIf  TOP = 0 \nThen Write (\u2018STACK UNDERFLOW ON POP\u2019) \n             Take action in response to underflow \n  Return \n2. [Decrement Pointer] \nTOP \u2190 TOP \u2013 1 \n3. [Return former top element of stack] \nReturn (S[TOP + 1]) \n1. [Check for stack overflow] \nIf  TOP \u2265 N \nThen  write (\u2018STACK OVERFLOW\u2019) \n Return \n2. [Increment TOP] \nTOP \u2190TOP + 1 \n3. [Insert Element] \nS[TOP] \u2190X \n4. [Finished] \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1143, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "52001f1f-c916-4534-9ef8-1a08c7a1fb56": {"__data__": {"id_": "52001f1f-c916-4534-9ef8-1a08c7a1fb56", "embedding": null, "metadata": {"page_label": "13", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd794995-95cf-4b17-abc3-b99a96104a76", "node_type": "4", "metadata": {"page_label": "13", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "09d346639dae37383ec33b508f3c6dd39ea4a1736e05839340f419bd2025e571", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \nWrite an algorithm to change the ith value of stack to value X \nPROCEDURE : CHANGE (S, TOP, X, I) \n\uf0b7 This procedure changes the value of the I th element from the top of the stack  to the value containing in X.  \nStack is represented by a vector S containing N elements. \n \n \n  \n1. [Check for stack Underflow] \nIf  TOP \u2013 I + 1 \u2264 0 \nThen Write (\u2018STACK UNDERFLOW ON CHANGE\u2019) \n  Return \n2. [Change Ith element from top of the stack] \nS[TOP \u2013 I + 1] \u2190 X \n3. [Finished] \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 572, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a28b43ba-ada3-4605-95d4-635094f890ef": {"__data__": {"id_": "a28b43ba-ada3-4605-95d4-635094f890ef", "embedding": null, "metadata": {"page_label": "14", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e42c261f-57d1-4f6f-b053-d951e204452f", "node_type": "4", "metadata": {"page_label": "14", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8de7c10f7343e2aac7ada3717f4d42d0e66e50d6d03a3eb125a5a66ed525b3a1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \nWrite an algorithm which will check that the given string belongs to following \ngrammar or not. L={wcwR | w \u0404 {a,b}*}(Where wR is the reverse of w) \nAlgorithm : RECOGNIZE \n\uf0b7 Given an input string named STRING on the alphabe t {a, b, c} which contains a blank in its rightmost \ncharacter position and function NEXTCHAR which retu rns the next symbol in STRING, this algorithm \ndetermines whether the contents of STRING belong to the above language. The vector S represents the \nstack, and TOP is a pointer to the top element of the stack. \n \n \n1. [Initialize stack by placing a letter \u2018c\u2019 on the top] \nTOP \u2190 1 \nS [TOP] \u2190 \u2018c\u2019 \n2. [Get and stack symbols either \u2018c\u2019 or blank is encountered] \nNEXT \u2190 NEXTCHAR (STRING) \nRepeat while NEXT \u2260 \u2018c\u2019 \n If NEXT = \u2018 \u2018 \n Then Write (\u2018Invalid String\u2019) \n             Exit \nElse Call PUSH (S, TOP, NEXT) \nNEXT \u2190 NEXTCHAR (STRING) \n3. [Scan characters following \u2018c\u2019; Compare them to the characters on stack] \nRepeat While S [TOP] \u2260 \u2018c\u2019 \n NEXT \u2190 NEXTCHAR (STRING) \n X \u2190 POP (S, TOP) \n If NEXT \u2260 X \n Then Write (\u2018INVALID STRING\u2019) \n             Exit \n4. [Next symbol must be blank] \nIf NEXT \u2260 \u2018 \u2018  \nThen Write (\u2018VALID STRING\u2019) \nElse Write (\u2018INVALID STRING\u2019) \n5. [Finished] \nExit", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1306, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a39d8ad8-3094-4d55-ad2f-9dba58ce8edf": {"__data__": {"id_": "a39d8ad8-3094-4d55-ad2f-9dba58ce8edf", "embedding": null, "metadata": {"page_label": "15", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65ea5242-fc03-4812-9c50-d344ec8aa34e", "node_type": "4", "metadata": {"page_label": "15", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a8d8c1e17d4eedbfa8e4f99df8879f0ea4243ceb7d6a83e64f0c4125e8511775", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 9 \n \nWrite an algorithm for push, pop and empty operations on stack. Using above \nfunctions write an algorithm to determine if an input character string is of the \nform aibi where i>=1 i.e. no of a should be equal to no of b \nAlgorithm RECOGNIZE \n\uf0b7 Given an input string named STRING on alphabet \u2018a\u2019 and \u2018b\u2019 which contain blank (\u2018 \u2018) on right most character \nfunction NEXTCHAR which returns the next symbol from STRING. This algorithm determines if an input string \nis of form aibi where i>1 i.e no of \u2018a\u2019 should be equal to no of \u2018b\u2019. the vector S represent the stack and TOP is \nthe pointer to the top element of stack. Counter is a counter B for \u2018b\u2019 occurrence. \n \n What is recursion? Write a C program for GCD using recursion. \n\uf0b7 A procedure that contains a procedure call to itself or a procedure call to second procedure  which \neventually causes the first procedure to be called is known as recursive procedure. \n\uf0b7 There are two important conditions that must be satisfied by any recursive procedure \na. Each time a procedure calls itself it must be nearer in some sense to a solution \nb. There must be a decision criterion for stopping the process or computation \n\uf0b7 There are two types of recursion \no Primitive Recursion: this is recursive defined function. E.g. Factorial function \no Non-Primitive Recursion: this is recursive use of procedure. E.g. Find GCD of given two nunbers \n1. [Initialize stack and counter] \n TOP \uf0df 0 \nCOUNTER_B \uf0df 0 \n2. [Get and stack character \u2018a\u2019 from whole string and count the occurrence of \u2018b\u2019 ] \nNEXT \uf0df NEXTCHAR(STRING) \nRepeat while NEXT != \u2018 \u2018 \n  IF NEXT = \u2018a\u2019 \n  Then PUSH (S,TOP,NEXT)   \n  Else COUNTER_B \uf0df COUNTER_B+1 \n  NEXT \uf0dfNEXTCHAR(STRING)  \n3. [Pop the stack until empty and decrement the COUNTER_B] \nRepeat while TOP != 0 \nPOP (S,TOP) \nCOUNTER_B\uf0df COUNTER_B-1 \n4. [Check for grammar] \nIf COUNTER_B != 0 \nThen write (\u2018INVALID STRING\u2019) \nElse write (\u2018VALID STRING\u2019)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2007, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a5f22dc8-a7a2-4afa-acfe-475a497dc378": {"__data__": {"id_": "a5f22dc8-a7a2-4afa-acfe-475a497dc378", "embedding": null, "metadata": {"page_label": "16", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "313caba2-2ca9-4c7d-8913-5ed637b56202", "node_type": "4", "metadata": {"page_label": "16", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "12e24916890a4d67e0bc8a4444980d4c4cecc34df0c28d54e84f1d10ce1605b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 10 \n \nC  program for GCD using recursion \n \n \nWrite an algorithm to find factorial of given no using recursion \nAlgorithm: FACTORIAL \nGiven integer N, this algorithm computes factorial of N. Stack A is used to store an activation record associated \nwith each recursive call. Each activation record contains the current value of N and the current return address \nRET_ADDE. TEMP_REC is also a record which contains two variables PARAM & ADDRESS.TOP is a pointer to the \ntop element of stack A. Initially return address is set to the main calling address. PARAM is set to initial value N. \n#include<stdio.h> \nint Find_GCD(int, int); \nvoid main() \n{ \n  int n1, n2, gcd;  \n scanf(\u201c%d %d\u201d,&n1, &n2);  \n  gcd = Find_GCD(n1, &n2); \n  printf(\u201cGCD of %d and %d is %d\u201d, n1, n2, gcd); \n} \n \nint Find_GCD(int m, int n) \n{ \n  int gcdVal; \n  if(n>m) \n  { \n   gcdVal = Find_GCD(n,m); \n  } \n  else if(n==0) \n  { \n   gcdVal = m; \n  } \n  else \n  { \n   gcdVal = Find_GCD(n, m%n); \n  } \n  return(gcdVal); \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1081, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f9e2976-7e8e-48e4-bdc2-c497350f6c11": {"__data__": {"id_": "3f9e2976-7e8e-48e4-bdc2-c497350f6c11", "embedding": null, "metadata": {"page_label": "17", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f3c3c96c-1b5c-4b15-9dcc-6cdbe0a2b177", "node_type": "4", "metadata": {"page_label": "17", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b5c32b858ddee6c70face92823b4e0d412cf2ca9bd51e09cb7b647b4eb60b142", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 11 \n \n \n \nGive difference between recursion and iteration \nIteration Recursion \nIn iteration, a problem is converted into a train of \nsteps that are finished one at a time, one after \nanother \nRecursion is like piling all of those steps on top of \neach other and then quashing them all into the \nsolution. \nWith iteration, each step clearly leads onto the \nnext, like stepping stones across a river \nIn recursion, each step replicates itself at a smaller \nscale, so that all of them combined together \neventually solve the problem. \nAny iterative problem is solved recursively Not all recursive problem can solved by iteration \nIt does not use Stack It uses Stack \n \n \n  \n1. [Save N and return Address] \nCALL PUSH (A, TOP, TEMP_REC) \n2. [Is the base criterion found?] \nIf N=0 \nthen FACTORIAL\uf0df 1 \n GO TO Step 4 \nElse PARAM\uf0df N-1 \n ADDRESS\uf0df Step 3 \n GO TO Step 1 \n3. [Calculate N!] \nFACTORIAL\uf0df N * FACTORIAL \n4. [Restore previous N and return address] \nTEMP_REC\uf0dfPOP(A,TOP) \n(i.e. PARAM\uf0dfN, ADDRESS\uf0dfRET_ADDR) \nGO TO ADDRESS", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1113, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "146a297a-4b40-4215-9c97-454783f0ac7f": {"__data__": {"id_": "146a297a-4b40-4215-9c97-454783f0ac7f", "embedding": null, "metadata": {"page_label": "18", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8b472e0-19d7-4920-b84e-774c179474d5", "node_type": "4", "metadata": {"page_label": "18", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cfe3ff376f4ef75e412d7c315ef48a79aeb014cad24d46017bff26bad34639b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 12 \n \nWrite an algorithm to convert infix expression to postfix expression. \n \nSymbol Input precedence \nfunction F \nStack precedence \nfunction G \nRank function R \n+, - 1 2 -1 \n*, / 3 4 -1 \n^ 6 5 -1 \nVariables 7 8 1 \n( 9 0 - \n) 0 - - \n \nAlgorithm : REVPOL \n\uf0b7 Given an input string INFIX containing an infix expression which has been padded on the right with \u2018) \u2019 and \nwhose symbol have precedence value given by above table, a vector S used as a stack and a NEXTCHAR \nwhich when invoked returns the next character of i ts argument. This algorithm converts INFIX into reverse \npolish and places the result in the string POLISH. The integer variable TOP denotes the top of the stack. \nAlgorithm PUSH and POP are used for stack manipulation. The integer variable RANK accumulates the rank \nof expression. Finally the string variable TEMP is used for temporary storage purpose.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 967, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bb53ea6c-c216-486c-af25-b879cd5057ee": {"__data__": {"id_": "bb53ea6c-c216-486c-af25-b879cd5057ee", "embedding": null, "metadata": {"page_label": "19", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e8b8192-6f90-4f8d-a340-99aec4cfac97", "node_type": "4", "metadata": {"page_label": "19", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1e06e4050a61d714466b0b9cfa797b88ffa95efb587e0ea6e9942614b0f0e15d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 13 \n \n \n \n1. [Initialize stack] \n TOP \uf0df 1 \nS[TOP] \uf0df \u2018(\u2018 \n2. [Initialize output string and rank count ] \nPOLISH \uf0df \u2018 \u2018 \nRANK \uf0df 0 \n3.  [Get first input symbol] \nNEXT\uf0dfNEXTCHAR (INFIX) \n4. [Translate the infix expression ] \nRepeat thru step 7 while NEXT != \u2018 \u2018 \n5. [Remove symbols with greater precedence from stack] \nIF TOP < 1 \nThen write (\u2018INVALID\u2019) \nEXIT \nRepeat while G (S[TOP]) > F(NEXT) \nTEMP \uf0df POP (S, TOP) \nPOLISH \uf0df POLISH O TEMP \nRANK \uf0df RANK + R(TEMP) \nIF RANK <1 \nThen write \u2018INVALID\u2019) \nEXIT \n6. [Are there matching parentheses] \nIF G(S[TOP]) != F(NEXT) \nThen call PUSH (S,TOP, NEXT) \nElse POP (S,TOP) \n7. [Get next symbol] \nNEXT \uf0df NEXTCHAR(INFIX) \n8.  [Is the expression valid] \nIF TOP != 0 OR RANK != 1 \nThen write (\u2018INVALID \u2018) \nElse write (\u2018VALID \u2019)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 853, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa44957c-3f09-42f1-bfdd-ebb20e592eb3": {"__data__": {"id_": "fa44957c-3f09-42f1-bfdd-ebb20e592eb3", "embedding": null, "metadata": {"page_label": "20", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7b2420bf-3bc2-427b-aa97-d45c5986bc58", "node_type": "4", "metadata": {"page_label": "20", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b2e9ccaf0753e822fb894da744e8730403ba65c3fc85764b9e35a2fef2c58a2d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 14 \n \nTrace the conversion of infix to postfix form in tabular form. \n(i) ( A + B * C / D - E + F / G / ( H + I ) ) \n \n \n \nInput Symbol Content of stack Reverse polish Rank \n (  0 \n( ( (  0 \nA ( (   0 \n+ ( ( + A 1 \nB ( ( + B A 1 \n* ( ( + * A B 2 \nC ( ( + * C A B 2 \n/ ( ( + / A B C * 2 \nD ( ( + / D A B C * 2 \n- ( ( - A B C * D / + 1 \nE ( ( - E A B C * D / + 1 \n+ ( ( + A B C * D / + E - 1 \nF ( ( + F A B C * D / + E - 1 \n/ ( ( + / A B C * D / + E \u2013 F 2 \nG ( ( + / G A B C * D / + E \u2013 F 2 \n/ ( ( + / A B C * D / + E \u2013 F G / 2 \n( ( ( + / ( A B C * D / + E \u2013 F G / 2 \nH ( ( + / ( H A B C * D / + E \u2013 F G / 2 \n+ ( ( + / ( + A B C * D / + E \u2013 F G / H 3 \nI ( ( + / ( + I A B C * D / + E \u2013 F G / H 3 \n) ( ( + / A B C * D / + E \u2013 F G / H I + 3 \n) ( A B C * D / + E \u2013 F G / H I + / + 1 \n)  A B C * D / + E \u2013 F G / H I + / + 1 \n \n \n \n \nPostfix expression is: A B C * D / + E \u2013 F G / H I + / +", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d34329d4-e72a-4d94-a7c2-41b1eb37a7a3": {"__data__": {"id_": "d34329d4-e72a-4d94-a7c2-41b1eb37a7a3", "embedding": null, "metadata": {"page_label": "21", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf2e3917-119a-4419-8e54-8178604254f1", "node_type": "4", "metadata": {"page_label": "21", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "08f756918402ee0895f64ee395a726b677b8c9d693ecc0308aaf4143b1e4d722", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 15 \n \n(ii) ( A + B ) * C + D / ( B + A * C ) + D \n \n \nInput Symbol Content of stack Reverse polish Rank \n (  0 \n( ( (   0 \nA ( ( A  0 \n+ ((  + A 1 \nB ( ( + B A 1 \n) ( A B + 1 \n* ( * A B + 1 \nC ( * C A B + 1 \n+ ( + A B + C * 1 \nD ( + D A B + C * 1 \n/ ( + / A B + C * D 2 \n( ( + / ( A B + C * D 2 \nB ( + / ( B A B + C * D 2 \n+ ( + / ( + A B + C * D B 3 \nA ( + / ( + A A B + C * D B 3 \n* ( + / ( + * A B + C * D B A 4 \nC ( + / ( + * C A B + C * D B A 4 \n) ( + / A B + C * D B A C * + 3 \n+ ( + A B + C * D B A C * + / + 1 \nD ( + D A B + C * D B A C * + / + 1 \n)  A B + C * D B A C * + / + D + 1 \n \n \n \n \nPostfix expression is: A B + C * D B A C * + / + D +", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 747, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c6cc4aa-0006-4808-a29b-3ec3a18077b2": {"__data__": {"id_": "7c6cc4aa-0006-4808-a29b-3ec3a18077b2", "embedding": null, "metadata": {"page_label": "22", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e045ffb-2b21-4d98-8918-902afa0005d8", "node_type": "4", "metadata": {"page_label": "22", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fc4ff396e1cb056a7eebd22ab24648f9c7feb99ea7fc16ed890a5da0f2c0148a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 16 \n \nConvert the following string into prefix: A-B/(C*D^E) \n \n \n \nStep-1 : reverse infix expression \n  ) E ^ ) D * C ( ( / B - A \nStep-2 : convert \u2018(\u2018 to \u2018)\u2019 and \u2018)\u2019 to \u2018(\u2018 and append extra \u2018)\u2019 at last \n  ( E ^ ( D * C ) ) / B - A \nStep-3 : Now convert this string to postfix \nInput Symbol Content of stack Reverse polish Rank \n (  0 \n( ( (  0 \nE ( ( E  0 \n^ ( ( ^ E 1 \n( ( ( ^ ( E 1 \nD ( ( ^ ( D E 1 \n* ( ( ^ ( * E D 2 \nC ( ( ^ ( * C E D 2 \n) ( ( ^ E D C * 2 \n) ( E D C * ^ 1 \n/ ( / E D C * ^ 1 \nB ( / B E D C * ^ 1 \n- ( - E D C * ^ B / 1 \nA ( - A E D C * ^ B / 1 \n)  E D C * ^ B / A - 1 \n \nStep 4 : Reverse this postfix expression \n  - A / B ^ * C D E", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "899ff6e6-bbb6-45d0-91ae-2482977323d0": {"__data__": {"id_": "899ff6e6-bbb6-45d0-91ae-2482977323d0", "embedding": null, "metadata": {"page_label": "23", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "24fbf627-2dbe-4a37-a748-fa078df5340b", "node_type": "4", "metadata": {"page_label": "23", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4ffb3e3e75c2b31eb42d238383eebc8a62c0b847ccebb39cf07731df1164dd5c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 17 \n \nTranslate the following string into Polish notation and trace the content of \nstack: (a + b ^ c ^ d) * ( e + f / d ) \n \n \nStep-1 : reverse infix expression \n  ) d / f + e ( * ) d ^ c ^ b + a ( \nStep-2 : convert \u2018(\u2018 to \u2018)\u2019 and \u2018)\u2019 to \u2018(\u2018 and append extra \u2018)\u2019 at last \n ( d / f + e ) * ( d ^ c ^ b + a ) ) \nStep-3 : Now convert this string to postfix \nInput symbol Content of stack Reverse polish Rank \n (  0 \n( ( (  0 \nd ( ( d  0 \n/ ( ( / d 1 \nf ( ( / f d 1 \n+ ( ( + d f / 1 \ne ( ( + e d f / 1 \n) ( d   f / e + 1 \n* ( + d f / e + 1 \n( ( * ( d f / e + 1 \nd ( * ( d d f / e + 1 \n^ ( * ( ^ d f / e + d 2 \nc ( * ( ^ c d f / e + d 2 \n^ ( * ( ^ ^ d f / e + d c 3 \nb ( * ( ^ ^ b d f / e + d c 3 \n+ ( * ( + d f / e + d c b ^ ^ 2 \na ( * ( + a d f / e + d c b ^ ^ 2 \n) ( * d f / e + d c b ^ ^ a + 2 \n)  d f / e + d c b ^ ^ a + * 1 \n \nStep 4 : Reverse this postfix expression \n  * + a ^ ^ b c d + e / f d", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 993, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "106007db-a340-470d-93fb-7f6e3ede7b04": {"__data__": {"id_": "106007db-a340-470d-93fb-7f6e3ede7b04", "embedding": null, "metadata": {"page_label": "24", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4cb3a510-74af-40b4-82c3-f91ce31dc470", "node_type": "4", "metadata": {"page_label": "24", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4c3eb3110c5798eb4ba2bf42852d48ff7525636c5a708598b592c0ae2c67bdf1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 18 \n \nWrite an algorithm for evaluation of postfix expression and evaluation the \nfollowing expression showing every status of stack in tabular form. \n(i) 5 4 6 + * 4 9 3 / + * (ii) 7 5 2 + * 4 1 1 + / - \nAlgorithm: EVALUAE_POSTFIX \n\uf0b7 Given an input string POSTFIX representing postfix expression. This algorithm is going to \nevaluate postfix expression and put the result into variable VALUE. A vector S is used as a stack  \nPUSH and POP are the function used for manipulation of stack. Operand2 and operand1 are \ntemporary variable TEMP is used for temporary variable NEXTCHAR is a function which when \ninvoked returns the next character. PERFORM_OPERATION is a function which perf orms \nrequired operation on OPERAND1 AND OPERAND2. \n \n \n1. [Initialize stack and value] \nTOP \uf0df 1 \nVALUE \uf0df 0 \n2. [Evaluate the prefix expression] \nRepeat until last character \n  TEMP \uf0df NEXTCHAR (POSTFIX) \nIf TEMP is DIGIT \nThen PUSH (S, TOP, TEMP) \nElse OPERAND2 \uf0df POP (S, TOP) \nOPERAND1 \uf0df POP (S, TOP) \nVALUE \uf0df PERFORM_OPERATION(OPERAND1, OPERAND2, TEMP) \nPUSH (S, POP, VALUE) \n3. [Return answer from stack] \nReturn (POP (S, TOP))", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1209, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05e1f3f0-2aa9-4c8b-a195-0e04e5b5027d": {"__data__": {"id_": "05e1f3f0-2aa9-4c8b-a195-0e04e5b5027d", "embedding": null, "metadata": {"page_label": "25", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3f0578ee-430d-4e71-a822-08e5117f7c62", "node_type": "4", "metadata": {"page_label": "25", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5f7e7714b2e8787a4a89b1d78cc6ad83b1561fade96aa22be2c4e2b27122e53c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 19 \n \nEvaluate (i):  5 4 6 + * 4 9 3 / + * \n \nEvaluate (ii) : * 7 5 2 + * 4 1 1 + / - \n \n \n \n \n \n \n \n \n \n \n49 \n \n \n2 \n4 \n49 \n \n \n \n2 \n49 \n \n \n \n7 \n5 \n \n \n2 \n5 \n7 \nEmpty Stack \nRead and push \noperands 7, 5, 2 \nRead Operator +, \npop two values \nfrom stack opn2 = \n2, opn1 = 5, and \npush the answer 7 \nRead Operator *, \npop two values \nfrom stack opn2 = \n7, opn1 = 7, and \npush the answer 49 \n \n1 \n1 \n4 \n49 \nRead and \npush \noperands \n4, 1, 1 \nRead Operator +, \npop two values \nfrom stack opn2 = \n1, opn1 = 1, and \npush the answer 2 \n \n \n \n \n47 \nRead Operator /, \npop two values \nfrom stack opn2 = \n2, opn1 = 4, and \npush the answer 2 \nRead Operator - , \npop two values \nfrom stack opn2 = \n2, opn1 = 49, and \npush the answer 47 \nPoped  value   47 is the answer  \n \n \n \n \n \n \n \n \n \n50 \n \n \n3 \n4 \n50 \n \n \n \n7 \n50 \n \n \n \n10 \n5 \n \n \n6 \n4 \n5 \nEmpty Stack \nRead and push \noperands 5, 4, 6 \nRead Operator +, \npop two values \nfrom stack opn2 = \n6, opn1 = 4, and \npush the answer 10 \nRead Operator *, \npop two values \nfrom stack opn2 = \n10, opn1 = 5, and \npush the answer 50 \n \n3 \n9 \n4 \n50 \nRead and \npush \noperands \n4, 9, 3 \nRead Operator /, \npop two values \nfrom stack opn2 = \n3, opn1 = 9, and \npush the answer 3 \n \n \n \n \n350 \nRead Operator +, \npop two values \nfrom stack opn2 = \n3, opn1 = 4, and \npush the answer 7 \nRead Operator *, \npop two values \nfrom stack opn2 = \n7, opn1 = 50, and \npush the answer \n350 \nPoped value 350 is the answer", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1524, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c96a04ad-990b-4065-a0d8-c67816fc1eec": {"__data__": {"id_": "c96a04ad-990b-4065-a0d8-c67816fc1eec", "embedding": null, "metadata": {"page_label": "26", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bba18de0-9b21-4f60-8250-90ee946924f3", "node_type": "4", "metadata": {"page_label": "26", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fd9c2cd49de3e6e08fba14881ac78d86dd6e504028acdfad235bf3297af31c5a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 20 \n \nConsider the following arithmetic expression P, written in postfix notation. \nTranslate it in infix notation and evaluate. P: 12, 7, 3, -, /, 2, 1, 5, +, *, + \nSame Expression in infix notation is : ( 12 / ( 7 \u2013 3 ) ) + ( ( 5 + 1 ) * 2 ) \n \nExplain Difference between Stack and Queue. \nStack Queue \nA Linear List Which allows insertion or deletion of \nan element at one end only is called as Stack \nA Linear List Which allows insertion at one end and \ndeletion at another end is called as Queue \nSince insertion and deletion of an element are \nperformed at one end of the stack, the elements \ncan only be removed in the opposite order of \ninsertion. \nSince insertion and deletion of an element are  \nperformed at opposite end of the queue, the \nelements can only be removed in the same order of \ninsertion. \nStack is called as Last In First Out (LIFO) List. Queue is called as First In First Out (FIFO) List. \nThe most and least accessible elements are call ed \nas TOP and BOTTOM of the stack \nInsertion of element is performed at FRONT end \nand deletion is performed from REAR end \nExample of stack is arranging plates in one above \none. \nExample is ordinary queue in provisional store. \nInsertion operation is referred as PUSH and \ndeletion operation is referred as POP \nInsertion operation is referred as ENQUEUE and \ndeletion operation is referred as DQUEUE \nFunction calling in any languages uses Stack Task Scheduling by Operating System uses queue \n \n \n \n \n \n \n \n \n \n3 \n \n \n6 \n2 \n3 \n \n \n \n12 \n3 \n \n \n \n4 \n12 \n \n \n3 \n7 \n12 \nEmpty Stack \nRead and push \noperands 12, 7, 3 \nRead Operator -, \npop two values \nfrom stack opn2 = \n3, opn1 = 7, and \npush the answer 4 \nRead Operator /, \npop two values \nfrom stack opn2 = \n4, opn1 = 12, and \npush the answer 3 \n \n5 \n1 \n2 \n3 \nRead and \npush \noperands \n2, 1, 5 \nRead Operator +, \npop two values \nfrom stack opn2 = \n5, opn1 = 1, and \npush the answer 6 \n \n \n \n \n15 \nRead Operator *, \npop two values \nfrom stack opn2 = \n6, opn1 = 2, and \npush the answer 12 \nRead Operator +, \npop two values \nfrom stack opn2 = \n12, opn1 = 3, and \npush the answer 15 \nPoped  value   15 is the answer", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2224, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cff6cc55-3fbf-4704-ad6b-1407e28c02a0": {"__data__": {"id_": "cff6cc55-3fbf-4704-ad6b-1407e28c02a0", "embedding": null, "metadata": {"page_label": "27", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7e164236-1d6e-4898-a211-b5f79a7eb159", "node_type": "4", "metadata": {"page_label": "27", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f1ec25ceb33987ad9293b5618fddd25623c6846e4e2a13557922b0bbc4572a71", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 21 \n \nExplain following:  \n(i) Queue (ii) Circular Queue (iii) DQUEUE (iv) Priority Queue \n(i) Queue \no A linear list which permits deletion to be performed at one end of the list and insertion at the other \nend is called queue. \no The information in such a list is processed FIFO (first in first out) of FCFS (first come \nfirst served) pattern. \no Front is the end of queue from that deletion is to be performed. \no Rear is the end of queue at which new element is to be inserted. \no The process to add an element into queue is called Enqueue  \no The process of removal of an element from queue is called Dequeue. \no The familiar and traditional example of a queue is Checkout line at Supermarket Cash Register \nwhere the first person in line is usually the first to be checkedout. \n \n(ii) Circular Queue \no A more suitable method of representing simple queue which prevents an excessive use of memory \nis to arrange the elements Q[1], Q[2]\u2026.,Q[ n] in a circular fashion with Q[1] following Q[n], this is \ncalled circular queue \no In a standard queue data structure re -buffering problem occurs for each  dequeue operation. To \nsolve this problem by joining the front and rear  ends of a queue to make the qu eue as a circular \nqueue \no Circular queue is a linear data structure. It follows FIFO principle.  \no In  circular queue the last node is connected back to the first node to make a  circle. \no Circular linked list fallow the First In First Out principle \no Elements   are added at the rear end and the elements are deleted at front end of the queue \no Both the front and the rear pointers points to the beginning of the array. \no It is also called as \u201cRing buffer\u201d. \nInsertion \nRear \nDeletion \nFront", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1804, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "643eb482-426e-454f-b0fe-5d4312b69889": {"__data__": {"id_": "643eb482-426e-454f-b0fe-5d4312b69889", "embedding": null, "metadata": {"page_label": "28", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2877f444-b4f5-41b5-90a9-2c8188d18185", "node_type": "4", "metadata": {"page_label": "28", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "400d1f4c9b0bfaac0617b09c4b4422f33cf762c1c3cb914582e258aaf81abe26", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 22 \n \n \n(iii) Dequeue \no A dequeue (double ended queue ) is a linear list in which insertion and deletion are performed from \nthe either end of the structure. \no There are two variations of Dqueue  \n\uf0a7 Input restricted dqueue- allows insertion at only one end \n\uf0a7 Output restricted dqueue- allows deletion from only one end \no Such a structure can be represented by following fig. \n \n(iv) Priority Queue \no A queue in which we are able to insert remove items from any position based on some property \n(such as priority of the task to be processed) is often referred as priority queue. \no Below fig. represent a priority queue of jobs waiting to use a computer. \no Priorities of 1, 2, 3 have been attached with jobs of real time, online and batch respectively. \nTherefore if a job is initiated with priority  i,it is inserted immediately at the end of list of other jobs \nwith priorities i. Here jobs are always removed from the front of queue \nInsertion \nRear \nDeletion \nFront \nDeletion Insertion", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fecb449-e6dc-4663-84d1-075f1bdcd716": {"__data__": {"id_": "8fecb449-e6dc-4663-84d1-075f1bdcd716", "embedding": null, "metadata": {"page_label": "29", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8afe21ed-9eaf-4759-bf1b-1018317c3d44", "node_type": "4", "metadata": {"page_label": "29", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "27188cf834a2e2964573f1fd3ac8f6194f4ae1a650d575fa9d181d10caa294a5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 23 \n \n \n \n  \nR1 R2 \u2026 Ri-1 O1 O2 \u2026 Oj-1 B1 B2 \u2026 Bk-1 \u2026 \n1 1 \u2026 1 2 2 \u2026 2 3 3 \u2026 3 \u2026 \n \nTask Identification \nPriority \nRi Oj Bk \nFig (a) : Priority Queue viewed as a single queue with insertion allowed at any position. \n \nR1 R2 \u2026 Ri-1 \u2026 \n \nO1 O2 \u2026 Oj-1 \u2026 \n \nB1 B2 \u2026 Bk-1 \u2026 \n \nPriority  1 \nPriority  2 \nPriority  3 \nRi \nOj \nBk \nFig (b) : Priority Queue viewed as a Viewed as a set of queue", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 479, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98a22333-59d6-4d2a-8798-b658894e1111": {"__data__": {"id_": "98a22333-59d6-4d2a-8798-b658894e1111", "embedding": null, "metadata": {"page_label": "30", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41b095dd-be22-4b0d-9191-ee78173e7ea2", "node_type": "4", "metadata": {"page_label": "30", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "754c022981e8efd694f8055d4060b5906d5e3439aefc5acb7c9535d523262745", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 24 \n \nWrite algorithms of basic primitive operations for Queue \nProcedure: QINSERT_REAR (Q, F, R, N,Y) \n\uf0b7 Given F and R pointers to the front and rear elements of a queue  respectively. Queue Q consisting of N \nelements. This procedure inserts Y at rear end of Queue. \n \nFunction:  QDELETE_FRONT (Q, F, R) \n\uf0b7 Given F and R pointers to the front and rear elements of a queue respectively. Queue Q consisting of N \nelements. This function deleted and element from front end of the Queue. \n \n1. [Underflow] \nIF F= 0 \n Then write (\u2018UNDERFLOW\u2019) \n  Return(0)  (0 denotes an empty Queue) \n2. [Decrement element] \nY \uf0df Q[F] \n3. [Queue empty?] \nIF  F=R \nThen  F\uf0df R\uf0df 0 \nElse  F\uf0df F+1  (increment front pointer) \n4. [Return element] \nReturn (Y) \nThen F \uf0df 1 \nReturn \n \n1. [Overflow] \nIF R >= N \n Then write (\u2018OVERFLOW\u2019) \n  Return \n2. [Increment REAR pointer] \nR \uf0df R + 1 \n3. [Insert element ] \nQ[R] \uf0df Y \n4. [Is front pointer properly set] \nIF  F=0 \nThen F \uf0df 1 \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1047, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "76c55d8a-c8c0-4c77-8ece-99b42e6b81cf": {"__data__": {"id_": "76c55d8a-c8c0-4c77-8ece-99b42e6b81cf", "embedding": null, "metadata": {"page_label": "31", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ca2d922-1dd6-4921-9462-443f21b09d62", "node_type": "4", "metadata": {"page_label": "31", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "afe2b153cbf18bdceacff7e0708686a999cd701c99290390722ff801d9d71b53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 25 \n \nWrite algorithms of basic primitive operations for Circular Queue \nProcedure: CQINSERT (F, R, Q, N, Y) \n\uf0b7 Given F and R pointers to the front and rear elements of a circular queue respectively. Circular queue Q \nconsisting of N elements. This procedure inserts Y at rear end of Circular queue. \n \nFunction CQDELETE (F, R, Q, N) \n\uf0b7 Given F and R pointers to the front and rear elements of a Circular queue respectively. Circular Queue Q \nconsisting of N elements. Th is function deleted and element from front end of the Circular Queue. Y is \ntemporary pointer variable. \n1. [Reset Rear Pointer] \nIf R = N \nThen R\u2190 1 \nElse  R \u2190 R + 1 \n2. [Overflow] \nIf F = R \nThen  Write (\u2018Overflow\u2019) \n Return \n3. [Insert element] \nQ[R] \u2190 Y \n4. [Is front pointer properly set?] \nIf F = 0 \nThen  F \u2190 1 \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 892, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63bfa806-2daf-41c2-87a7-1ff5ca8042d6": {"__data__": {"id_": "63bfa806-2daf-41c2-87a7-1ff5ca8042d6", "embedding": null, "metadata": {"page_label": "32", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f787c46b-f23d-42c1-a1c0-60010aebf495", "node_type": "4", "metadata": {"page_label": "32", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3a21311aba1542900abebf9b4a8ed137e77d996fd0d14271524c32cdea445fc1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 26 \n \n \nWrite algorithms of basic primitive operations for DQueue \nProcedure DQINSERT_FRONT (Q, F, R, N,Y) \n\uf0b7 Given F and R pointers to the front and rear elements of a queue, a queue consisting of N elements and an \nelement Y, this procedure inserts Y at the front of the queue. \n \nProcedure DQDELETE_REAR (Q, F, R) \n\uf0b7 Given F and R pointers to the front and rear elements of a queue. And a queue Q to which they correspond, \nthis function deletes and returns the last element from the front end of a queue. And Y is temporary \nvariable. \n1. [Overflow] \nIF F = 0 \n Then write (\u2018EMPTY\u2019) \n  Return \nIF F=1 \nThen  write (\u2018OVERFLOW\u2019) \n Return \n2. [Decrement front pointer] \nF \uf0df F-1 \n3. [Insert element ] \nQ[F] \uf0df Y \nReturn \n1. [Underflow?] \nIf F = 0 \nThen  Write (\u2018UNDERFLOW\u2019) \n Return (0) \n2. [Delete Element] \nY \u2190 Q[F] \n3. [Queue Empty?] \nIf F = R \nThen  F \u2190 R \u2190 0 \n Return (Y)  \n4. [Increment front pointer] \nIf F = N \nThen  F \u2190 1 \nElse F \u2190 F + 1 \nReturn (Y)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1052, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c10e25a2-a13e-42af-a7ce-1e2494505c2a": {"__data__": {"id_": "c10e25a2-a13e-42af-a7ce-1e2494505c2a", "embedding": null, "metadata": {"page_label": "33", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "406d81d5-31e6-4e5e-8a7d-b3cae5507b91", "node_type": "4", "metadata": {"page_label": "33", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2aaff47efa7081b9b2b063fc245577931d02d6de0a82258ae1210dfeadb4c1f4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 27 \n \n \n  \n1. [Underflow] \nIF R= 0 \n Then write (\u2018UNDERFLOW\u2019) \n  Return(0) \n2. [Delete element] \nY \uf0df Q[R] \n3. [Queue empty?] \nIF  R=F \nThen  R\uf0df F\uf0df 0 \nElse  R\uf0df R-1  (decrement front pointer) \n4. [Return element] \nReturn (Y)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 317, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "539b269e-fa99-4b1e-9dc2-c57baad0d963": {"__data__": {"id_": "539b269e-fa99-4b1e-9dc2-c57baad0d963", "embedding": null, "metadata": {"page_label": "34", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2bccf67-3755-475a-9275-7c4838b08f16", "node_type": "4", "metadata": {"page_label": "34", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f72507c27aed9e50f45b26673be32172c8f39a223f76c12c021370a066b7e7f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linear Data Structure \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 28 \n \nPROCEDURE DQUEUE_DISPLAY (F,R,Q) \n\uf0b7 Given F and Rare pointers to the front and rear elements of a queue, a queue consist of N elements. This \nprocedure display Queue contents \n \n \nConsider the following queue, where queue is a circular queue having 6 \nmemory cells. Front=2, Rear=4 \nQueue: _, A, C, D, _, _ \nDescribe queue as following operation take place: \nF is added to the queue \nTwo letters are deleted \nR is added to the queue \nS is added to the queue \nOne letter is deleted \n \nPositions 1 2 3 4 5 6 \nInitial Position of Queue, Front=2, Rear=4  A C D   \nF is added to queue, Front=2, Rear=5  A C D F  \nTwo letters are deleted, Front=4, Rear=5    D F  \nR is added to the queue, Front=4, Rear=6    D F R \nS is added to the queue, Front=4, Rear=1 S   D F R \nOne letter is deleted, Front=5, Rear=1 S    F R \n \n1. [Check for empty] \nIF F >= R \n Then write (\u2018QUEUE IS EMPTY\u2019) \n  Return \n2. [Display content] \nFOR  (I=FRONT; I<=REAER; I++) \n  Write (Q[I]) \n3. [Return Statement] \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1086, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f795a631-e2b4-4507-81bd-7d37afab3087": {"__data__": {"id_": "f795a631-e2b4-4507-81bd-7d37afab3087", "embedding": null, "metadata": {"page_label": "35", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c7c7579-cdb5-4587-b652-859681926de5", "node_type": "4", "metadata": {"page_label": "35", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "308ca663f86382309bd4f64e79bc1a3872849d55792eb79632f5215013d3140e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \n1. Linear Data Structure and their linked storage representation. \nThere are many applications where sequential allocation method is unacceptable because of following \ncharacteristics \n\uf0b7 Unpredictable storage requirement \n\uf0b7 Extensive manipulation of stored data \nThe linked allocation method of storage can result in both efficient use of computer storage and computer time. \n\uf0b7 A linked list is a non-sequential collection of data items. \n\uf0b7 The concept of a linked list is very simple, for every data item in the linked list, there is an associated \npointer that would give the memory allocation of the next data item in the linked list. \n\uf0b7 The data items in the linked list are not in a consecutive memory locations but they may be anywhere in \nmemory. \n\uf0b7 Accessing of these data items is easier as each data item contains within itself the address of the next \ndata item. \n \n \n2. What is linked list? What are different types of linked list? OR \nWrite a short note on singly, circular and doubly linked list. OR \nAdvantages and disadvantages of singly, circular and doubly linked list. \n\u2022 A linked list is a collection of objects stored in a list form. \n\u2022 A linked list is a sequence of items (objects) where every item is linked to the next. \n\u2022 A linked list is a non-primitive type of data structure in which each element is dynamically allocated and \nin which elements point to each other to define a linear relationship. \n\u2022 Elements of linked list are called nodes where each node contains two things, data and pointer to nex t \nnode.  \n\u2022 Linked list require more memory compared to array because along with value it stores pointer to next \nnode. \n\u2022 Linked lists are among the simplest and most common data structures. They can be used to implement \nother data structures like stacks, queues, and symbolic expressions, etc\u2026 \n10 next 20 next \n \n30 next \n \n \n40 null \nA Linked List", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1975, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5c7d3978-4b77-445e-8539-db353a8d7257": {"__data__": {"id_": "5c7d3978-4b77-445e-8539-db353a8d7257", "embedding": null, "metadata": {"page_label": "36", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc2b8ff5-4d14-4459-ba60-0eb9a56a0482", "node_type": "4", "metadata": {"page_label": "36", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0485f4555559f7fca8d94e0c2606cb046116e3a6e02bed40b9f2905c02abf689", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n \nOperations on linked list \n\u2022 Insert \no Insert at first position \no Insert at last position \no Insert into ordered list \n\u2022 Delete \n\u2022 Traverse list (Print list) \n\u2022 Copy linked list \nTypes of linked list \nSingly Linked List \n\u2022 It is basic type of linked list.  \n\u2022 Each node contains data and pointer to next node.   \n\u2022 Last node\u2019s pointer is null.  \n\u2022 Limitation of singly linked list is we can traverse only in one direction, forward direction.  \n  \nCircular Linked List \n\u2022 Circular linked list is a singly linked list where last node points to first node in the list.  \n\u2022 It does not contain null pointers like singly linked list. \n\u2022 We can traverse only in one direction that is forward direction. \n\u2022 It has the biggest advantage of time saving when we want to go from last node to first node, it \ndirectly points to first node. \n\u2022 A good example of an application where circular linked list should be used is a timesharing problem \nsolved by the operating system. \nA next B next \n \nC next \n \n \nD null \nSingly Linked List \nNode \ninfo link \nData Pointer to \nnext node \n// C Structure to represent a node \nstruct node \n{ \nint info \nstruct node *link \n};", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b639ef65-d996-4a98-b1da-4a875d361ef8": {"__data__": {"id_": "b639ef65-d996-4a98-b1da-4a875d361ef8", "embedding": null, "metadata": {"page_label": "37", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b2e37fd-919b-4c45-a1af-2591f5a5c5dd", "node_type": "4", "metadata": {"page_label": "37", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "84fa4b73fb9316a0358ab543d8c864e67bb117b4d5857a0ffbc393f7845368fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n \n Doubly Linked list \n\u2022 Each node of doubly linked list contains data and two pointers to point previous  (LPTR) and next \n(RPTR) node. \n \n \n \n\u2022 Main advantage of doubly linked list is we can traverse in any direction, forward or reverse. \n\u2022 Other advantage of doubly linked list is we can delete a node with little trouble, since we have \npointers to the previous and next nodes. A node on a singly linked list cannot be removed unless we \nhave the pointer to its predecessor. \n\u2022 Drawback of doubly linked list is it requires more memory compared to singly linked list because we \nneed an extra pointer to point previous node. \n\u2022 L and R in image denote left most and right most nodes in the list. \n\u2022 Left link of L node and right link of R node is NULL, indicating the end of list for each direction. \n \n \n3. Discuss advantages and disadvantages of linked list over array. \nAdvantages of an array \n1. We can access any element of an array directly means random access is easy \n2. It can be used to create other useful data structures (queues, stacks) \nA next B next \n \nC null \nDoubly Linked List \nprev \n \n \nprev \n \n \nnull \n \n \nL R \nNode \nData Pointer to \nnext node \n// C Structure to represent a node \nstruct node \n{ \nint info \nstruct node *lptr; \nstruct node *rptr; \n}; \nRPTR LPTR info \nA next B next \n \nC next \n \n \nD next \n Circular Linked List \nPointer to \nprevious node", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1466, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b482b793-da6f-4b48-b851-8b6c1e9a9b39": {"__data__": {"id_": "b482b793-da6f-4b48-b851-8b6c1e9a9b39", "embedding": null, "metadata": {"page_label": "38", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d439e9da-880b-4b29-8ecd-f9f7de5746b6", "node_type": "4", "metadata": {"page_label": "38", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "29dd40d3bb032faa4aeece1ef80bf97329aef1b00200274fc59e0e4369fa6142", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n3. It is light on memory usage compared to other structures \nDisadvantages of an array \n1. Its size is fixed \n2. It cannot be dynamically resized in most languages \n3. It is hard to add/remove elements  \n4. Size of all elements must be same. \n5. Rigid structure (Rigid = Inflexible or not changeable) \nAdvantages of Linked List \n1. Linked lists are dynamic data structures:  That is, they can grow or shrink durin g execution of a \nprogram. \n2. Efficient memory utilization: Here memory is not pre -allocated. Memory is allocated whenever it is \nrequired. And it is deallocated (free) when it is no longer needed. \n3. Insertion and deletions are easier and efficient: Linked list provide flexibility in inserting a data item \nat a specified position and deletion of a data item from the given position. \n4. Elements of linked list are flexible: It can be primary data type or user defined data types \nDisadvantages of Linked List \n1. Random access is not allowed. We have to access elements sequentially starting from the first node. \nSo we cannot do binary search with linked lists. \n2. It cannot be easily sorted \n3. We must traverse 1/2 the list on average to access any element \n4. More complex to create than an array \n5. Extra memory space for a pointer is required with each element of the list \n \n3. What are the advantages and disadvantages of stack and queue \nimplemented using linked list over array? \nAdvantages and disadvantages of stack & queue implemented using linked list over array is described below, \nInsertion & Deletion Operation \n\uf0b7 Insertion and deletion operations are known as push and pop operation in stack and as insert and \ndelete operation in queue. \n\uf0b7 In the case of an array, if we have n-elements list and it is required to insert a new element between \nthe first and second element then n -1 elements of the list must be moved so as to make room for \nthe new element. \n\uf0b7 In case of linked-list, this can be accomplished by only interchanging pointers. \n\uf0b7 Thus, insertion and deletions are more efficient when performed in linked list then array.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2169, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "53e2ca6d-31c5-437e-8b78-b911b7804f05": {"__data__": {"id_": "53e2ca6d-31c5-437e-8b78-b911b7804f05", "embedding": null, "metadata": {"page_label": "39", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b180d3af-fda9-47ff-aaca-fb2f9e88ff04", "node_type": "4", "metadata": {"page_label": "39", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3d7308f35403cc1ba55b3c97d0509a84bc2527c33b5fefa29ba415c40c133b42", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \nSearching a node \n\uf0b7 If a particular node in a linked list is required, it is necessary to follow links from the first node \nonwards until the desired node is found. \n\uf0b7 Where as in the case of an array, directly we can access any node  \nJoin & Split \n\uf0b7 We can join two linked list by assigning pointer of second linked list in the last node of first linked \nlist. \n\uf0b7 Just assign null address in the node from where we want to split one linked list in two parts. \n\uf0b7 Joining and splitting of two arrays is much more difficult compared to linked list. \nMemory \n\uf0b7 The pointers in linked list consume additional memory compared to an array \nSize \n\uf0b7 Array is fixed sized so number of elements will be limited in stack and queue. \n\uf0b7 Size of linked list is dynamic and can be changed easily so it is flexible in number of elements \n \n \n \nX1 X2 X3 X4 X5 \n \nX6 \n \n  \nX1 X2 X3 X4 X5 \n \nX6 \n \nY  \nInsert Y at location 2. You have to move X2, X3,\u2026, X6 Array \nX1 \n \n X2 \n \n X3 \n \n X4 \n \n \nX1 \n \n X2 \n \n X3 \n \n X4 \n \n \nY \n \n \nLinked-\nList \nInsert Y at location 2. Just change two pointers \nInsertion and deletion operations in Array and Linked-List", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1222, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e6b1c302-8b5e-4ff2-b255-a1c5465a9fc8": {"__data__": {"id_": "e6b1c302-8b5e-4ff2-b255-a1c5465a9fc8", "embedding": null, "metadata": {"page_label": "40", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "62ab44a7-f57e-403b-8d83-94624f97e047", "node_type": "4", "metadata": {"page_label": "40", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "27de788046da14d148dac33895a337f7ebfc7586e63d89eb4f59f6a2c6fad0e4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n4. Write following algorithms for singly linked list. \n1) Insert at first position \n2) Insert at last position \n3) Insert in Ordered Linked list \n4) Delete Element \n5) Copy Linked List \nFew assumptions, \n\uf0b7 We assume that a typical element or node consists of two fields namely; an information field called \nINFO and pointer field denoted by LINK. The name of a typical element is denoted by NODE. \n \n \n  \nNode \ninfo link \nData Pointer to \nnext node \n// C Structure to represent a node \nstruct node \n{ \nint info \nstruct node *link \n};", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 623, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "350b05f6-a561-4109-845b-74e379989c4e": {"__data__": {"id_": "350b05f6-a561-4109-845b-74e379989c4e", "embedding": null, "metadata": {"page_label": "41", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "322b5a21-e936-4afd-850e-0827bff193da", "node_type": "4", "metadata": {"page_label": "41", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "37fe32878ca9554c77d953f2cfa6014bc8c064341d875d4a42103aa26deeaaaf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \nFunction: INSERT( X, First ) \nGiven X, a new element and FIRST is a pointer to the first element of a linked linear list . Typical node contains \nINFO and LINK fields. AVAIL is a pointer to the top element of the availab ility stack; NEW is a temporary pointer \nvariable. This function inserts a new node at the first position of linked list. This function returns address of \nFIRST node.  \n \n  \n1 [Underflow?] \nIF  AVAIL = NULL \nThen Write (\u201cAvailability Stack Underflow\u201d) \n  Return(FIRST) \n \n2 [Obtain address of next free Node] \nNEW\uf0dfAVAIL \n \n3 [Remove free node from Availability Stack] \nAVAIL\uf0dfLINK(AVAIL) \n \n4 [Initialize fields of new node and its link to the list] \n  INFO (NEW) \uf0df X \n  LINK (NEW) \uf0df FIRST \n5 [Return address of new node] \n  Return (NEW) \nWhen INSERT is invoked it returns a pointer value to the variable FIRST \nFIRST \uf0df INSERT (X, FIRST)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 948, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d97b9eb6-cd07-4e09-9e02-513aa247b054": {"__data__": {"id_": "d97b9eb6-cd07-4e09-9e02-513aa247b054", "embedding": null, "metadata": {"page_label": "42", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "509fae49-3c78-45f2-9fe3-58ec5be78a2e", "node_type": "4", "metadata": {"page_label": "42", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6588b3515d10cf3a0cf92279c6cf85b637755dbb4a6c841c89ba846c93cc9845", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \nFunction:  INSEND( X, First ) (Insert at end) \nGiven X, a new element and FIRST is a pointer to the first element of a linked linear list . Typical node contains \nINFO and LINK fields. AVAIL is a pointer to the top elemen t of the availability s tack; NEW is a temporary pointer \nvariable. This function inserts a new node at the last position of linked list. This function returns address of FIRST \nnode. \n \n  \n1 [Underflow?] \nIF  AVAIL = NULL \nThen Write (\u201cAvailability Stack Underflow\u201d) \n  Return(FIRST) \n \n2 [Obtain address of next free Node] \nNEW\uf0dfAVAIL \n \n3 [Remove free node from Availability Stack] \nAVAIL\uf0dfLINK(AVAIL) \n \n4 [Initialize field of NEW node] \nINFO (NEW) \uf0df X \nLINK (NEW) \uf0df NULL \n \n5 [Is the list empty?] \nIf FIRST = NULL \nthen Return (NEW) \n \n6 [Initialize search for a last node] \nSAVE \uf0df FIRST \n \n7 [Search for end of list] \nRepeat while LINK (SAVE) \u2260 NULL \n  SAVE \uf0df LINK (SAVE) \n \n8 [Set link field of last node to NEW) \nLINK (SAVE) \uf0df NEW \n \n9 [Return first node pointer] \nReturn (FIRST) \nWhen INSERTEND is invoked it returns a pointer value to the variable FIRST \nFIRST \uf0df INSERTEND (X, FIRST)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1203, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "20191aeb-f118-466e-8a59-3b1652f7f1f2": {"__data__": {"id_": "20191aeb-f118-466e-8a59-3b1652f7f1f2", "embedding": null, "metadata": {"page_label": "43", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fae5ff2c-3e6c-49f4-bc28-1deb19a2b22e", "node_type": "4", "metadata": {"page_label": "43", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fbf22e1b48d3e1f379185260214539ea7b7138ee5ebfa9b6914aea232d5d596b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 9 \n \nInsert a node into Ordered Linked List \n\uf0b7 There are many applications where it is desirable to maintain an ordered linear list. The ordering is in \nincreasing or decreasing order on INFO field. Such ordering results in more efficient processing. \n\uf0b7 The general algorithm for inserting a node into an ordered linear list is as below. \n1. Remove a node from availability stack. \n2. Set the field of new node. \n3. If the linked list is empty then return the address of new node. \n4. If node preced es all other nodes in the list then inserts a node at the front of the list and returns its \naddress. \n5. Repeat step 6 while information contain of the node in the list is less than the information content of \nthe new node. \n6. Obtain the next node in the linked list. \n7. Insert the new node in the list and return address of its first node.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 928, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "68e68186-69c2-43c9-87fd-d05aa153eff2": {"__data__": {"id_": "68e68186-69c2-43c9-87fd-d05aa153eff2", "embedding": null, "metadata": {"page_label": "44", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6acb5c0e-d2f8-4f1b-8ce4-cc341f2fe151", "node_type": "4", "metadata": {"page_label": "44", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a7a18e213f42cb303cfefb3296ba16f0f0992159ec836cc2fa800bdd90e5bf9e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 10 \n \nFunction: INSORD( X, FIRST ) \nGiven X, a new element  and FIRST is a pointer to the first element of a linked linear list . Typical node contains \nINFO and LINK fields. AVAIL is a pointer to the top element of the availability s tack; NEW & SAVE are temporary \npointer variables. This function inserts a new node  such that linked list preserves the ordering of the terms in \nincreasing order of their INFO field. This function returns address of FIRST node. \n \n1 [Underflow?] \nIF  AVAIL = NULL \nThen Write (\u201cAvailability Stack Underflow\u201d) \n  Return(FIRST) \n \n2 [Obtain address of next free Node] \nNEW\uf0dfAVAIL \n \n3 [Remove free node from Availability Stack] \nAVAIL\uf0dfLINK(AVAIL) \n \n4. [Is the list is empty] \nIf FIRST = NULL \nthen LINK (NEW) \uf0df NULL \nReturn (NEW) \n \n5. [Does the new node precede all other node in the list?] \nIf INFO(NEW) \u2264 INFO (FIRST) \nthen LINK (NEW) \uf0df FIRST \nReturn (NEW) \n \n6. [Initialize temporary pointer] \nSAVE  \uf0df FIRST \n \n7. [Search for predecessor of new node] \nRepeat while LINK (SAVE) \u2260 NULL and  INFO (NEW) \u2265 INFO (LINK (SAVE))  \n  SAVE \uf0df LINK (SAVE) \n \n8. [Set link field of NEW node and its predecessor] \nLINK (NEW) \uf0df LINK (SAVE) \nLINK (SAVE) \uf0df NEW \n \n9. [Return first node pointer] \nReturn (FIRST) \nWhen INSERTORD is invoked it returns a pointer value to the variable FIRST \nFIRST \uf0df INSERTORD (X, FIRST)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1423, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f09f6e1-2467-419f-95eb-e0d73a7cd922": {"__data__": {"id_": "9f09f6e1-2467-419f-95eb-e0d73a7cd922", "embedding": null, "metadata": {"page_label": "45", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "13f6fa16-111c-47b9-a430-03c29a6529d4", "node_type": "4", "metadata": {"page_label": "45", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "071a67fdb90a4ebbd86be3795d7f58b01f2e5e8790090926c65e57a408f8b91a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 11 \n \nBy repeatedly involving function INSORD; we can easily obtains an ordered liner list for example the sequence of \nstatements.  \n \n \n \nAlgorithm to delete a node from Linked List \n\uf0b7 Algorithm that deletes node from a linked linear list:- \n1. If a linked list is empty, then write under flow and return. \n2. Repeat step 3 while end of the list has not been reached and the node has not been found. \n3. Obtain the next node in list and record its predecessor node. \n4. If the end of the list has been reached then write node not found and return. \n5. Delete the node from list. \n6. Return the node into availability area. \n  \n29 \n10 29 \n10 25 29 \n10 25 29 40 \n10 25 29 37 40 \nFRONT \nFRONT \nFRONT \nFRONT \nFRONT \nTrace of construction of an ordered linked linear list using function INSORD \nFRONT \uf0df NULL \nFRONT \uf0df INSORD (29, FRONT) \nFRONT \uf0df INSORD (10, FRONT) \nFRONT \uf0df INSORD (25, FRONT) \nFRONT \uf0df INSORD (40, FRONT) \nFRONT \uf0df INSORD (37, FRONT)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69d3ced4-1cc1-4bf6-b4c0-b0b22b910fc4": {"__data__": {"id_": "69d3ced4-1cc1-4bf6-b4c0-b0b22b910fc4", "embedding": null, "metadata": {"page_label": "46", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5033829-430e-4970-b337-62efb928356f", "node_type": "4", "metadata": {"page_label": "46", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6ea06f027720f7c99adeaf20c686bb9f630da6e081e465f6931a88653e6e4541", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 12 \n \nProcedure: DELETE( X, FIRST) \nGiven X, an address of node which we want to delete and FIRST is a pointer to the first element of a linked linear \nlist. Typical node contains INFO and LINK fields. SAVE & PRED are temporary pointer variables. \n \n \nFunction: COPY (FIRST) \n\uf0b7 FIRST is a pointer to the first node in the linked list, this function makes a copy of the list. \n\uf0b7 The new list is to contain nodes whose information and pointer fields are denoted by FIELD and PTR, \nrespectively. The address of the first node in the newly created list is to be placed in BEGIN. NEW, SAVE and \nPRED are points variables. \n\uf0b7 A general algorithm to copy a linked list \n1. If the list is empty then return null \n1. [Is Empty list?] \nIf FIRST = NULL \nthen write (\u2018Underflow\u2019) \nreturn \n \n2. [Initialize search for X] \nSAVE \uf0df FIRST \n \n3. [Find X] \nRepeat thru step-5 while SAVE \u2260 X and LINK (SAVE) \u2260 NULL \n \n4. [Update predecessor marker] \nPRED \uf0df SAVE \n \n5. [Move to next node] \nSAVE \uf0df LINK (SAVE) \n \n6. [End of the list] \nIf SAVE \u2260 X \nthen write (\u2018Node not found\u2019) \nreturn \n \n7. [Delete X] \nIf X = FIRST (if X is first node?) \nthen FIRST \uf0df LINK (FIRST) \nelse LINK (PRED) \uf0df LINK (X) \n \n8. [Free Deleted Node] \nFree (X)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1293, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e5471d4c-1f54-46c4-9186-3860628ffe7d": {"__data__": {"id_": "e5471d4c-1f54-46c4-9186-3860628ffe7d", "embedding": null, "metadata": {"page_label": "47", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "887b71da-2a04-4b2c-852b-66fd48c2fbef", "node_type": "4", "metadata": {"page_label": "47", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "db3a08476536e607f4487370801e482a44c12511788d376aaf2f019afe9efd8a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 13 \n \n2. If the availability stack is empty then  write availability stack underflow and return else copy the first \nnode. \n3. Report thru step 5 while the old list has not been reached. \n4. Obtain next node in old list and record its predecessor node. \n5. If availability stack is empty then write availability stack underflow and return else copy the node and \nadd it to the rear of new list. \n6. Set link of the last node in the new list to null and return. \n \n \n1. [Is Empty List?] \nIf FIRST = NULL \nthen return (NULL) \n \n2. [Copy first node] \nNEW    \uf0ef    NODE \nNew \uf0df AVAIL \nAVAIL \uf0df LINK (AVAIL) \nFIELD (NEW) \uf0df INFO (FIRST) \nBEGIN \uf0df NEW \n \n3. [Initialize traversal] \nSAVE \uf0df FIRST \n \n4. [Move the next node if not at the end if list] \nRepeat thru step 6 while (SAVE) \u2260 NULL \n \n5. [Update predecessor and save pointer] \nPRED \uf0df NEW \nSAVE \uf0df LINK (SAVE) \n \n6. [Copy node] \nIf AVAIL = NULL \nthen write (\u2018Availability stack underflow\u2019) \nReturn (0) \nelse NEW \uf0df AVAIL \n AVAIL \uf0df LINK (AVAIL) \n FIELD (NEW) \uf0df INFO (SAVE) \n PTR (PRED) \uf0df NEW \n \n7. [Set link of last node and return] \nPTR (NEW) \uf0df NULL \nReturn (BEGIN)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1192, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2ce58c41-4e12-4b99-b33e-a3145c806201": {"__data__": {"id_": "2ce58c41-4e12-4b99-b33e-a3145c806201", "embedding": null, "metadata": {"page_label": "48", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c14d526-eaac-4c87-9c44-dcd7563067bb", "node_type": "4", "metadata": {"page_label": "48", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ad41bfc8cd36c5dcf04edc799b6589f4b8df453139ac084eab14acd8a81dfe1a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 14 \n \n5. Write following algorithms for circular link list \n1) Insert at First Position \n2) Insert at Last Position \n3) Insert in Ordered Linked List \n4) Delete Element \n \nPROCEDURE: CIRCULAR_LINK_INSERT_FIRST (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  NEW is a temporary pointer variable. This procedure inserts value X at the \nfirst position of Circular linked linear list. \n \n \n  \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n2. [Initialize fields of new node and its link to the list] \nINFO (NEW) \uf0df X \nIf FIRST = NULL \nthen LINK (NEW) \uf0df NEW \n  FIRST \uf0df LAST \uf0df NEW \nelse  LINK (NEW) \uf0df FIRST \n  LINK (LAST) \uf0df NEW \n  FIRST \uf0df NEW \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 856, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1aac1b31-4527-40b6-b43a-ac4743532287": {"__data__": {"id_": "1aac1b31-4527-40b6-b43a-ac4743532287", "embedding": null, "metadata": {"page_label": "49", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de39209f-2ad4-4396-a9e3-cf580373aa07", "node_type": "4", "metadata": {"page_label": "49", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1c0acfaa22d6e8fc4e11430d8c5e607ed24b3125d06a37c4cd272a4ac5feb4ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 15 \n \nPROCEDURE: CIR_LINK_INSERT_END (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  NEW is a temporary pointer variable. This procedure inserts value X at the \nlast position of Circular linked linear list. \n \n \n  \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n2. [Initialize fields of new node and its link to the list] \nIf FIRST = NULL \nthen  LINK (NEW) \uf0df NEW \n  FIRST \uf0df LAST \uf0df NEW \nelse  LINK(NEW) \uf0df FIRST \n  LINK(LAST) \uf0df NEW \n  LAST \uf0df NEW \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 664, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7cd9dced-4269-49c2-8da1-7ca84aa3990f": {"__data__": {"id_": "7cd9dced-4269-49c2-8da1-7ca84aa3990f", "embedding": null, "metadata": {"page_label": "50", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "65778cfd-ebb6-4723-acb4-2c52e34f8b32", "node_type": "4", "metadata": {"page_label": "50", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "64c83ac5ab94bba71bbd6109db657aa0fc5b576167e46ee2c20d97cdbf5cce82", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 16 \n \nPROCEDURE: CIR_LINK_INSERT_ORDER (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  NEW is a temporary pointer variable. This procedure inserts value X  such \nthat linked list preserves the ordering of the terms in increasing order of their INFO field. \n \n \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n \n2. [Copy information content into new node] \nINFO (NEW) \uf0df X \n \n3. [Is Linked List is empty?] \nIf  FIRST = NULL \nthen  LINK (NEW) \uf0df NEW \n  FIRST \uf0df LAST \uf0df NEW \n  Return \n \n4. [Does new node precedes all other nodes in List?] \nIf  INFO (NEW) \u2264  INFO (FIRST) \nthen  LINK (NEW) \uf0df FIRST \n  LINK (LAST) \uf0df NEW \n  FIRST \uf0df NEW \n  Return \n \n5. [Initialize Temporary Pointer] \nSAVE \uf0df FIRST \n \n6. [Search for Predecessor of new node] \nRepeat while SAVE \u2260 LAST and INFO(NEW) \u2265 INFO(LINK(SAVE)) \n  SAVE \uf0df LINK(SAVE) \n \n7. [Set link field of NEW node and its Predecessor] \nLINK(NEW) \uf0df LINK(SAVE) \nLINK(SAVE) \uf0df NEW \nIf SAVE = LAST \nthen  LAST \uf0df NEW \n \n8. [Finish] \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1177, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9767c89-8ce2-4e78-84fc-ef7532110351": {"__data__": {"id_": "f9767c89-8ce2-4e78-84fc-ef7532110351", "embedding": null, "metadata": {"page_label": "51", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fe721bf-5a65-43c2-bc70-5c746e91baa7", "node_type": "4", "metadata": {"page_label": "51", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "88d5c84d735d1f566f911fef9424c67c25a1807e8435a35fca4b96fc0240e90e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 17 \n \nPROCEDURE: CIR_LINK_DELETE (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  SAVE & PRED are  temporary pointer variables. This procedure deletes  a \nnode whose address is given by pointer variable X. \n \n \n1. [Is Empty List?] \nIf FIRST = NULL \nthen write (\u2018Linked List is Empty\u2019) \n  Return \n \n2. [Initialize Search for X] \nSAVE \uf0df FIRST \n \n3. [Find X] \nRepeat thru step 5 while SAVE \u2260 X and SAVE \u2260 LAST \n \n4. [Update predecessor marker] \nPRED \uf0df SAVE \n \n5. [Move to next node] \nSAVE \uf0df LINK (SAVE) \n \n6. [End of Linked List] \nIf  SAVE \u2260 X \nthen  write(\u2018Node not found\u2019) \n  return \n \n7. [Delete X] \nIf X = FIRST \nthen  FIRST \uf0df LINK (FIRST) \n  LINK (LAST) \uf0df FIRST \nelse  LINK (PRED) \uf0df LINK(X) \n  If X = LAST \n  then LAST \uf0df PRED \n \n8. [Free Deleted Node] \nFree (X)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 974, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "873e644e-4a4d-42c3-a35e-3f083ff33f66": {"__data__": {"id_": "873e644e-4a4d-42c3-a35e-3f083ff33f66", "embedding": null, "metadata": {"page_label": "52", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d2841ce0-1c11-4015-b493-a80b13234b8e", "node_type": "4", "metadata": {"page_label": "52", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2349842771341563948524a5103c948d671e0221e4969afb8877359db62d99e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 18 \n \n6. Write an algorithm to perform each of the following operations on Circular \nsingly linked list using header node \n1) add node at beginning \n2) add node at the end \n3) insert a node containing x after node having address P \n4) delete a node which contain element x \nFUNCTION: CIR_LINK_HEAD_INSERT_FIRST (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  NEW is a temporary pointer variable. HEAD is the address of HEAD node.  \nThis procedure inserts value X at the first position of Circular linked linear list. \n \n \nFUNCTION: CIR_LINK_HEAD_INSERT_LAST (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields. NEW is a temporary points variable. HEAD is the address of HEAD node. This \nprocedure inserts value X at the last position of Circular linked linear list. \n \n \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n2. [Initialize fields of new node and its link to the list] \nINFO (NEW) \uf0df X \nLINK (NEW) \uf0df HEAD \nLINK (LAST) \uf0df NEW \nLAST \uf0df NEW \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n2. [Initialize fields of new node and its link to the list] \nINFO (NEW) \uf0df X \nLINK (NEW) \uf0df LINK (HEAD) \nLINK (HEAD) \uf0df NEW", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7bce55f4-3019-4cc1-92ba-45092fce0ffc": {"__data__": {"id_": "7bce55f4-3019-4cc1-92ba-45092fce0ffc", "embedding": null, "metadata": {"page_label": "53", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff3989b0-eb6b-4068-94d1-7a8ac88552f2", "node_type": "4", "metadata": {"page_label": "53", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1a9af8cf46d849c6315a2ed568316c67a91e3b47e6c62fb142fc28614c670528", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 19 \n \nFUNCTION: CIR_LINK_HEAD_INSERT_AFTER_Node-P (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields.  NEW is a temporary pointer  variable. HEAD is the address of HEAD node. \nThis procedure insert a node after a node having address P. \n \n \n  \n1. [Create New Empty Node] \nNEW    \uf0ef    NODE \n \n2.  [Initialize fields of new node and its link to the list] \nINFO (NEW) \uf0df X \nLINK (NEW) \uf0df LINK (P) \nLINK (P) \uf0df NEW \nIf  P = LAST \nthen  LAST \uf0df NEW", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 646, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84948ac8-0359-4306-a2a0-30e063ea0d05": {"__data__": {"id_": "84948ac8-0359-4306-a2a0-30e063ea0d05", "embedding": null, "metadata": {"page_label": "54", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e46489f8-99dc-418e-83e7-3c8c6e7d929f", "node_type": "4", "metadata": {"page_label": "54", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ebfec75903ec84aef9e7cb3e4ecaf5a8979e68b4faa95a3dc0344c06e3f67bf1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 20 \n \nPROCEDURE: CIR_LINK_HEAD_DELETE (X, FIRST, LAST) \nFIRST and LAST are pointers to the first and last element of a  circular linked linear list respectively whose typical \nnode contains INFO and LINK fields. SAVE & PRED are temporary pointer variables. HEAD is the address of HEAD \nnode. This procedure deletes a node whose value is X. \n \n \n1. [Is Empty List?] \nIf FIRST = NULL \nthen write (\u2018Underflow) \n  return \n \n2. [Initialize Search for X] \nSAVE \uf0df FIRST \n \n3.  [Find X] \nRepeat thru step 5 while INFO(SAVE) \u2260 X and SAVE \u2260 LAST \n \n4.  [Update Predecessor] \nPRED \uf0df SAVE \n \n5.  [Move to next node] \nSAVE \uf0df LINK(SAVE) \n \n6.  [End of the List] \nIf INFO (SAVE) \u2260 X \nthen write(\u2018Node not Found\u2019) \n  return \n \n7.  [Delete node X] \nIf INFO (FIRST) = X \nthen LINK (HEAD) \uf0df LINK(FIRST) \nelse LINK (PRED) \uf0df LINK(SAVE) \n  If SAVE = LAST \n  then  LAST \uf0df PRED \n \n8.  [Free Deleted Node] \nFree (X)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 975, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "471fa105-2b1b-44fd-a3b7-7425f2cae55a": {"__data__": {"id_": "471fa105-2b1b-44fd-a3b7-7425f2cae55a", "embedding": null, "metadata": {"page_label": "55", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac1bd129-f08d-4b65-97db-de3cee2ecd9e", "node_type": "4", "metadata": {"page_label": "55", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b736a993cee4602a3a5f17174ae05d4df93fe16e47137d21ee79b3661766c05b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 21 \n \n7. Write following algorithms for doubly link list \n1) Insert  \n2) Insert in Ordered Linked List \n3) Delete Element  \nPRDCEDURE: DOUBINS (L, R, M, X) \nGiven a doubly link list whose left most and right most nodes addressed are given by the pointer variables L and \nR respectively. It is required to insert a node whose address is given by the pointer variable NEW. The left and \nright links of nodes are denoted by LP TR and RPTR respectively. The information field of a node is denoted by \nvariable INFO. The name of an element of the list is NODE. The insertion is to be performed to the left of a \nspecific node with its address given by the pointer variable M. The informa tion to be entered in the node is \ncontained in X. \n \n1. [Create New Empty Node] \nNEW          NODE \n \n2. [Copy information field] \nINFO (NEW) \uf0df X \n \n3.  [Insert into an empty list] \nIf  R = NULL \nthen  LPTR  (NEW) \uf0df RPTR (NULL) \uf0df NULL \n L \uf0df R \uf0df NEW \n Return \n \n4. [Is left most insertion ?] \nIf  M = L \nthen  LPTR (NEW) \uf0dfNULL \n RPTR (NEW) \uf0df M \n LPTR (M)\uf0df NEW \n L \uf0df NEW \n Return \n \n5.  [Insert in middle] \nLPTR (NEW)\uf0df LPTR (M) \nRPTR (NEW) \uf0df M \nLPTR (M) \uf0df NEW \nRPTR (LPTR (NEW)) \uf0df NEW \nReturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1259, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "227ae7b0-f03e-4405-b7ac-3c15a4843ebd": {"__data__": {"id_": "227ae7b0-f03e-4405-b7ac-3c15a4843ebd", "embedding": null, "metadata": {"page_label": "56", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c9c5307-7536-412e-a581-0d42fdb27a1d", "node_type": "4", "metadata": {"page_label": "56", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8067ae25603ba4939fa4b303cfe7f5ede1fa221bc7a193410583e37723013238", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 22 \n \nPROCEDURE: DOUBINS_ORD (L, R, M, X) \nGiven a doubly link list whose left most and right most nodes addressed are given by the pointer variables L and \nR respectively. It is required to insert a node whose address is given by the pointer variable NEW. The left and \nright links of nodes are denoted by LPTR and RPTR respectively. The information field of a node is denoted by \nvariable INFO. The name of an element of the list is NODE. The insertion is to be performed in ascending order \nof info part. The information to be entered in the node is contained in X. \n \n1. [Create New Empty Node] \nNEW          NODE \n \n2. [ Copy information field] \nINFO (NEW) \uf0df X \n \n3.  [Insert into an empty list] \nIf   R = NULL \nthen LPTR (NEW) \uf0df RPTR (NULL) \uf0df NULL \n   L \uf0df R \uf0df NEW \n   return \n \n4.  [Does the new node precedes all other nodes in List? ] \nIf  INFO(NEW) \u2264 INFO(L) \nthen  RPTR (NEW) \uf0df L \n   LPTR(NEW)\uf0df NULL \n   LPTR (L) \uf0df NEW \n   L \uf0df NEW \n   Return \n \n5.  [ Initialize temporary Pointer] \nSAVE \uf0df L \n \n6.  [Search for predecessor of New node] \nRepeat while RPTR(SAVE) \u2260 NULL and INFO(NEW) \u2265 INFO(RPTR(SAVE)) \n  SAVE \uf0df RPTR (SAVE) \n \n7.  [Set link field of new node and its predecessor] \nRPTR (NEW) \uf0df RPTR(SAVE) \nLPTR (RPTR(SAVE)) \uf0df NEW \nRPTR (SAVE) \uf0df NEW \nLPTR (NEW) \uf0df SAVE \n \nIf  SAVE = R \nthen  RPTR(SAVE) \uf0df NEW", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1400, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72c1712a-5cc0-4ae2-a405-3dab32d0b970": {"__data__": {"id_": "72c1712a-5cc0-4ae2-a405-3dab32d0b970", "embedding": null, "metadata": {"page_label": "57", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6e139717-fba0-42b0-a1c1-50f9ef0c450d", "node_type": "4", "metadata": {"page_label": "57", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "55802c2dd39019d05b19f1c2ab0771da8e7eadeb6d13faf0269d8141fff1eacb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 23 \n \nPROCEDURE: DOUBDEL (L, R, OLD) \nGiven a doubly linked list with the addresses of left most and right most nodes are given by the pointer variables \nL and R respectively. It is required to delete the node whose address is contained in the variable OLD. Node \ncontains left and right links with names LPTR and RPTR respectively. \n \n \n1. [ Is underflow ?] \nIf  R=NULL \nthen  write (\u2018 UNDERFLOW\u2019) \n  return \n \n2.  [Delete node] \nIf  L = R (single node in list) \nthen L \uf0df R \uf0df NULL \nelse If  OLD = L (left most node) \n then L \uf0df RPTR(L) \n  LPTR (L) \uf0df NULL \n else if OLD = R (right most) \n  then R \uf0df LPTR (R) \n   RPTR (R) \uf0df NULL \n  else RPTR  (LPTR (OLD)) \uf0df RPTR (OLD) \n   LPTR  (RPTR (OLD)) \uf0df LPTR (OLD) \n \n3. [ FREE deleted node] \nFREE (OLD)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 826, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "43adff97-0bb2-4e77-8809-d9f84544c2aa": {"__data__": {"id_": "43adff97-0bb2-4e77-8809-d9f84544c2aa", "embedding": null, "metadata": {"page_label": "58", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8dccb29-1eb4-4bd2-a339-6369b49c40e8", "node_type": "4", "metadata": {"page_label": "58", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "34a369739e4b5ab5bf35b256ef39e645cc92f2daa8f204f05f42b539fb065cf9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 24 \n \n8. Write the implementation procedure of basic primitive operations of the \nstack using: (i) Linear array  (ii) linked list. \n \n \nImplement PUSH and POP using Linear array \n#define MAXSIZE 100 \nint stack[MAXSIZE]; \nint top=-1; \n \nvoid push(int val) \n{ \nif(top >= MAXSIZE) \nprintf(\"Stack is Overflow\"); \nelse \nstack[++top] = val; \n} \n \nint pop() \n{ \nint a; \nif(top>=0) \n{ \na=stack[top]; \ntop\u2013-; \nreturn a; \n} \nelse \n{ \nprintf(\"Stack is Underflow, Stack is empty, nothing to POP!\"); \nreturn -1; \n} \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 589, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "44cfc5f6-96c0-485d-871f-c26189ffccaf": {"__data__": {"id_": "44cfc5f6-96c0-485d-871f-c26189ffccaf", "embedding": null, "metadata": {"page_label": "59", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ba85b95e-9910-4acf-85fd-c1ef99a9900d", "node_type": "4", "metadata": {"page_label": "59", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "de787d571bd5c9d6965e2f9a295fd5e2ed9193ac61f7f56c7ecd0cb49b4d9960", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 25 \n \n \n \n9. Write the implementation procedure of basic primitive operations of the \nQueue using: (i) Linear array (ii) linked list \n \nImplement PUSH and POP using Linked List \n#include<stdio.h> \n#include<malloc.h> \n \nstruct node \n{ \n    int info; \n    struct node *link; \n} *top; \n \nvoid push(int val) \n{ \nstruct node *p; \n     p = (struct node*)malloc(sizeof(struct node)); \n     p \uf0e0 info = val; \n     p \uf0e0 link = top; \n top = p; \n return; \n} \n \nint pop() \n{ \n int val; \nif(top!=NULL) \n{ \n val = top \uf0e0 info; \ntop=top \uf0e0link; \nreturn val; \n} \nelse \n{ \nprintf(\"Stack Underflow\");     \nreturn -1; \n} \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 685, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "730077b9-bcff-4bdb-99fd-31de7688b1a3": {"__data__": {"id_": "730077b9-bcff-4bdb-99fd-31de7688b1a3", "embedding": null, "metadata": {"page_label": "60", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3732f42-39a2-4c03-80c8-cd62bee7e5a7", "node_type": "4", "metadata": {"page_label": "60", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a423773037564d42511684a9b33dc22193e8a0b3e06e04b8446c12374697adf2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 26 \n \n \nImplement Enqueue(Insert)and Dequeue(Delete)using Linear Array \n# include <stdio.h> \n# define MAXSIZE 100 \nint queue[MAXSIZE], front = -1, rear = -1; \nvoid enqueue(int val) \n{ \n if(rear >= MAXSIZE) \n { \n  printf(\"Queue is overflow\") ; \n  return ; \n } \n rear++; \nqueue [rear] = val; \n if(front == -1) \n { \n  front++; \n } \n} \nint dequeue() \n{ \n int data; \n if(front == -1) \n { \n  printf(\"Queue is underflow\") ; \n  return -1; \n } \n data = queue [front]; \n if(front == rear) \n { \n  front = rear = -1; \n } \n else \n { \n  front++; \n } \nreturn data; \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 637, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1b528f48-b9c6-4f8c-ae19-e6d908c8e5a9": {"__data__": {"id_": "1b528f48-b9c6-4f8c-ae19-e6d908c8e5a9", "embedding": null, "metadata": {"page_label": "61", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c66222b2-690e-42ac-bcb4-b4c78a3d70cb", "node_type": "4", "metadata": {"page_label": "61", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d77dd840daaca60ca7661e98a9cf609614a35743fe6d94f9b82ea5d1d9a77460", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 27 \n \n \nImplement Enqueue(Insert)and Dequeue(Delete)using Linked List \n#include<stdio.h> \n#include<malloc.h> \n \nstruct node \n{ \n    int info; \n    struct node *link; \n} *front, *rear; \n \n \nvoid enqueue(int val) \n{ \nstruct node *p; \n     p = (struct node*)malloc(sizeof(struct node)); \np \uf0e0 info = val; \np \uf0e0 link = NULL; \nif (rear == NULL || front == NULL) \n     { \n   front = p; \n  } \nelse \n  { \n  rear \uf0e0 link = p; \n rear = p; \n  } \n} \n \nint dequeue() \n{ \n    struct node *p; \n    int val; \n    if (front == NULL || rear == NULL) \n    { \n        printf(\"Under Flow\"); \n        exit(0); \n    } \n    else \n    { \n        p = front; \n        val = p \uf0e0 info; \n        front = front \uf0e0 link; \n        free(p); \n    } \n    return (val); \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 816, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "496c9156-aa33-40b5-8cc1-71943c523ed6": {"__data__": {"id_": "496c9156-aa33-40b5-8cc1-71943c523ed6", "embedding": null, "metadata": {"page_label": "62", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2056e5bb-1096-45e4-bfd5-0773d9085022", "node_type": "4", "metadata": {"page_label": "62", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ae40ac6db3ae3d7b02d05d72ce898940982a84e4800d8298377346adc5d2d4b7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 28 \n \n10. Write an algorithm to implement ascending priority queue using \nsingular linear linked list which has insert() function such that queue \nremains ordered list. Also implement remove() function \n \n \nremove() \n{ \n struct node *tmp; \n if(front == NULL) \n  printf(\"Queue Underflow\\n\"); \n else \n { \n  tmp = front; \n  printf(\"Deleted item is %d\\n\",tmp->info); \n  front = front->link; \n  free(tmp); \n } \n}/*End of remove()*/ \n \n \nstruct node \n{ \n int priority; \n int info; \n struct node *link; \n}*front = NULL;", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 597, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b4f8a8d8-32f0-4673-a3c8-b8764d7e56e4": {"__data__": {"id_": "b4f8a8d8-32f0-4673-a3c8-b8764d7e56e4", "embedding": null, "metadata": {"page_label": "63", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "751b8b57-1a12-41a9-9423-9b93a2a8c77c", "node_type": "4", "metadata": {"page_label": "63", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c315ee9040f93b96469a0f5eb0190f47bd7fa62cc5041c78f9fb944bd1fb3d1d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 29 \n \n \ninsert() \n{ \n struct node *tmp,*q; \n int added_item,item_priority; \n tmp = (struct node *)malloc(sizeof(struct node)); \n printf(\"Input the item value to be added in the queue : \"); \n scanf(\"%d\",&added_item); \n printf(\"Enter its priority : \"); \n scanf(\"%d\",&item_priority); \n tmp->info = added_item; \n tmp->priority = item_priority; \n /*Queue is empty or item to be added has priority more than \nfirst item*/ \n if( front == NULL || item_priority < front->priority ) \n { \n  tmp->link = front; \n  front = tmp; \n } \n else \n { \n  q = front; \n  while( q->link != NULL &&  \nq->link->priority <= item_priority ) \n  { \n   q=q->link; \n} \n  tmp->link = q->link; \n  q->link = tmp; \n }/*End of else*/ \n}/*End of insert()*/", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 802, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "454535a8-012f-4406-81d2-6aa7d907a49d": {"__data__": {"id_": "454535a8-012f-4406-81d2-6aa7d907a49d", "embedding": null, "metadata": {"page_label": "64", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "402ac11c-c255-440e-9981-5a8da6facbdd", "node_type": "4", "metadata": {"page_label": "64", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7cde0f6cb6bac4d0caf36dbf8636ed8d2c7b19e9f5753e0910253c74f699aa32", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Linked List \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 30 \n \n \n \ndisplay() \n{ \n struct node *ptr; \n ptr = front; \n if(front == NULL) \n  printf(\"Queue is empty\\n\"); \n else \n {  \n  printf(\"Queue is :\\n\"); \n  printf(\"Priority Item\\n\"); \n  while(ptr != NULL) \n  { \n   printf(\"%5d %5d\\n\",ptr->priority,ptr->info); \n   ptr = ptr->link; \n  } \n }/*End of else */ \n}/*End of display() */", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 408, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1450a50a-2097-46ef-be30-f0115149c071": {"__data__": {"id_": "1450a50a-2097-46ef-be30-f0115149c071", "embedding": null, "metadata": {"page_label": "65", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4aad530e-3a0f-4fa7-a8d0-b8ed4e4544fc", "node_type": "4", "metadata": {"page_label": "65", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7e3f3536ba54ae7725228d285df7afef136e1b626c047a02b3c3373f955589d1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \n1. Discuss following \n1. Graph \n\uf0b7 A graph G consist of a non-empty set V called the set of nodes (points, vertices) of the \ngraph, a set E which is the set of edges and a mapping from the set of edges E to a set of \npairs of elements of V. \n\uf0b7 It is also convenient to write a graph as G=(V,E). \n\uf0b7 Notice that definition of graph implies that to every edge of a graph G, we can associate a \npair of nodes of the graph. If an edge X \u0404 E is thus associated with a pair of nodes ( u,v) \nwhere u, v \u0404 V then we says that edge x connect u and v.  \n2. Adjacent Nodes \n\uf0b7 Any two nodes which are connected by an edge in a graph are called adjacent node. \n3. Directed & Undirected Edge \n\uf0b7 In a graph G=(V,E) an edge which is directed from on e end to another end is called a \ndirected edge, while the edge which has no specific direction is called undirected edge. \n4. Directed graph (Digraph) \n\uf0b7 A graph in which every edge is directed is called directed graph or digraph. \n5. Undirected graph \n\uf0b7 A graph in which every edge is undirected is called undirected graph. \n6. Mixed Graph \n\uf0b7 If some of the edges are directed and some are undirected in graph then the graph is called \nmixed graph. \n7. Loop (Sling) \n\uf0b7 An edge of a graph which joins a node to itself is called a loop (sling). \n8. Parallel Edges \n\uf0b7 In some directed as well as undirected graphs, we may have certain pairs of nodes joined by \nmore than one edges, such edges are called Parallel edges. \n9. Multigraph \n\uf0b7 Any graph which contains some parallel edges is called multigraph. \n10. Weighted Graph \n\uf0b7 A graph in which weights are assigned to every edge is called weighted graph.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1754, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f4e514c0-0641-4668-804e-c1dc9147f419": {"__data__": {"id_": "f4e514c0-0641-4668-804e-c1dc9147f419", "embedding": null, "metadata": {"page_label": "66", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d915967a-31b6-4121-95a6-3bc2291bf20c", "node_type": "4", "metadata": {"page_label": "66", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d2dcc356623445006dd95864d2a1fc3fc0c77b9efab734527f97c47462677cc0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n11. Isolated Node \n\uf0b7 In a graph a node which is not adjacent to any other node is called isolated node. \n12. Null Graph \n\uf0b7 A graph containing only isolated nodes are called null graph. In other words set of edges in \nnull graph is empty. \n13. Path of Graph \n\uf0b7 Let G=(V, E) be a simple digraph such that the terminal node of any  edge in the sequence i s \nthe initial node of the edge, if any appearing next in the sequence defined as path of the \ngraph. \n14. Length of Path \n\uf0b7 The number of edges appearing in the sequence of the path is called length of path. \n15. Degree of vertex \n\uf0b7 The no of edges which have V as their terminal node is call as indegree of node V \n\uf0b7 The no of edges which have V as their initial node is call as outdegree of node V \n\uf0b7 Sum of indegree and outdegree of node V is called its Total Degree or Degree of vertex. \n16. Simple Path (Edge Simple) \n\uf0b7 A path in a diagraph in which the edges are distinct is called simple path or edge simple. \n17. Elementary Path (Node Simple) \n\uf0b7 A path in which all the nodes through which it traverses are distinct is called elementary \npath. \n18. Cycle (Circuit) \n\uf0b7 A path which originates and ends in the same node is called cycle (circuit). \n19. Directed Tree \n\uf0b7 A directed tree is an acyclic digraph which has one node called its root with in degree 0, \nwhile all other nodes have in degree 1. \n\uf0b7 Every directed tree must have at least one node. \n\uf0b7 An isolated node is also a directed tree. \n20. Terminal Node (Leaf Node) \n\uf0b7 In a directed tree, any node which has out degree 0 is called terminal node or leaf node. \n21. Level of Node \n\uf0b7 The level of any node is the length of its path from the root.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1783, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d68f731-ba18-43ee-8b9b-983b823b1d38": {"__data__": {"id_": "6d68f731-ba18-43ee-8b9b-983b823b1d38", "embedding": null, "metadata": {"page_label": "67", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "325090a3-b490-4930-9b31-406df6830450", "node_type": "4", "metadata": {"page_label": "67", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7ef38364191d2ca1072dc298e6c619a93704b8b25742223c6ed58c3060a95c41", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n22. Ordered Tree \n\uf0b7 In a directed tree an ordering of  the nodes at each level is prescribed then such a tree is \ncalled ordered tree. \n23. Forest \n\uf0b7 If we delete the root and its edges connecting the nodes at level 1, we obtain a set of \ndisjoint tree. A set of disjoint tree is a forest. \n24. M-ary Tree \n\uf0b7 If in a directed tr ee the out degree of every node is less than or equal to m then tree is \ncalled an m-ary tree. \n25. Full or Complete M-ary Tree \n\uf0b7 If the out degree of each and every node is exactly equal to m or 0 and their number of \nnodes at level i is m(i-1) then the tree is called a full or complete m-ary tree. \n26. Positional M-ary Tree \n\uf0b7 If we consider m -ary trees in which the m children of any node are assumed to have m \ndistinct positions, if such positions are taken into account, then tree is called positional m -\nary tree. \n27. Height of the tree \n\uf0b7 The height of a tree is the length of the path from the root to the deepest node in the tree. \n28. Binary tree \n\uf0b7 If in a directed tree the out degree of every node is less than or equal to 2 then tree is called \nbinary tree. \n29. Strictly binary tree \n\uf0b7 A strictly binary tree (sometimes proper binary tree or 2 -tree or full binary tree) is a tree in \nwhich every node other than the leaves has two children. \n30. Complete binary tree \n\uf0b7 If the out degree of each and every node is exactly equal to 2 or 0 and their number of \nnodes at level i is 2(i-1) then the tree is called a full or complete binary tree. \n31. Sibling \n\uf0b7 Siblings are nodes that share the same parent node. \n32. Binary search tree \n\uf0b7 A binary search tree is a binary tree  in which each node possessed a key that satisfy the \nfollowing conditions", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1819, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a937ce0-1a78-47a2-924b-15d8a4cb57a5": {"__data__": {"id_": "1a937ce0-1a78-47a2-924b-15d8a4cb57a5", "embedding": null, "metadata": {"page_label": "68", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c2e6927-d5e0-47f3-b11b-e575ca8b34e7", "node_type": "4", "metadata": {"page_label": "68", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a7a0c5cb2229cc84f7f93bf36f3299dfcaffc07ea1d3fc63dfc08dd348c92695", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n1. All key (if any) in the left sub tree of the root precedes the key in the root. \n2. The key in the root precedes all key (if any) in the right sub tree. \n3. The left and right sub tree sub trees of the root are again search trees. \n33. Height Balanced Binary tree (AVL Tree) \n\uf0b7 A tree is called AVL (height balance binary tree), if each node possesses one of the following \nproperties \n1. A node is called left heavy if the longest path in its left sub tree is one longer then \nthe longest path of its right sub tree. \n2. A node is called right heavy if the longest path in the right sub tree is one longer \nthan path in its left sub tree. \n3. A node is called balanced, if the longest path in both the right and left sub tree are \nequal. \n \n2. Explain the Preorder, Inorder and Postorder traversal techniques of the \nbinary tree with suitable example. \n\uf0b7 The most common operations performed on tree structure is that of traversal. This is a procedure by \nwhich each node in the tree is processed exactly once in a systematic manner. \n\uf0b7 There are three ways of traversing a binary tree. \n1. Preorder Traversal \n2. Inorder Traversal \n3. Postorder Traversal \n \n  \nA \nB \nC E \nD \nG \nF Fig. 1.1 \nPreorder traversal : A  B  C  D  E  F  G \nInorder traversal : C  B  A  E  F  D  G \nPostorder traversal : C  B  F  E  G  D  A \nConverse Preorder traversal : A  D  G  E  F  B  C \nConverse Inorder traversal : G  D  F  E  A  B  C \nConverse Postorder traversal : G  F  E  D  C  B  A", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1590, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf739ad9-ade9-4105-a0e9-b5ed8cced777": {"__data__": {"id_": "bf739ad9-ade9-4105-a0e9-b5ed8cced777", "embedding": null, "metadata": {"page_label": "69", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37317fc2-ac3b-4ad7-a748-896f3b995e38", "node_type": "4", "metadata": {"page_label": "69", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "276d567587968c301e064ea2123448afa919591e141bb2fda2985ef8d155a160", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \nPreorder \n\uf0b7 Preorder traversal of a binary tree is defined as follow \no Process the root node \no Traverse the left subtree in preorder \no Traverse the right subtree in preorder \n\uf0b7 If particular subtree is empty (i.e., node has no left or right descendant) the traversal is performed by \ndoing nothing, In other words, a null subtree is considered to be fully traversed when it is encountered. \n\uf0b7 The preorder traversal of a tree (Fig. 1.1) is given by A  B  C  D  E  F  G \nInorder \n\uf0b7 The Inorder traversal of a binary tree is given by following steps, \no Traverse the left subtree in Inorder \no Process the root node \no Traverse the right subtree in Inorder \n\uf0b7 The Inorder traversal of a tree (Fig. 1.1) is given by C  B  A  E  F  D  G \nPostorder \n\uf0b7 The postorder traversal is given by \no Traverse the left subtree in postorder \no Traverse the right subtree in postorder \no Process the root node \n\uf0b7 The Postorder traversal of a tree (Fig. 1.1) is given by  C  B  F  E  G  D  A \nConverse \u2026 \n\uf0b7 If we interchange left and right words in the preceding definitions, we obtain three new tra versal orders \nwhich are called \no Converse Preorder (A  D  G  E  F  B  C)  \no Converse Inorder (G  D  F  E  A  B  C) \no Converse Postorder (G  F  E  D  C  B  A) \n \n3. Write the algorithm of Preorder, Inorder and Postorder traversal \ntechniques of the binary tree. \nProcedure : RPREORDER(T) \n\uf0b7 Given a binary tree whose root node address is given by pointer variable T and whose node structure  is \nsame as described below.  This procedure traverses the tree in preorder, in a recursive manner.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1697, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "98c479b9-63b3-42a7-b98b-b2269ebb233d": {"__data__": {"id_": "98c479b9-63b3-42a7-b98b-b2269ebb233d", "embedding": null, "metadata": {"page_label": "70", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09098469-d921-43ed-812b-63f532cc824d", "node_type": "4", "metadata": {"page_label": "70", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "9d5ef5560dc0a25f02a9cb1cc4b87211eb40302bad298fe861d08ec291905cb6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n \nProcedure : RINORDER(T) \n\uf0b7 Given a binary tree whose root node address is given by pointer variable T and whose node structure is \nsame as described below. This procedure traverses the tree in inorder, in a recursive manner. \n \n1. [Check for empty Tree] \nIf  T = NULL \nthen write (\u2018Empty Tree\u2019) \n  return \n \n2. [Process the Left Subtree] \nIf  LPTR (T) \u2260 NULL \nthen  RINORDER (LPTR (T)) \n \n3. [Process the root node] \nwrite (DATA(T)) \n \n4.  [Process the Right Subtree] \nIf  RPTR (T) \u2260 NULL \nthen  RINORDER (RPTR (T)) \n \n \n5.  [Finished] \nreturn \n1. [Check for empty Tree] \nIf  T = NULL \nthen write (\u2018Empty Tree\u2019) \n  return \nelse write (DATA(T)) \n \n2. [Process the Left Subtree] \nIf  LPTR (T) \u2260 NULL \nthen  RPREORDER (LPTR (T)) \n \n3.  [Process the Right Subtree] \nIf  RPTR (T) \u2260 NULL \nthen  RPREORDER (RPTR (T)) \n \n4. [Finished] \nreturn \nLPTR DATA RPTR", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 970, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8cfa3901-2bee-4375-a9fc-e771b5757261": {"__data__": {"id_": "8cfa3901-2bee-4375-a9fc-e771b5757261", "embedding": null, "metadata": {"page_label": "71", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be438d4e-c754-4b6b-b1a7-0d67b08de814", "node_type": "4", "metadata": {"page_label": "71", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d5a84d5ef64f520a4266de7f43104770ef749ebeb16504e93ec5c104aea7b44b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \nProcedure : RPOSTORDER(T) \n\uf0b7 Given a binary tree whose root node address is given by pointer variable T and whose node structure is \nsame as described below. This procedure traverses the tree in postorder, in a recursive manner. \n \n \n4. Give traversal order of following tree into Inorder, Preorder and Postorder. \n \n \n1 \n2 3 \n4 \n5 \nInorder: 2 1 4 5 3 \nPreorder: 1 2 3 4 5 \nPost order: 2 5 4 3 1 \n \n1. [Check for empty Tree] \nIf  T = NULL \nthen write (\u2018Empty Tree\u2019) \n  return \n \n2. [Process the Left Subtree] \nIf  LPTR (T) \u2260 NULL \nthen  RPOSTORDER (LPTR (T)) \n \n3.  [Process the Right Subtree] \nIf  RPTR (T) \u2260 NULL \nthen  RPOSTORDER (RPTR (T)) \n \n4.  [Process the root node] \nwrite (DATA(T)) \n \n5.  [Finished] \nreturn", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 835, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fee4591e-6a54-4536-a6a6-9dec9b02b7d4": {"__data__": {"id_": "fee4591e-6a54-4536-a6a6-9dec9b02b7d4", "embedding": null, "metadata": {"page_label": "72", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3a099732-9505-4e42-bf00-0dcc353efb07", "node_type": "4", "metadata": {"page_label": "72", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3fcb72a268eb42c5613d342eb440fb47c81f3b746e583868ba8a5fc6819d8339", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \n5. Construct a tree for the given Inorder and Postorder traversals \n \n \n \nA \nD \nA \nB C \nD  G  B H  E  I  C  F \nG H \nF H  E  I D  G \nA \nB C \nF \nI \nE \nInorder    : D G B A H E I C F \nPostorder : G D B H I E F C A", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 328, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c783b6d6-2e3d-4624-b3ea-44bc50ab9b82": {"__data__": {"id_": "c783b6d6-2e3d-4624-b3ea-44bc50ab9b82", "embedding": null, "metadata": {"page_label": "73", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7434995a-f7d4-4671-bb11-2694345a5d0d", "node_type": "4", "metadata": {"page_label": "73", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8895e0b33100f9f52d963cb9603c005df77e9ad94aab669e41d44093881be141", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 9 \n \n \n \nA \nC \nA \nB D \nB  C E  D  G  H  F  I \nE G  H  F  I \nA \nB D \nF E \nPostorder : C B E H G I F D A \nInorder    : B C A E D G H F I \n \nC \nI G  H  \nC \nA \nB D \nF E \nI G \nH", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 285, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "49c70a22-f2e9-4be9-856b-3536cbd3caaa": {"__data__": {"id_": "49c70a22-f2e9-4be9-856b-3536cbd3caaa", "embedding": null, "metadata": {"page_label": "74", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d5484cb-5d32-4a9a-8ff2-848d2c786d5e", "node_type": "4", "metadata": {"page_label": "74", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "17e931003392685ed67a46a25af4f817ef3ff71f7a75f6fd8eaf3bc41aa6ffc5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 10 \n \n6. Construct a tree for the given Inorder and Preorder traversals \n \nG \nG \nB P \nQ  B  K  C  F  A P  E  D  H  R \nD  E  R  H \nPreorder : G B Q A C K F P D  E R H \nInorder   : Q B K C F A G P E D  H R \nQ K  C  F  A \nG \nB P \nR  H \nQ \nK  C  F  \nA D \nE \nG \nB P \nQ A D \nE \nF \nC \nK \nR \nH", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 398, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03d740d4-7bb4-4227-8c40-f5f867a5fea3": {"__data__": {"id_": "03d740d4-7bb4-4227-8c40-f5f867a5fea3", "embedding": null, "metadata": {"page_label": "75", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e932be7e-0fd1-4a1d-82bd-5658d13fdace", "node_type": "4", "metadata": {"page_label": "75", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "bea277c5edda3591bc638375661a229819a2af8b27d7526ccc5af87e3a1abd8d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 11 \n \n7. Create a binary search tree for the following data :  \n50 ,25 ,75, 22,40,60,80,90,15,30 \n \n \n8. Construct binary search tree for the following data and find its Inorder, \nPreorder and Postorder traversal \n10,3,15,22,6,45,65,23,78,34,5 \n \n10 \n3 15 \n6 22 \n5 \n45 \n65 \n34 \n23 \n78 \nPreorder  : 10, 3, 6, 5, 15, 22, 45, 23, 34, 65, 78 \nInorder     : 3, 5, 6, 10, 15, 22, 23, 34, 45, 65, 78 \nPostorder : 5, 6, 3, 34, 23, 78, 65, 45, 22, 15, 10 \n50 \n25 75 \n22 40 80 60 \n30 15 90", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 592, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2777bd7c-8627-4e86-931f-2cd58ac2b35c": {"__data__": {"id_": "2777bd7c-8627-4e86-931f-2cd58ac2b35c", "embedding": null, "metadata": {"page_label": "76", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6783ce8-e9d9-4c06-b016-334fd0e03277", "node_type": "4", "metadata": {"page_label": "76", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "46a4119c7e4b03f5cf573ebbe5f943f09b290f0c2b6fb6c6798e54cdbd9f521d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 12 \n \n9. Write a short note on threaded binary tree \n\uf0b7 The wasted NULL links in the binary tree storage representation can be replaced by threads. \n\uf0b7 A binary tree is threaded according to particular traversal order. e.g.: Threads for the inorder traversals \nof tree are pointers to its higher nodes, for this traversal order. \no If left link of node P is null, then this link is replaced by the address of its predecessor. \no If right link of node P is null, then it is replaced by the address of its successor \n\uf0b7 Because the left or right link of a node can denote either structural link or a thread, we must somehow \nbe able to distinguish them. \n\uf0b7 Method 1:- Represent thread a \u2013ve address. \n\uf0b7 Method 2:- To have a separate Boolean flag for each of le ft and right pointers, node structure for this is \ngiven below, \nLPTR LTHREAD Data RTHREAD RPTR \nAlternate node for threaded binary tree. \n\uf0b7 LTHREAD = true = Denotes leaf thread link \n\uf0b7 LTHREAD = false = Denotes leaf structural link \n\uf0b7 RTHREAD = true = Denotes right threaded link \n\uf0b7 RTHREAD = false = Denotes right structural link \n \n\uf0b7 Head node is simply another node which serves as the predecessor and successor of first and last tree \nnodes. Tree is attached to the left branch of the head node \nHead \n \nAdvantages \n\uf0b7 Inorder traversal is faster than unthreaded version as stack is not required. \n\uf0b7 Effectively determines the predecessor and successor for inorder traversal, for unthreaded tree this task is \nmore difficult. \n\uf0b7 A stack is required to provide upward pointing information in tree which threading provides. \n\uf0b7 It is possible to generate successor or predecessor of any node  without having over head of st ack with the \nhelp of threading. \nDisadvantages \n\uf0b7 Threaded trees are unable to share common subtrees", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1895, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb151534-eaab-4a98-b86c-08fa0ed44dd3": {"__data__": {"id_": "fb151534-eaab-4a98-b86c-08fa0ed44dd3", "embedding": null, "metadata": {"page_label": "77", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d8c5f22-340f-4c6b-ad9d-c16fb0ea82e0", "node_type": "4", "metadata": {"page_label": "77", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "979f72589b992b7b472e883df4cc493c19c08de0d92f83c7525ab6a66468a3d2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 13 \n \n\uf0b7 If \u2013ve addressing is not permitted in programming language, two additional fields are required. \n\uf0b7 Insertion into and deletion from threaded binary tree are more time consuming because both thread and \nstructural link must be maintained. \n \n \nA \nB \nC \nD \nE \nF \nG \nFully In-threaded binary tree of given binary tree \nHEAD \nA \nB D \nF \nC \nE G \nBinary Tree \nInorder Traversal  C  B  A  E  F  D  G", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 513, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "80df4762-ffe4-499f-9fab-90d0eb43804c": {"__data__": {"id_": "80df4762-ffe4-499f-9fab-90d0eb43804c", "embedding": null, "metadata": {"page_label": "78", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5a2620e-0cd8-45ae-83eb-498ebe8814e8", "node_type": "4", "metadata": {"page_label": "78", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c7245c991af3d596bf48f84319a274cf5cf036bf457b0d82ea48e3a36e4a20e5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 14 \n \n \n10. Draw a right in threaded binary tree for the given tree \n \n \n  \nA \nB \nC \nE \nF \nG \nH \nRight In-threaded binary tree of given binary tree \nHEAD \nD", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 269, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93ae1d16-79ef-4c89-96a1-d7a772f44694": {"__data__": {"id_": "93ae1d16-79ef-4c89-96a1-d7a772f44694", "embedding": null, "metadata": {"page_label": "79", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e3d4eab0-48fc-4bef-b93b-4a4b81d1cfe3", "node_type": "4", "metadata": {"page_label": "79", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "385cb60512c9eb6b9636cea922dae244dba22efb660f0062a2a0e23d4aaf67ce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 15 \n \n11. What is the meaning of height balanced tree? How rebalancing is done in \nheight balanced tree. \nA tree is called AVL (height balance binary tree), if each node possesses one of the following properties \n1. A node is called left heavy if the longest path in its left sub tree is one longer then the longest path of its \nright sub tree. \n2. A node is called right heavy if the longest path in the right sub tree is one longer than path in its left sub \ntree. \n3. A node is called balanced, if the longest path in both the right and left sub tree are equal. \nIf tree becomes unbalanced by inserting any node, then based on position of insertion, we need to rotate the \nunbalanced node. Rotation is the process to make tree balanced \n1) Insertion into Left sub-tree of nodes Left child \u2013 Single Right Rotation \n2) Insertion into Right sub-tree of node\u2019s Left child \u2013 Left Right Rotation \n3) Insertion into Left sub-tree of node\u2019s Right child \u2013 Right Left Rotation \n4) Insertion into Right sub-tree of node\u2019s Right child \u2013 Single Left Rotation \n1) Insertion into Left sub-tree of nodes Left child \u2013 Single Right Rotation \nIf node becomes unbalanced after insertion of new node at Left sub-tree of nodes Left child , then we need \nto perform Single Right Rotation for unbalanced node. \nRight Rotation \na. Detach leaf child\u2019s right sub-tree \nb. Consider leaf child to be the new parent \nc. Attach old parent onto right of new parent \nd. Attach old leaf child\u2019s old right sub-tree as leaf sub-tree of new right child \n \n \nJ \nK Z \nX Y \nN \nK \nX J \nN Z Y \nRight \nRotation \nCritical Node", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1698, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63bf7b77-7f25-4581-a570-30ba6a9730b9": {"__data__": {"id_": "63bf7b77-7f25-4581-a570-30ba6a9730b9", "embedding": null, "metadata": {"page_label": "80", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9548f2d2-beb4-4605-9c43-0dcc70d802ea", "node_type": "4", "metadata": {"page_label": "80", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4d575cb6c7be7520fbe05ac752beeeb458b1a8523ed53efac66dd9ed39a7c53f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 16 \n \n \n2) Insertion into Right sub-tree of node\u2019s Left child \u2013 Left Right Rotation \nIf node becomes unbalanced after insertion of new node at Right sub-tree of node\u2019s Left child, then we need \nto perform Left Right Rotation for unbalanced node. \nLeaf rotation of leaf child followed by right rotation of parent \n \n3) Insertion into Left sub-tree of node\u2019s Right child \u2013 Right Left Rotation \nIf node becomes unbalanced after insertion of new node at Left sub-tree of node\u2019s Right child , then we \nneed to perform Right Left Rotation for unbalanced node. \n \nSingle right rotation of right child followed by left rotation of parent \nJ \nK Z \nX Y \nn X \nK n \nZ Y \nJ \nX n Z \nK J \nY \nLeft \nRotation of K \nRight \nRotation of J \n13 \n5 10 \n7 15 \n3 \n7 \n3 15 \n5 13 \n10 \n7 \n13 5 \n10 15 3 \n7 \n13 5 \n10 15 3 \nCritical Node \nSteps of \nRight \nRotation", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 947, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d17c55f0-5bfa-426c-b3b6-63d37dd2a634": {"__data__": {"id_": "d17c55f0-5bfa-426c-b3b6-63d37dd2a634", "embedding": null, "metadata": {"page_label": "81", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d805dc8f-769c-4b70-bc88-5414d8f7335c", "node_type": "4", "metadata": {"page_label": "81", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b712be633334c4fe93dc7ceb3aced49bbad9faf5e2aa252b137e9f0f6c83eb79", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 17 \n \n \n4) Insertion into Right sub-tree of node\u2019s Right child \u2013 Single Left Rotation \nIf node becomes unbalanced after insertion of new node at Right sub-tree of nodes Right child, then we \nneed to perform Single Left Rotation for unbalanced node. \nLeft Rotation \na. Detach right child\u2019s leaf sub-tree \nb. Consider right child to be new parent \nc. Attach old parent onto left of new parent \nd. Attach old right child\u2019s old left sub-tree as right sub-tree of new left child \n \n \n \n50 \n70 40 \n80 60 \n90 60 \n80 50 \n90 \n60 40 \n70 \n50 \n40 \n70 \n80 \n90 \nExample \nUnbalanced node \nX \nY \nT2 T3 \nT1 \nn \nY \nX T3 \nT1 T2 \nn \nLeaf  \nRotation of X \nUnbalanced node \nX \nT1 Z \nY T4 \nT2 T3 \nUnbalanced node X \nT1 Y \nT2 Z \nT3 T4 \nRight \nRotation of Z \nY \nX Z \nT3 T4 T1 T2 \nLeft  \nRotation of X", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 888, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "32675d9a-9da2-4f0f-8339-ac9d7390ef59": {"__data__": {"id_": "32675d9a-9da2-4f0f-8339-ac9d7390ef59", "embedding": null, "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a", "node_type": "4", "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c15ad33790baaea20fbbd34ad2a90048befd6b80b30609bcd1bf9ce32ad8565f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b457072b-45cb-41cb-b904-0603839c9cb7", "node_type": "1", "metadata": {}, "hash": "3b77d9024f5d3f7064462993cc9ed8640c186fbfa24780f1b243ab1fa18c88d8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 18 \n \n12. Construct AVL Search tree by inserting following elements in order of \ntheir occurrence 6, 5, 4, 3, 2, 1 \n \n \nAssignment: \n\uf0b7 Define height of the binary tree. Define height balanced tree with its advantages. Construct a height \nbalanced binary tree (AVL tree) for the following data 42,06,54,62,88,50,22,32,12,33 \n\uf0b7 Construct the AVL search tree by inserting the following elements in the order of their occurrence. 64, 1, \n44, 26, 13, 110, 98, 85 \n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nInsert  6 Insert : 5 \n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \n5\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \n5\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\n4\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nInsert  : 4 \nRight \nRotate 6 \n5 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl \n4\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1234, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b457072b-45cb-41cb-b904-0603839c9cb7": {"__data__": {"id_": "b457072b-45cb-41cb-b904-0603839c9cb7", "embedding": null, "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a", "node_type": "4", "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c15ad33790baaea20fbbd34ad2a90048befd6b80b30609bcd1bf9ce32ad8565f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32675d9a-9da2-4f0f-8339-ac9d7390ef59", "node_type": "1", "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "138159a65551626a3f5b231b1f0be21561e4d11f75589be0d1f6b2184f202869", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a285d43-a9ab-4f59-bc1a-875cab137a7c", "node_type": "1", "metadata": {}, "hash": "eef6ad32a7d44c896d679730dfa77a05c8084a2008250074170e0d0224d2cd56", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "M\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\n5 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl \n4\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\n3\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\nInsert :  3 \nInsert : 2 \n5 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \n 6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\n3\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n2\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nRigh\nt \nRotate 4 \n5 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\n3\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\n2\n:\n\\\nD\nF\nS\n\\\nD\nF\nS", "mimetype": "text/plain", "start_char_idx": 1199, "end_char_idx": 2074, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0a285d43-a9ab-4f59-bc1a-875cab137a7c": {"__data__": {"id_": "0a285d43-a9ab-4f59-bc1a-875cab137a7c", "embedding": null, "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a", "node_type": "4", "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c15ad33790baaea20fbbd34ad2a90048befd6b80b30609bcd1bf9ce32ad8565f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b457072b-45cb-41cb-b904-0603839c9cb7", "node_type": "1", "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b0a53c59818f9dcc4959df41246a82ca4031ebf8655c91f94670486aea9c908e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "M\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\n2\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n4\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\nInsert : 1 \n5 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\n3\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\n2\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n4\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n1\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nRight  \nRotate 5 \n3 \nF\ni\nn\na\nl \nM\na\nt\ne\nr\ni\na\nl\nF\n:\n\\\nD\nF\nS\n2\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\n5\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\na\nt\n1\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\n4\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \nM\n6\nF\n:\n\\\nD\nF\nS\n\\\nD\nF\nS \nF\ni\nn\na\nl \n1 2 3 4 \n5 6", "mimetype": "text/plain", "start_char_idx": 2033, "end_char_idx": 2749, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0074b5a6-fb47-43a9-ae98-0b5206139740": {"__data__": {"id_": "0074b5a6-fb47-43a9-ae98-0b5206139740", "embedding": null, "metadata": {"page_label": "83", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2fe0eb23-0aab-4a53-82ac-4a4171d3e0b5", "node_type": "4", "metadata": {"page_label": "83", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "77afc29629e06e5a2496f027dc9695114e1742dd6bf3e2c34bbda04bb95a6e84", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 19 \n \n13. What are the advantages of Multiway search tree in disc access? \nConstruct B tree of order 5 for the following data \n1,6,7,2,11,5,10,13,12,20,16,24,3,4,18,19,14,25 \n \nInsert: 1 \n1 \n1 \nInsert: 6 \n1,  6 \nInsert: 7 \n1,  6,   7 \nInsert: 2 \n1,  2,   6,   7 \nInsert: 11 \n1,  2,   6,   7,   11 \nOverflow 1,  2 7,  11 \n6 \n2 3 4 5 \n1,  2,  5 7,  11 \n6 \nInsert: 5 \n6 \n1,  2,  5 7,  10,  11 \n6 \nInsert: 10 \n1,  2,  5 7, 10, 11, 13 \n6 \nInsert: 13 \n7 8 \n1,  2,  5 7, 10, 11, 12, 13 \n6 \nInsert: 12 \nOverflow \n1,  2,  5 12, 13 \n6, 11 \n7, 10 \nInsert: 20 \n1,  2,  5 12, 13, 20 \n6, 11 \n7, 10 \n9 10 \n11 \nInsert: 16 \n1,  2,  5 12, 13, 16, 20 \n6, 11 \n7, 10 \nInsert: 24 \n1,  2,  5 12, 13, 16, 20, 24 \n6, 11 \n7, 10 \nOverflow \n1,  2,  5 20, 24 \n6, 11, 16 \n7, 10 12, 13 \n12", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 871, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "24466767-56e3-4421-bab1-e7e72318521b": {"__data__": {"id_": "24466767-56e3-4421-bab1-e7e72318521b", "embedding": null, "metadata": {"page_label": "84", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a21361d-21d4-4175-87e1-8c0f1882d11d", "node_type": "4", "metadata": {"page_label": "84", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2360e5efc7c73d82882034852bb2b0f8e5e856596a3c09b81f374754bdf4e651", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 20 \n \n \nAssignment: \n\uf0b7 Construct mutiway search tree for the following data of order for 100, 150, 50, 55, 250, 200, 170, 65, 75, \n20, 30, 52, 10, 25, 180, 190, 300, 5 \n \n \n13 \n1,  2, 3, 4, 5 20, 24 \n6, 11, 16 \n7, 10 12, 13 \nInsert: 3, 4 \nOverflow \n20, 24 \n3   6   11    16 \n7, 10 12, 13 4, 5 1, 2 \n14 \nInsert: 18, 19, 14 \n18, 19, 20, 24 \n3   6   11    16 \n7, 10 12, 13, 14 4, 5 1, 2 \n15 \nInsert: 25 \n18, 19, 20, 24, 25 \n3   6   11    16 \n7, 10 12, 13, 14 4, 5 1, 2 \n18, 19 \n3 ,  6    \n7, 10 12, 13, 14 4, 5 1, 2 24, 25 \nOverflow \n16 , 20    \n11", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 658, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1df07e0a-1c43-435b-80bb-29fb84cc61d3": {"__data__": {"id_": "1df07e0a-1c43-435b-80bb-29fb84cc61d3", "embedding": null, "metadata": {"page_label": "85", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b35600a0-70a7-4785-86de-dfabc06a0320", "node_type": "4", "metadata": {"page_label": "85", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "cb743e77ae012d8db03f698ef11d8d9024c23d43a89e5e3c49fe8cc95e1a871a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 21 \n \n14. What is 2-3 tree? \nA 2-3 tree is a type of data structure with following properties. \n\uf0b7 All data appears at the leaves. \n\uf0b7 Data elements are ordered from left (minimum) to right (maximum). \n\uf0b7 Every path through the tree is the same length. \n\uf0b7 Interior nodes have 2 or 3 subtrees. \n \n15. What is graph? How it can be represented using adjacency matrix, what \nis path matrix? How path matrix can be found out using adjacency matrix . \nGraph \n\uf0b7 A graph G consist of a non empty set V called the set of nodes (points, vertices) of the graph, a set E \nwhich is the set of edges and a mapping from the set of edges E to a set of pairs of elements of V. \n\uf0b7 It is also convenient to write a graph as G=(V,E). \n\uf0b7 Notice that definition of graph implies that to every edge of a graph G, we can associate a pair of nodes \nof the graph. If an edge X \u0404 E is thus as sociated with a pair of nodes ( u,v) where u, v \u0404 V then we says \nthat edge x connect U and V. \nAdjacency matrix \nLet G = (V, E) be a simple diagraph in which V = {v 1, v2,\u2026., vn} and the nodes are assumed to be ordered from \nv1 to vn. An n x n matrix A whose elements are aij are given by \naij = {     (     )  \n                      \nis called adjacency matrix of the graph G. \n\uf0b7 Any element of the adjacency matrix is either 0 or 1. \n\uf0b7 For a given graph G =m (V, E), an adjacency matrix depends upon the ordering of the elements of V. \n\uf0b7 For different ordering of the elements of V we get different adjacency matrices.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1597, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "81f07e4f-4779-4f5f-9ee3-3f4efa30583b": {"__data__": {"id_": "81f07e4f-4779-4f5f-9ee3-3f4efa30583b", "embedding": null, "metadata": {"page_label": "86", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29332cde-0296-4f75-8025-e8accf6e30c8", "node_type": "4", "metadata": {"page_label": "86", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "44bfe79164f8a668b3679cec595224477d8d74976833e9ee7e443fabfc1b5688", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 22 \n \n \n\uf0b7 We can extend the idea of matri x representation to multigraph and weighted graphs. In the case of \nmultigraph or weighted  graph we write a ji = w, where a ij denotes either the multiplicity or the \nweight of the edge. \nPath matrix \n\uf0b7 An entry of 1 in the ith row and jth column of A shows the existence of an edge (v i, vj), that is a path \nof length 1 from vi to vj. \n\uf0b7 Let denote the elements of A2 by aij\n(2). Then    \n( ){\u2211       \n \n    \n\uf0b7 Therefore aij\n(2) is equal to the number of different paths of exactly length 2 from vi to vj. \n\uf0b7 Similarly element in ith row and jth column of A3 gives number of paths of exactly length 3 from v i to \nvj. \n \n \n16. Which are the basic traversing techniques of the Graph? Write the \nalgorithm of them. \n\uf0b7 Most graph problems involve traversal of a graph. Traversal of a grap h means visit each node exactly \nonce. \n\uf0b7 Two commonly used graphs traversal techniques are \n1. Depth First Search (DFS) \n2. Breadth First Search (BFS) \n1 1 0 0 \n0 1 0 1 \n1 2 0 1 \n1 1 0 0 \n \nDifferent path matrices \nA2 =  \n1 1 0 1 \n1 1 0 0 \n2 2 0 1 \n0 1 0 1 \n \nA3 =  \n1 2 0 1 \n1 1 0 1 \n2 3 0 2 \n1 1 0 0 \n \nA4 =  \nV1 \nV2 V3 \nV4  V1 V2 V3 V4 \nV1 0 1 0 1 \nV2 1 0 0 0 \nV3 1 1 0 1 \nV4 0 1 0 0 \n \nA digraph and its adjacency matrix", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1369, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ffd4f6c6-7803-4c7b-86b4-823ea5524d94": {"__data__": {"id_": "ffd4f6c6-7803-4c7b-86b4-823ea5524d94", "embedding": null, "metadata": {"page_label": "87", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95168cbf-9b7f-4f67-ae55-8dc338c7524d", "node_type": "4", "metadata": {"page_label": "87", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1b0d2a2c22903efbd96c022edb7b880411fa37dbc353b92f95eca31d8db04f63", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 23 \n \nDepth First Search (DFS) \n\uf0b7 It is like preorder traversal of tree. \n\uf0b7 Traversal can start from any vertex vi \n\uf0b7 Vi is visited and then all vertices adjacent to vi are traversed recursively using DFS \n \n\uf0b7 Since graph can have cycles, we must avoid re -visiting a node. To do this when we visit a vertex V, \nwe marks it visited as visited should not be selected for traversal. \n1 \n3 4 5 \n6 7 \n8 \n2 \nGraph G \nDFS (G, 1) is given by \na) Visit (1) \nb) DFS (G, 2) \nDFS (G, 3) \nDFS (G, 4) \nDFS (G, 5) \nDFS traversal of given graph is: \n1, 2, 6, 3, 8, 7, 4, 5", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 670, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31e54fcc-7fed-476c-ba89-06b572e3a5d3": {"__data__": {"id_": "31e54fcc-7fed-476c-ba89-06b572e3a5d3", "embedding": null, "metadata": {"page_label": "88", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c5a2dc22-e171-4dd3-9390-64b754e2be6a", "node_type": "4", "metadata": {"page_label": "88", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2ccd3405ee6c7f229fdf8b7da8d4d14692f906e85af8cf8cc0bcc8bf80d6781d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 24 \n \n \n  \nProcedure : DFS (vertecx V) \nThis procedure traverse the graph G in DFS manner. V is a starting vertex to be explored. S is a \nStack, visited[] is an array which tells you whether particular vertex is visited or not. W is a \nadjacent node of vertex V. PUSH and POP are functions to insert and remove from stack \nrespectively. \n 1. [Initialize TOP and Visited] \nvisited[] \uf0df 0 \nTOP \uf0df 0 \n2. [Push vertex into stack] \nPUSH (V) \n3. [Repeat  while stack is not empty] \nRepeat step 3 while stack is not empty \n  v  \uf0df POP() \n  if visited[v] is 0 \n  then  visited [v] \uf0df 1 \n   for all W adjacent to v \n    if visited [w] is 0 \n    then PUSH (W) \n   end for \n  end if", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 780, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b7d90a8e-6731-4442-a89c-637b9899c710": {"__data__": {"id_": "b7d90a8e-6731-4442-a89c-637b9899c710", "embedding": null, "metadata": {"page_label": "89", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ef5c9240-2a8c-44a5-ba88-f822935c979c", "node_type": "4", "metadata": {"page_label": "89", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "39b159d1ecf288cbd978e2c29e55fd564e262d7bc9cb9026e716e947ac34d016", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 25 \n \nBreadth First Search (BFS) \n\uf0b7 This methods starts from vertex v0  \n\uf0b7 V0 is marked as visited. All vertices adjacent to v0 are visited next \n\uf0b7 Let vertices adjacent to v0 are v1, v2, v3, v4 \n\uf0b7 v1, v2, v3 and v4 are marked visited.  \n\uf0b7 All unvisited vertices adjacent to v1, v2, v3, v4 are visited next. \n\uf0b7 The method continuous until all vertices are visited \n\uf0b7 The algorithm for BFS has to maintain a list of vertices which have been visited but not explored for \nadjacent vertices. The vertices which have been visited but not explored for adjacent vertices can be \nstored in queue. \n\uf0b7 Initially the queue contains the starting vertex. \n\uf0b7 In every iteration, a vertex is removed from the queue and its adjacent vertices which are not visited \nas yet are added to the queue. \n\uf0b7 The algorithm terminates when the queue becomes empty. \n \n1 \n3 4 5 \n6 7 \n8 \n2 \nGraph G \nBFS traversal of given graph is: \n1 | 2, 3, 4, 5 | 6, 7 | 8", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1044, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "643ab2f8-fe1a-4781-9886-25d6e423a29a": {"__data__": {"id_": "643ab2f8-fe1a-4781-9886-25d6e423a29a", "embedding": null, "metadata": {"page_label": "90", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "87573574-2b28-4323-bcb4-f31c56c10833", "node_type": "4", "metadata": {"page_label": "90", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fd298f761e5db36903f2b1c1064a68264e709849cebf370eceb037609bf58cd0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 26 \n \n \n17. What is spanning tree? \n\uf0b7 A Spanning tree of a graph is an undirected tree consisting of only those edges necessary to connect all \nthe nodes in the original graph \n\uf0b7 A spanning tree has the properties that \no For any pair of nodes there exists only one path between them \no Insertion of any edge to a spanning tree forms a unique cycle \n\uf0b7 The particular Spanning for a graph depends on the criteria used to generate it. \n\uf0b7 If DFS search is use, those edges traversed by the algorithm forms the edges of tree, referred to as \nDepth First Spanning Tree. \n\uf0b7 If BFS Search is used, the spanning tree is formed from those edges traversed during the search, \nproducing Breadth First Search Spanning tree. \nProcedure : BFS (Vertex V) \nThis procedure traverse the graph G in BFS manner. V is a starting vertex to be explored. Q is a \nqueue, visited[] is an array which tells you whether particular vertex is visited or not. W is a \nadjacent node of vertex V. \n \n1. Initialize Q \n2. [Marks visited of V as 1] \nvisited [v]\uf0df 1 \n3. [Add vertex v to Q] \nInsertQueue(V) \n4. [Repeat while Q is not empty] \nRepeat while Q is not empty \n  v \uf0df RemoveFromQueue() \n  For all vertices W adjacent to v \n    if visited[w] is 0 \n    then  visited[w] \uf0df1 \n     InsertQueue(w)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1375, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84a9412a-0a75-43f7-b05c-52580a5cacc5": {"__data__": {"id_": "84a9412a-0a75-43f7-b05c-52580a5cacc5", "embedding": null, "metadata": {"page_label": "91", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c45a1e09-0190-4dfa-8e79-0175563d5a1f", "node_type": "4", "metadata": {"page_label": "91", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b1e906647d031bd242b57936e996d7d6693f008d78b829fb182e0fe421ba77ff", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 27 \n \n \n \n18. Consider the graph shown in Fig Find depth-first and breadth first \ntraversals of this graph starting at A  \n \nA \nB C \nD F \nE \nV0 \nV1 V2 \nV3 V4 V5 V6 \nV7 \nV0 \nV1 V2 \nV3 V4 V5 V6 \nV7 \nV0 \nV1 V2 \nV3 V4 V5 V6 \nV7 \nDFS Spanning Tree BFS Spanning Tree", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7a74cd87-9767-4436-b515-228be70f816b": {"__data__": {"id_": "7a74cd87-9767-4436-b515-228be70f816b", "embedding": null, "metadata": {"page_label": "92", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f2fe297-37f4-47c8-a289-0616bace1614", "node_type": "4", "metadata": {"page_label": "92", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4ec35de1e8dd88fb0040d050a3825afff0c82c9a4f1885a11afa5e0e084c5224", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 28 \n \n \nA \nB C \nD F \nE \nDFS : A B D C F E \nA \nB C \nD F \nE \nBFS : A B C D F E", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 189, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9566454-accc-4724-bf9e-da0349b1a854": {"__data__": {"id_": "d9566454-accc-4724-bf9e-da0349b1a854", "embedding": null, "metadata": {"page_label": "93", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99b33dc8-e380-40f2-8e82-558638272fdc", "node_type": "4", "metadata": {"page_label": "93", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6a0a23342753614fdf81e924b170669f4a5218d1dacf9efb164b391efb478708", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 29 \n \n19. Define spanning tree and minimum spanning tree. Find the minimum \nspanning tree of the graph shown in Fig. \n \n \nA \nB \nC D \nE \n4 5 \n3 \n6 \n6 \n5 2 7 \n1 \nUsing Prim\u2019s Algorithm: \nLet X be the set of nodes explored, initially X = { A } \nStep 1: Taking minimum weight edge of all Adjacent \nedges of X = { A } \nA \nB \n4 \nStep 2: Taking minimum weight edge of all Adjacent \nedges of X = { A , B } \nA \nB \n4 \nX = { A , B } \nC \n2 X = { A , B , C } \nStep 3: Taking minimum weight edge of all Adjacent \nedges of X = { A , B , C } \nA \nB \n4 \nC \n2 X = { A , B , C, D } \nD \nStep 4: Taking minimum weight edge of all Adjacent \nedges of X = { A , B , C , D } \nA \nB \n4 \nC \n2 \nX = { A , B , C, D, E } \nD \nE \n1 1 \n3 \nA \u2013 B | 4 \nA \u2013 E | 5 \nA \u2013 C | 6 \nA \u2013 D | 6 \nB \u2013 E | 3 \nB \u2013 C | 2 \nC \u2013 E | 6 \nC \u2013 D | 1 \nD \u2013 E | 7 \n \nAll nodes of graph are there with set X, so we obtained minimum spanning tree of cost: 4 + 2 + 1 + 3 = 10", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1023, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e15c2109-9d40-47c1-aebf-b09bfabd4b73": {"__data__": {"id_": "e15c2109-9d40-47c1-aebf-b09bfabd4b73", "embedding": null, "metadata": {"page_label": "94", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "35dd6f66-043b-436a-92bd-f5329854c232", "node_type": "4", "metadata": {"page_label": "94", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "196561f890180285ee8e335d2abd57c921dceba1a2fe539e51df903b0f3d3697", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 30 \n \n \n \nA \nB \nC D \nE \n4 5 \n3 \n6 \n6 \n5 2 7 \n1 \nUsing Kruskal\u2019s Algorithm \nStep 1: Taking min edge (C,D) Step 2: Taking next min edge (B,C) \n B \nC \n2 \nA \nB \n4 \nC \n2 \nD \nE \n1 \n3 \nAll edges of graph has been visited,  \nso we obtained minimum spanning tree of cost: \n4 + 2 + 1 + 3 = 10 \nC D \nD 1 \n1 \nStep 3: Taking next min edge (B,E) \n B \nC \n2 \nD 1 \nE \n3 \nStep 4: Taking next min edge (A,B) \n \nStep 5: Taking next min edge (A,E) it forms cycle so do not consider \nStep 6: Taking next min edge (C,E) it forms cycle so do not consider \nStep 7: Taking next min edge (A,D) it forms cycle so do not consider \nStep 8: Taking next min edge (A,C) it forms cycle so do not consider \nStep 9: Taking next min edge (E,D) it forms cycle so do not consider", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 853, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "842c3f5d-1ffe-44bf-a129-24ea711566ca": {"__data__": {"id_": "842c3f5d-1ffe-44bf-a129-24ea711566ca", "embedding": null, "metadata": {"page_label": "95", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4d09ad6d-3316-4a67-a68d-e83197ea7ae5", "node_type": "4", "metadata": {"page_label": "95", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c2326b0f8bb548d368387df03bdcf6d9dd095484ebf794e3903e6220fc7b6073", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 31 \n \n20. Give example and applications of directed and undirected graphs. Find \nthe adjacency matrix for the graph shown in Fig. \n  \nApplications of graph:  \n\uf0b7 Electronic Circuits \no Printed Circuit Board \no Integrated Circuit \n\uf0b7 Transportation networks \no Highway networks  \nModeling a road network with vertexes as towns and edge costs as distances. \no Water Supply networks \nModeling a water supply network. A cost might relate to current or a function of capacity and \nlength. As water flows in only 1 direction, from higher to lower pressure connections or \ndownhill, such a network is inherently an acyclic directed graph. \no Flight network  \nMinimizing the cost and time taken for air travel when direct flights don't exist between starting \nand ending airports. \n\uf0b7 Computer networks \no Local Area Network \no Internet \nDynamically modeling the status of a set of routes by which traffic might be directed over the \nInternet. \no Web \nUsing a directed graph to map the links between pages within a website and to analyze ease of \nnavigation between different parts of the site. \n\uf0b7 Databases \no Entity Relationship Diagram \n \n1 \n2 \n6 \n4 5 \n3 \n 1 2 3 4 5 6 \n1 0 1 0 0 0 0 \n2 0 0 0 1 0 0 \n3 1 0 0 0 0 0 \n4 0 0 1 0 1 0 \n5 0 0 1 0 0 1 \n6 1 0 1 0 0 0 \n \nAdjacency matrix for the given graph", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1403, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da3046a4-4e7f-4e14-9de8-5ba58423846a": {"__data__": {"id_": "da3046a4-4e7f-4e14-9de8-5ba58423846a", "embedding": null, "metadata": {"page_label": "96", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c806eff-2488-4e7e-954b-1a632c9871ca", "node_type": "4", "metadata": {"page_label": "96", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "dd169cbc21a83733e1c1619df0a0adcc869f941083bfb16d964f582d8e82f9fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Nonlinear Data Structure (Graph & Tree) \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 32 \n \n21. Apply Dijkstra\u2019s algorithm to find shortest path between vertex A and \nvertex F5 for the graph shown in Fig. \n \n \nA \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nA \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nStep 1: Traverse all adjacent node of A \n0 \n \n1 \n \n3 \n \n\u221e \n\u221e \n\u221e \n\u221e \nA \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nStep 2: Traverse all adjacent node of B \n0 \n \n1 \n \n3 \n \n3 \n5 \n\u221e \nA \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nStep 3: Traverse all adjacent node of C \n0 \n \n1 \n \n3 \n \n3 \n5 \n\u221e A \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nStep 4: Traverse all adjacent node of D \n0 \n \n1 \n \n3 \n \n3 \n5 \n9 \nA \nB \nC \nD \nE \nF \n1 \n \n3 \n \n1 \n \n2 \n 4 \n \n5 \n \n7 \n \n6 \n \n2 \n \nStep 5: Traverse all adjacent node of E \n0 \n \n1 \n \n3 \n \n3 \n5 \n7 \n\uf0b7 Shortest path from node A to F is : \nA \u2013 B \u2013 E \u2013 F as shown in step 5 \n\uf0b7 Length of path is 7", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1030, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "94e88b1b-0056-4e01-bd96-6a9321d17aad": {"__data__": {"id_": "94e88b1b-0056-4e01-bd96-6a9321d17aad", "embedding": null, "metadata": {"page_label": "97", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9064fc42-fd50-4f8f-ae20-14f4c3ca5498", "node_type": "4", "metadata": {"page_label": "97", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3cdc918a7a2b61c07f4b850aae74c059708b0ae4ca8a333b9d475e9a31c7985e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \nWhat is Hashing? \n\uf0b7 Sequential search requires, on the average O(n) comparisons to locate an element. So many \ncomparisons are not desirable for a large database of elements. \n\uf0b7 Binary search requires much fewer comparisons on the average O (log n) but there is an additional \nrequirement that the data should be sorted. Even with best sorting algorithm, sorting of elements \nrequire 0(n log n) comparisons. \n\uf0b7 There is another widely used technique for  storing of data called hashing.  It does away with the \nrequirement of keeping data sorted (as in binary search) and its best case timing complexity is of \nconstant order (0(1)). In its worst case, hashing algorithm starts behaving like linear search. \n\uf0b7 Best case timing behavior of searching using hashing = O( 1) \n\uf0b7 Worst case timing Behavior of searching using hashing = O(n) \n\uf0b7 In hashing, the record for a key value \"key\", is directly referred by calculating the address from the key \nvalue. Address or location of an element or record, x, is obtained by computing some arithmetic \nfunction f. f(key) gives the address of x in the table. \n \n \nHash Table Data Structure: \nThere are two different forms of hashing. \n1. Open hashing or external hashing \nOpen or external hashing, allows records to be stored in unlimited space (could be a hard disk). It places \nno limitation on the size of the tables. \nf()\uf0e0Address \nHash Table \n   0       1         2       3       4        5        6 \nMapping of Record in hash table \nRecord", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1570, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8a05d447-9f83-43f7-84be-d0e7606a5e87": {"__data__": {"id_": "8a05d447-9f83-43f7-84be-d0e7606a5e87", "embedding": null, "metadata": {"page_label": "98", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dab284ac-d324-4a92-a9db-6483b48c1060", "node_type": "4", "metadata": {"page_label": "98", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "62e5d41c7d64b661819a2c56fbad5f9a046c1ee2d91903d0e57571aa9779d665", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n2. Close hashing or internal hashing \nClosed or internal hashing, uses a fixed space for storage and thus limits the size of hash table. \n1. Open Hashing Data Structure \n \n\uf0b7 The basic idea is that the records [elements] are partitioned into B classes, numbered 0,1,2 \u2026 B-l \n\uf0b7 A Hashing function f(x) maps a record with key n to an integer value between 0 and B-l. \n\uf0b7 Each bucket in the bucket table is the head of the linked list of records mapped to that bucket. \n2. Close Hashing Data Structure \n \nb \n \n \nc \nd \n0 \n1 \n2 \n3 \n4 \n5 \n\uf0b7 A closed hash table keeps the elements in the bucket itself.  \n\uf0b7 Only one element can be put in the bucket \n\uf0b7 If we try to place an element in the bucket  f(n) and find it already holds \nan element, then we say that a collision has occurred.  \n\uf0b7 In case of collision, the element should be rehashed to alternate empty \nlocation f1(x), f2(x), ...  within the bucket table \n\uf0b7 In closed hashing, collision handling is a very important issue. \nbucket table \nheader List of Elements \n1\ni\ns\nt \no\nf \nE\nl\ne\nm\ne\nn\nt\ns \nB-1 \nThe open hashing data organization", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50ee10c6-2613-42af-b7b9-b89595f70905": {"__data__": {"id_": "50ee10c6-2613-42af-b7b9-b89595f70905", "embedding": null, "metadata": {"page_label": "99", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f1bfd5f-1d39-40fe-aaae-f1709f2bb355", "node_type": "4", "metadata": {"page_label": "99", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fd09e5466e7b564a242c4fdec1cfac488c09379666288e59c2eef15e71f59d75", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n \nHashing Functions \nCharacteristics of a Good Hash Function  \n\uf0b7 A good hash function avoids collisions. \n\uf0b7 A good hash function tends to spread keys evenly in the array.  \n\uf0b7 A good hash function is easy to compute. \nDifferent hashing functions \n1. Division-Method \n2. Midsquare Methods  \n3. Folding Method \n4. Digit Analysis \n5. Length Dependent Method \n6. Algebraic Coding  \n7. Multiplicative Hashing \n1. Division-Method \n\uf0b7 In this method we use modular arithmetic system to divide the key value by some integer divisor m \n(may be table size). \n\uf0b7 It gives us the location value, where the element can be placed.  \n\uf0b7 We can write, \nL = (K mod m) + 1 \n  where L => location in table/file \n  K => key value \n  m => table size/number of slots in file \n\uf0b7 Suppose, k = 23, m = 10 then  \nL = (23 mod 10) + 1= 3 + 1=4, The key whose value is 23 is placed in 4th location. \n2. Midsquare Methods \n\uf0b7 In this case, we square the value of a key and take the number of digits required to form an address, \nfrom the middle position of squared value. \n\uf0b7 Suppose a key value is 16, then its square is 256. Now if we want address of two digits, then you \nselect the address as 56 (i.e. two digits starting from middle of 256). \n3. Folding Method \n\uf0b7 Most machines have a small number of primitive data types for which there are arithmetic \ninstructions.  \n\uf0b7 Frequently key to be used will not fit easily in to one of these data types \n\uf0b7 It is not possible to discard the portion of the key that does not fit into such an arithmetic data type", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1610, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b140ddde-6734-4b59-8d42-1129490956ca": {"__data__": {"id_": "b140ddde-6734-4b59-8d42-1129490956ca", "embedding": null, "metadata": {"page_label": "100", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06a52a33-36c3-441a-b9db-5a7ab76ec97e", "node_type": "4", "metadata": {"page_label": "100", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2dbde8301d093cd8b993e2bf35852cc564c68524c094d625b66ded5f5067e60a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n\uf0b7 The solution is to combine the various parts of the key in such a way that all parts of the key affect \nfor final result such an operation is termed folding of the key. \n\uf0b7 That is the key is actually partitioned into number of parts, each part having the sam e length as that \nof the required address. \n\uf0b7  Add the value of each parts, ignoring the final carry to get the required address.  \n\uf0b7 This is done in two ways : \no Fold-shifting: Here actual values of each parts of key are added. \n\uf0a7 Suppose, the key is : 12345678, and the required address is of two digits, \n\uf0a7 Then break the key into: 12, 34, 56, 78. \n\uf0a7 Add these, we get 12 + 34 + 56 + 78 : 180, ignore first 1 we get 80 as location \no Fold-boundary: Here the reversed values of outer parts of key are added. \n\uf0a7 Suppose, the key is : 12345678, and the required address is of two digits, \n\uf0a7 Then break the key into: 21, 34, 56, 87. \n\uf0a7 Add these, we get 21 + 34 + 56 + 87 : 198, ignore first 1 we get 98 as location \n4. Digit Analysis \n\uf0b7 This hashing function is a distribution-dependent. \n\uf0b7 Here we make a statistical analysis of digits of the key, and select those digits (of fixed position) \nwhich occur quite frequently. \n\uf0b7 Then reverse or shifts the digits to get the address. \n\uf0b7 For example, if the key is : 9861234. If the statistical analysis has revealed the fa ct that the third and \nfifth position digits occur quite frequently, then we choose the digits in these positions from the key. \nSo we get, 62. Reversing it we get 26 as the address. \n5. Length Dependent Method \n\uf0b7 In this type of hashing function we use the length of the key along with some portion of the key j to \nproduce the address, directly. \n\uf0b7 In the indirect method, the length of the key along with some portion of the key is used to obtain \nintermediate value. \n6. Algebraic Coding  \n\uf0b7 Here a n bit key value is represented as a polynomial. \n\uf0b7 The divisor polynomial is then constructed based on the address range required. \n\uf0b7 The modular division of key-polynomial by divisor polynomial, to get the address-polynomial. \n\uf0b7 Let f(x) = polynomial of n bit key = a1 + a2x + \u2026\u2026. + anxn-1 \n\uf0b7 d(x) = divisor polynomial = x1 + d1 + d2x + \u2026. + d1x1-1 \n\uf0b7 then the required address polynomial will be f(x) mod d(x) \n7. Multiplicative Hashing \n\uf0b7 This method is based on obtaining an address of a key, based on the multiplication value.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2452, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1525135f-84b3-47d5-bfd3-fe7d6750bc02": {"__data__": {"id_": "1525135f-84b3-47d5-bfd3-fe7d6750bc02", "embedding": null, "metadata": {"page_label": "101", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5cda8219-3b8e-44a2-a15c-9455b5ecac31", "node_type": "4", "metadata": {"page_label": "101", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1e28fc99420b7eb7300702670f11397b3acc16ac64b6b572219f8592ae3843f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \n\uf0b7 If k is the non-negative key, and a constant c, (0 < c < 1), compute kc mod 1, which is a fractional part of \nkc. \n\uf0b7 Multiply this fractional part by m and take a floor value to get the address \n\uf0b7    (        )   \n\uf0b7 0 < h (k) < m \n \nCollision Resolution Strategies (Synonym Resolution) \n\uf0b7 Collision resolution is the main problem in hashing. \n\uf0b7 If the element to be inserted is mapped to the same location, where an element is already inserted then \nwe have a collision and it must be resolved. \n\uf0b7 There are several strategies for collision resolution. The most commonly used are : \n1. Separate chaining - used with open hashing \n2. Open addressing - used with closed hashing \n1. Separate chaining \n\uf0b7 In this strategy, a separate list of all elements mapped to the same value is maintained. \n\uf0b7 Separate chaining is based on collision avoidance. \n\uf0b7 If memory space is tight, separate chaining should be avoided. \n\uf0b7 Additional memory space for links is wasted in storing address of linked elements. \n\uf0b7 Hashing function should ensure even distribution of elements among buckets; otherwise the timing \nbehavior of most operations on hash table will deteriorate.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1245, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "16bc54ff-113a-4ad0-8f67-b8e16eaaeca8": {"__data__": {"id_": "16bc54ff-113a-4ad0-8f67-b8e16eaaeca8", "embedding": null, "metadata": {"page_label": "102", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0cd3c0f-10a7-4db8-9add-00d932ee09c1", "node_type": "4", "metadata": {"page_label": "102", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "eacc43277706bcfcd9ab6f9ab6fb0c4aece49df463c4897f98c120b118425302", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n \nExample : The integers given below are to be inserted in a hash table with 5 locations using \nchaining to resolve collisions. Construct hash table and use simplest hash function. 1, 2, 3, 4, 5, \n10, 21, 22, 33, 34, 15, 32, 31, 48, 49, 50 \nAn element can be mapped to a location in the hash table using the mapping function key % 10. \nHash Table Location Mapped element \n0 5, 10, 15, 50 \n1 1, 21, 31 \n2 2, 22, 32 \n3 3, 33, 48 \n4 4, 34, 49 \n10 \nList of Elements \nA Separate Chaining Hash Table \n50 \n12 62 32 \n4 24 \n9 69 \n7 \n0 \n1 \n2 \n3 \n4 \n5 \n6 \n7 \n8 \n9", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 638, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a6545d6-b0b1-45f9-ab5f-181ee4167e7a": {"__data__": {"id_": "1a6545d6-b0b1-45f9-ab5f-181ee4167e7a", "embedding": null, "metadata": {"page_label": "103", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "272a27d7-5136-446b-be48-d91825820c1c", "node_type": "4", "metadata": {"page_label": "103", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "937c8e4270308bf26f0b049bf8b4c95ed771429a2dd55a530faba08ef1acf101", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \n \n \n2. Open Addressing \n\uf0b7 Separate chaining requires additional memory space for pointers. Open addressing hashing is an \nalternate method of handling collision. \n\uf0b7 In open addressing, if a collision occurs, alternate cells are tried until an empty cell is found. \na. Linear probing \nb. Quadratic probing \nc. Double hashing. \na) Linear Probing  \n\uf0b7 In linear probing, whenever there is a collision, cells are searched sequentially (with \nwraparound) for an empty cell.  \n\uf0b7 Fig. shows the result of inserting keys {5,18,55,78,35,15} using the hash function (f(key)= \nkey%10) and linear probing strategy. \n Empty \nTable \nAfter  \n5 \nAfter \n18 \nAfter \n55 \nAfter \n78 \nAfter \n35 \nAfter \n15 \n0       15 \n1        \n2        \n3        \n4        \n5  5 5 5 5 5 5 \n6    55 55 55 55 \n7      35 35 \n8   18 18 18 18 18 \n9     78 78 78 \n \n\uf0b7 Linear probing is easy to implement but it suffers from \"primary clustering\" \nHash Table \n0 \n1 \n2 \n3 \n4 \n5 50 10 15 \n31 1 21 \n32 2 22 \n48 3 33 \n49 4 34", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1061, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4327605e-1a35-403c-9ab4-895483afe13b": {"__data__": {"id_": "4327605e-1a35-403c-9ab4-895483afe13b", "embedding": null, "metadata": {"page_label": "104", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "89d98756-092f-4f3b-8061-9719a85a345c", "node_type": "4", "metadata": {"page_label": "104", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "48d5d1e003d698dbfe4175a67cc93e97fa997d119c44b7f4b14948eeab0af9f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Hashing \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \n\uf0b7 When many keys are mapped to the same location (clustering), linear probing will not \ndistribute these keys evenly in the hash  table. These keys will be stored in neighborhood of \nthe location where they are mapped. This will lead to clustering of keys around the point of \ncollision \nb) Quadratic probing \n\uf0b7 One way of reducing \"primary clustering\" is to use quadratic probing to resolve collision. \n\uf0b7 Suppose the \"key\" is mapped to the location j and the cell j is already occupied. In quadratic \nprobing, the location j, (j+1), (j+4 ), (j+9), ...  are examined to find the first empty cell where the \nkey is to be inserted. \n\uf0b7 This table reduces primary clustering. \n\uf0b7 It does not ensure that all cells in the table will be examined to find an empty cell. Thus, it may \nbe possible that key will not be inserted even if there is an empty cell in the table. \n \nc) Double Hashing  \n\uf0b7 This method requires two hashing functions f1 (key) and f2 (key). \n\uf0b7 Problem of clustering can easily be handled through double hashing. \n\uf0b7 Function f1 (key) is known as primary hash function. \n\uf0b7 In case the address obtained by f 1 (key) is already occupied by a key,  the function f2  (key) is \nevaluated. \n\uf0b7 The second function f2  (key) is used to compute the increment to be added to the address \nobtained by the first hash function f1 (key) in case of collision. \n\uf0b7 The search for an empty location is made successively at the addresses  f1 (key) + f2(key),           \nf1 (key) + 2f2 (key), f1 (key) + 3f2(key),...", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1593, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d40f77fe-1663-41c4-b63d-e4f0c7977f9f": {"__data__": {"id_": "d40f77fe-1663-41c4-b63d-e4f0c7977f9f", "embedding": null, "metadata": {"page_label": "105", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f064e59e-8ffc-4464-8fee-b7544b4167d7", "node_type": "4", "metadata": {"page_label": "105", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c56349d6f444156f1e5b5624162e4c82bfb07264c2430eaf3295697965a766bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \nWhat is File? \n\uf0b7 A file is a collection of records where a record consists of one or more fields.  Each contains the same \nsequence of fields. \n\uf0b7 Each field is normally of fixed length. \n\uf0b7 A sample file with four records is shown below: \n \nName Roll No. Year Marks \nAMIT 1000 1 82 \nKALPESH 1005 2 54 \nJITENDRA 1009 1 75 \nRAVI 1010 1 79 \n \n\uf0b7 There are four records \n\uf0b7 There are four fields (Name, Roll No., Year, Marks) \n\uf0b7 Records can be uniquely identified on the field 'Roll No.' Therefore, Roll No. is the key field. \n\uf0b7 A database is a collection of files. \n\uf0b7 Commonly, used file organizations are : \n1. Sequential files \n2. Relative files \n3. Direct files \n4. Indexed Sequential files \n5. Index files \n\uf0b7 Primitive Operations on a File : \n1. Creation \n2. Reading \n3. Insertion \n4. Deletion \n5. Updation \n6. Searching \n \nSequential Files  \nIt is the most common type of file.  In this type of file: \n\uf0b7 A fixed format is used for record. \n\uf0b7 All records are of the same length. \n\uf0b7 Position of each field in record and length of field is fixed. \n\uf0b7 Records are physically ordered on the value of one of the fields - called the ordering field.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1222, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c29c7a8b-09aa-46f9-934e-1fcc54bf1b6b": {"__data__": {"id_": "c29c7a8b-09aa-46f9-934e-1fcc54bf1b6b", "embedding": null, "metadata": {"page_label": "106", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f6eb0495-05b0-4dee-8ad7-0cfffe291b93", "node_type": "4", "metadata": {"page_label": "106", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "29847f8fc973f7b7eea2ff5f7805acfc606c5cb4060e0a452c313162c4409a53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n \nBlock 1 \nName Roll No. Year Marks \nAMIT 1000 1 82 \nKALPESH 1005 2 54 \nJITENDRA 1009 1 75 \nRAVI 1010 1 79 \nBlock 2 \nNILESH 1011 2 89 \n    \n \nSome blocks of an ordered (sequential) file of students records with Roll no. as the ordering field \nAdvantages of sequential file over unordered files : \n\uf0b7 Reading of records in order of the ordering key is extremely efficient.  \n\uf0b7 Finding the next record in order of the ordering key usually, does not require additional block \naccess. Next record may be found in the same block. \n\uf0b7 Searching operation on ordering key is must faster. Binary search can be utilized. A binary search will \nrequire log2b block accesses where b is the total number of blocks in the file. \nDisadvantages of sequential file : \n\uf0b7 Sequential file does not give any advantage when the search operation is  to be carried out on non - \nordering field. \n\uf0b7 Inserting a record is an expensive operation. Insertion of a new record requires finding of place of \ninsertion and then all records ahead of it must be moved to create space for the record to be \ninserted. This could be very expensive for large files. \n\uf0b7 Deleting a record is an expensive operation. Deletion too requires movement of records. \n\uf0b7 Modification of field value of ordering key could be time consuming. Modifying the ordering field \nmeans the record can change its position. This requires deletion of the old record followed by \ninsertion of the modified record. \n \nHashing (Direct file organization): \n\uf0b7 It is a common technique used for fast accessing of records on secondary storage. \n\uf0b7 Records of a file are divided among buckets. \n\uf0b7 A bucket is either one disk block or cluster of contiguous blocks. \n\uf0b7 A hashing function maps a key into a bucket number. The buckets are numbered 0, 1,2...b-1. \n\uf0b7 A hash function f maps each key value into one of the integers 0 through b - 1. \n\uf0b7 If x is a key, f(x) is the number of bucket that contains the record with key x.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2033, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f2073696-243f-49e9-a67a-dd17cbfc60a0": {"__data__": {"id_": "f2073696-243f-49e9-a67a-dd17cbfc60a0", "embedding": null, "metadata": {"page_label": "107", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "387d8d3d-f766-45d4-b962-0ab54bbb16aa", "node_type": "4", "metadata": {"page_label": "107", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "e689ad11f30b3fcef8d3772f3510f87975366ccaf3629cf8b2c20fa98baee88e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n\uf0b7 The blocks making up each bucket could either be contiguous blocks or they can be chained together in \na linked list. \n\uf0b7 Translation of bucket number to disk block address is done with the help of bucket directory. It gives the \naddress of the first block of the chained blocks in a linked list. \n\uf0b7 Hashing is quite efficient in retrieving a record on hashed key. The average number of block accesses for \nretrieving a record. \n                                      \n                                        \n\uf0b7 Thus the operation is b times faster (b = number of buckets) than unordered file. \n\uf0b7 To insert a record with key value x, the new record can added to the last block in the chain for bucket \nf(x). If the record does not fit into the existing block, record is stored in a new block and this new block is \nadded at the end of the chain for bucket f(x). \n\uf0b7 A well designed hashed structure requires two block accesses for most operations \n \n \nIndexing \n\uf0b7 Indexing is used to speed up retrieval of records. \n0 \n1 \n2 \n \nb-1 \n230  \n460  \n580  \n  \n480  \n790  \n850  \n  \n321  \n531  \n651  \n  \n232  \n242  \n262  \n  \n270  \n470  \n582  \n  \n930  \n420  \n510  \n  \nBucket 0 \nBucket 1 \nBucket 2 \nBucket \nDirectory \nHashing with buckets of chained blocks", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1327, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5a599e4c-473d-446e-9cd7-5216c49dd792": {"__data__": {"id_": "5a599e4c-473d-446e-9cd7-5216c49dd792", "embedding": null, "metadata": {"page_label": "108", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbc4a50b-73af-455d-93a7-d5b349afe919", "node_type": "4", "metadata": {"page_label": "108", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "c2c73ce972b619dca66420a9a883fe85c66dc45789586e104015bbe1c14c84de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \n\uf0b7 It is done with the help of a separate sequential file. Each record of in the index file consi sts of two \nfields, a key field and a pointer into the main file. \n\uf0b7 To find a specific record for the given key value, index is searched for the given key value. \n\uf0b7 Binary search can used to search in index file. After getting the address of record from index fi le, the \nrecord in main file can easily be retrieved. \n \n\uf0b7 Index file is ordered on the ordering key Roll No. each record of index file points to the corresponding \nrecord. Main file is not sorted. \nAdvantages of indexing over sequential file: \n\uf0b7 Sequential file can be searched effec tively on ordering key. When it is necessary to search for a record \non the basis of some other attribute than the ordering key field, sequential file representation is \ninadequate. \n\uf0b7 Multiple indexes can be maintained for each type of field  used for searchin g. Thus, indexing provides \nmuch better flexibility. \n\uf0b7 An index file usually requires less storage space than the main file. A binary search on sequential file will \nrequire accessing of more blocks. This can be explained with the help of the following example. Consider \nthe example of a sequential file with r = 1024 records of fixed length with record size R = 128 bytes \nstored on disk with block size B = 2048 bytes. \n\uf0b7 Number of blocks required to store the file = \n          \n        \n\uf0b7 Number of block accesses for searching a record = log264= 6 \n\uf0b7 Suppose, we want to construct an index on a key field that is V = 4 bytes long and the block pointer is P = \n4 bytes long. \n\uf0b7 A record of an index file is of the form <V;, Pj> and it will need 8 bytes per entry. \n\uf0b7 Total Number of index entries = 1024 \n\uf0b7 Number of blocks b' required to store the file = \n        \n       \n\uf0b7 Number of block accesses for searching a record = log24= 2 \n1000 \n1010 \n1012 \n1015 \n1016 \n \n \n \n \n \n \n \nAMIT \nKALPESH \nJITENDRA \nRAVI \nNILESH \nName \n1010 \n1016 \n1000 \n1012 \n1015 \nRoll No \n1 \n1 \n3 \n2 \n1 \nYear \n70 \n80 \n65 \n78 \n95 \nMarks \nMain File Search \nKey Pointer \nIndex \nFile", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2151, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce4639f5-ac76-42b7-8594-f5803977c812": {"__data__": {"id_": "ce4639f5-ac76-42b7-8594-f5803977c812", "embedding": null, "metadata": {"page_label": "109", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "361d9bea-66c6-42e9-82ec-bb3b6ccd16dd", "node_type": "4", "metadata": {"page_label": "109", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0d9973161af7da3086da8aade5347b3e9d5c45387471b2226bcce52acb83d839", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \n\uf0b7 With indexing, new records can be added at the end of the main file. It will not require movement of \nrecords as in the case of sequential file. Updation of index file requires fewer block accesses compare to \nsequential file \nTypes of Indexes: \n1. Primary indexes \n2. Clustering indexes \n3. Secondary indexes \n \nPrimary Indexes (Indexed Sequential File): \n\uf0b7 An indexed sequential file is characterized by \no Sequential organization (ordered on primary key) \no Indexed on primary key \n\uf0b7 An indexed sequential file is both ordered and indexed. \n\uf0b7 Records are organized in sequence based on a key field, known as primary key. \n\uf0b7 An index to the file is added to support random access. Each record in the index file consists of two \nfields: a key field, which is the same as the key field in the main file. \n\uf0b7 Number of records in the index file is equal to the number of blocks in the main file (data file) and not \nequal to the number of records in the main file (data file). \n\uf0b7 To create a prima ry index on the ordered file shown in the Fig. we use the rollno field as primary key. \nEach entry in the index file has rollno value and a block pointer. The first three index entries are as \nfollows. \no <101, address of block 1> \no <201, address of block 2> \no <351, address of block 3> \n\uf0b7 Total number of entries in index is same as the number of disk blocks in the ordered data file. \n\uf0b7 A binary search on the index file requires very few block accesses", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1538, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ff3ab2bc-e78b-4db0-8198-cbcc8eb142b8": {"__data__": {"id_": "ff3ab2bc-e78b-4db0-8198-cbcc8eb142b8", "embedding": null, "metadata": {"page_label": "110", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3975ea40-3c45-42b7-b85a-497ca1880410", "node_type": "4", "metadata": {"page_label": "110", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "148711f96bb033cb29753854c11863bd80c0f3791fbbd948b42156ce2c5f1d49", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n \n \n \nClustering Indexes \n\uf0b7 If records of a file are ordered on a non -key field, we can create a different type of index known as \nclustering index. \n\uf0b7 A non-key field does not have distinct value for each record. \n\uf0b7 A Clustering index is also an ordered file with two fields. \n101 \n201 \n351 \n \n805 \n905 \n \n \n \n \n \n \n \n 101  \n \n 200  \n 201  \n \n 350  \n 351  \n \n 400  \n 805  \n \n 904  \nBlock Pointer Roll No \nIndex File \nData File \nPrimary Index on ordering key field roll number", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 560, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c57ab38e-0b1a-46fd-802b-de65f4f8aa1e": {"__data__": {"id_": "c57ab38e-0b1a-46fd-802b-de65f4f8aa1e", "embedding": null, "metadata": {"page_label": "111", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "68ab3efe-b49e-46e2-afc1-7ed5a93cfad0", "node_type": "4", "metadata": {"page_label": "111", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "806f943ac08793cf51b6cf36e66331e032be5d7289fe9c5545eee95d3b2ee686", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \n \n \nSecondary indexes (Simple Index File) \n\uf0b7 While the hashed, sequential and indexed sequential files are suitable for operations based on ordering \nkey or the hashed key. Above file organizations are not suitable for operation s involving a search on a \nfield other than ordering or hashed key. \n\uf0b7 If searching is required on various keys, secondary indexes on these fields must be maintained. A \nsecondary index is an ordered file with two fields. \no Some non-ordering field of the data file. \no A block pointer \n\uf0b7 There could be several secondary indexes for the same file. \n\uf0b7 One could use binary search on index file as entries of the index file are ordered on secondary key field. \nRecords of the data files are not ordered on secondary key field. \n\uf0b7 A secondary index requires more storage space and longer search time than does a primary index. \n\uf0b7 A secondary index file has an entry for every record whereas primary index file has an entry for every \nblock in data file. \n\uf0b7 There is a single primary index file but the number of secondary indexes could be quite a few. \n100 \n105 \n106 \n108 \n109 \n \n \n \n \n \n100 Math \n100 Science \nBlock Pointer \nField \nValue \nIndex File \nField Clustering Data File \nExample of clustering index on roll no \n \n \n105 Physics  \n105  \n105  \n \n \n106   \n106   \n108  \n108  \n \n \n109   \n109", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1404, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b45e66e-84c0-4963-8bd1-ba2612135cc2": {"__data__": {"id_": "7b45e66e-84c0-4963-8bd1-ba2612135cc2", "embedding": null, "metadata": {"page_label": "112", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea9e7466-18c6-4ec4-8916-e97a04d0ec28", "node_type": "4", "metadata": {"page_label": "112", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fb168ab59a6d001e6f57ca76bec5737237ec8edaa03bda2e3bd1e454db56db0b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "File \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \n \n \n1 \n2 \n3 \n4 \n5 \n \n \n \n \n \n6 \n7 \n8 \n9 \n10 \n \n \n \n \n \n11 \n12 \n13 \n14 \n15 \n \n \n \n \n \n16 \n17 \n18 \n19 \n20 \n \n \n \n \n \n2  \n5  \n \n \n3   \n17   \nIndex \nField \n6  \n10  \n \n \n14   \n7   \n13  \n4  \n \n \n15   \n18   \n12  \n1  \n \n \n19   \n8   \n9  \n11  \n \n \n16   \n20   Index File \nData File \nBlock \nPointer \nIndexing Field Roll No \nA secondary index on a non-ordering key field", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 440, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d10b53c1-6e0a-4c7d-bdd2-1deae9e1c1fc": {"__data__": {"id_": "d10b53c1-6e0a-4c7d-bdd2-1deae9e1c1fc", "embedding": null, "metadata": {"page_label": "113", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ce17e4b-b923-4d7b-b864-65b8e26ead2f", "node_type": "4", "metadata": {"page_label": "113", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b39138f17fcc87f570405354f4af70148e43b270ae6c2818084fa9030990a544", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 1 \n \nBubble sort \n\uf0b7 Bubble sort, sometimes referred as sinking sort. \n\uf0b7 It is a simple  sorting algorithm  that works by repeatedly stepping through the list to be sorted, \ncomparing each pair of adjacent items and swapping them if they are in the wrong order. \n\uf0b7 The pass through the list is repeated until no swaps are needed, which ind icates that the list is \nsorted. \n\uf0b7 The algorithm gets its name from the way smaller elements \"bubble\" to the top of the list. \n\uf0b7 As it only uses comparisons to operate on elements, it is a comparison sort. \n\uf0b7 Although the algorithm is simple, it is too slow for practical use, even compared to insertion sort. \nAlgorithm \n \nProgram \n#include <stdio.h> \nvoid main() \n{ \n int array[100], n, i, j, temp; \n  printf(\"Enter number of elements\\n\"); \n scanf(\"%d\", &n); \n  printf(\"Enter %d integers\\n\", n); \nfor (i = 0; I < n; i++) \n{ \n  scanf(\"%d\", &array[i]); \n } \n  for (i = 0 ;i< ( n - 1 );i++) \n { \n  for (j = 0 ; j< n - c - 1; j++) \n  { \n   if (array[j] > array[j+1])  /* For decreasing order use < */ \n   { \nfor i \u2190 1 to n do \n for j \u2190 1 to n-i do \n  If Array[j] > Array[j+1] then  /* For decreasing order use < */ \n temp \u2190 Array[j] \n   Array[j] \u2190 A [j+1] \n      Array[j+1] \u2190 temp", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1313, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "60986e95-24b7-48a6-9824-239f4303b9a6": {"__data__": {"id_": "60986e95-24b7-48a6-9824-239f4303b9a6", "embedding": null, "metadata": {"page_label": "114", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8d101230-b818-4c70-9098-bd65cf03a7d6", "node_type": "4", "metadata": {"page_label": "114", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "135b1231628a6671c7a3ec5dfdf59d42eec1d83698e3e41f5771eac78c8a8560", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 2 \n \n    temp       = array[j]; \n    array[j]   = array[j+1]; \n    array[j+1] = temp; \n   } \n  } \n } \n  printf(\"Sorted list in ascending order:\\n\"); \n  for (i = 0 ;i< n ;i++ ) \n { \n  printf(\"%d\\n\", array[i]); \n } \n getch(); \n} \nExample \nConsider an array A of 5 element \n \nPass-1: The comparisons for pass-1 are as follows. \nCompare A[0] and A[1]. Since 45>34, interchange them. \nCompare A[1] and A[2]. Since 45<56, no interchange. \nCompare A[2] and A[3]. Since 56>23, interchange them. \nCompare A[3] and A[4]. Since 56>12 interchange them. \nAt the end of first pass the largest element of the array, 56, is bubbled up to the last position in the \narray as shown. \n45 \n34 \n56 \n23 \n12 \nA[0] \nA[1] \n A[2] \n A[3] \n A[4]", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f5ec3f61-f1c2-422e-b449-8b2de31e5e30": {"__data__": {"id_": "f5ec3f61-f1c2-422e-b449-8b2de31e5e30", "embedding": null, "metadata": {"page_label": "115", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "622640e1-9a40-4d7c-b502-c5a3624a089c", "node_type": "4", "metadata": {"page_label": "115", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d33156a8a4f6fc5daa2176108b5d5279964bfdd30cc495ed69f5b6de697012c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 3 \n \n \nPass-2: The comparisons for pass-2 are as follows. \nCompare A[0] and A[1]. Since 34<45, no interchange. \nCompare A[1] and A[2]. Since 45>23, interchange them. \nCompare A[2] and A[3]. Since 45>12, interchange them. \n \nPass-3: The comparisons for pass-3 are as follows. \nCompare A[0] and A[1]. Since 34>23, interchange them. \nCompare A[1] and A[2]. Since 34>12, interchange them. \n \n34 \n23 \n12 \n45 \n56 \n23 \n34 \n12 \n45 \n56 \n23 \n12 \n34 \n45 \n56 \nThird Largest element \n34 \n45 \n23 \n12 \n55 \n34 \n45 \n23 \n12 \n56 \n34 \n23 \n45 \n12 \n56 \n34 \n23 \n12 \n45 \n56 \nSecond Largest element \n45 \n34 \n56 \n23 \n12 \n34 \n45 \n56 \n23 \n12 \n34 \n45 \n56 \n23 \n12 \n34 \n45 \n23 \n56 \n12 \n34 \n45 \n23 \n12 \n56 Largest element", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 784, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "170009c3-b70e-441b-a7db-fa3838c315cf": {"__data__": {"id_": "170009c3-b70e-441b-a7db-fa3838c315cf", "embedding": null, "metadata": {"page_label": "116", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f7db7cb-027e-4cf3-86b5-a5521b134561", "node_type": "4", "metadata": {"page_label": "116", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fee411732585c6980a2b3a6b9a54d2218829281f9f27e2e1eeb3cffc87403f6a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 4 \n \nPass-4: The comparisons for pass-4 are as follows. \nCompare A[0] and A[1]. Since 23>12, interchange them. \n \n \n  \n23 \n12 \n34 \n45 \n56 \n12 \n23 \n34 \n45 \n56 \nSorted Array", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 266, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "14a3de3e-550c-4b44-9c6a-d40a900ecf25": {"__data__": {"id_": "14a3de3e-550c-4b44-9c6a-d40a900ecf25", "embedding": null, "metadata": {"page_label": "117", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "040820e5-4f9b-41e7-afdb-9fc9d9760eb9", "node_type": "4", "metadata": {"page_label": "117", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "55199e2005d411bfa3fa5713efc1dde6eb6abcd7080b585ae41cf7a0b9ba1ae2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 5 \n \nSelection Sort \n\uf0b7 The idea of algorithm is quite simple. \n\uf0b7 Array is imaginary divided into two parts - sorted one and unsorted one. \n\uf0b7 At the beginning, sorted part is empty, while unsorted one contains whole array. \n\uf0b7 At every step, algorithm finds minimal element in the unsorted part and adds it to the end of the sorted one. \n\uf0b7 When unsorted part becomes empty, algorithm stops. \nAlgorithm \n \nProgram \n#include <stdio.h> \nvoid main() \n{ \n    int array[100], n, i, j, min, temp; \n     printf(\"Enter number of elements\\n\"); \n    scanf(\"%d\", &n); \nprintf(\"Enter %d integers\\n\", n); \nfor ( i = 0 ; i < n ; i++ ) \n{ \n        scanf(\"%d\", &array[i]); \n } \n  for ( i = 0 ; i < ( n - 1 ) ; i++ ) \n   { \n        min = i; \n        for ( j = i + 1 ; j < n ; j++ ) \n        { \n            if ( array[min] > array[j] ) \n               min = j; \n        } \nSELECTION_SORT (A) \nfor i \u2190 1 to n-1 do \n     min \u2190 i; \n     for j \u2190 i + 1 to n do \n          If A[j] < A[i] then \n               min \u2190 j \n     If min!=i then \ntemp \u2190 A[i] \n  A[i] \u2190 A [min] \n      A[min] \u2190 temp", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1157, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c9a9215-f79b-469f-83bf-12a60ef5b5db": {"__data__": {"id_": "3c9a9215-f79b-469f-83bf-12a60ef5b5db", "embedding": null, "metadata": {"page_label": "118", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f050d70-c5f5-4633-9909-c2583ab0d73a", "node_type": "4", "metadata": {"page_label": "118", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a6207c125ed617439145bb9ce52a36edf9bf2171f65d06ab2db27a953e437e3c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 6 \n \n        if ( min != i ) \n        { \n            temp = array[i]; \n            array[i] = array[min]; \n            array[min] = temp; \n        } \n    } \n     printf(\"Sorted list in ascending order:\\n\"); \n     for ( i = 0 ; i < n ; i++ ) \n { \n        printf(\"%d\\n\", array[i]); \n } \n  getch(); \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 393, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "23fc28da-0dca-440b-8eb2-b833e99c8ddd": {"__data__": {"id_": "23fc28da-0dca-440b-8eb2-b833e99c8ddd", "embedding": null, "metadata": {"page_label": "119", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d05f5b6e-0669-4aba-8401-871f0e6e3ebb", "node_type": "4", "metadata": {"page_label": "119", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "ff901aa2754bcf64bcf45abaf1a2fbe4bacb800aec6c6cc0566b3c5bb5ef6a11", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 7 \n \nExample \n \n \n5 1 12 -5 16 2 12 14 \nUnsorted Array \n5 1 12 -5 16 2 12 14 \n-5 1 12 5 16 2 12 14 \n-5 1 12 5 16 2 12 14 \nUnsorted Sub Array Sorted Sub Array \nExchange 5 and -5 \nNo Exchange \nUnsorted Sub Array Sorted Sub Array \nExchange 12 and 2 \n \n-5 1 2 5 16 12 12 14 \nUnsorted Sub Array Sorted Sub Array \nNo Exchange \n \n \n-5 1 2 5 16 12 12 14 \nUnsorted Sub Array Sorted Sub Array \nExchange 16 and 12 \n \n-5 1 2 5 12 16 12 14 \nUnsorted Sub Array Sorted Sub Array \nExchange 16 and 12 \n \n-5 1 2 5 12 12 16 14 \nUnsorted Sub Array Sorted Sub Array \nExchange 16 and 14 \n \n-5 1 2 5 12 12 14 16 \nSorted Sub Array \nEnd of the Array \n \nStep \u2013 1: \nStep \u2013 2: \nStep \u2013 3: \nStep \u2013 4: \nStep \u2013 5: \nStep \u2013 6: \nStep \u2013 7: \nStep \u2013 8: \nStep \u2013 9:", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 820, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f51513b-c02e-4d99-8d7d-15e8363ca37b": {"__data__": {"id_": "8f51513b-c02e-4d99-8d7d-15e8363ca37b", "embedding": null, "metadata": {"page_label": "120", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e4bf0a7-0de2-4435-97e1-b85caf8b3ce5", "node_type": "4", "metadata": {"page_label": "120", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "d9001d6e08dfbd5893d1595cf2fcfd8a66960b0abc1f5870a75e69457dcd7c08", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 8 \n \nQuick Sort \n\uf0b7 Quicksort is the currently fastest known sorting algorithm and is often the best practical choice for sorting, \nas its average expected running time is O(n log(n)). \n\uf0b7 Pick an element, called a pivot, from the array. \n\uf0b7 Reorder the array so that all elements with values less than the pivot come before the pivot, while all \nelements with values greater than the pivot come after it (equal values can go either way). After this \npartitioning, the pivot is in its final position. This is called the partition operation. \n\uf0b7 Recursively apply the above steps to the sub-array of elements with smaller values and separately to the \nsub-array of elements with greater values. \n\uf0b7 Quicksort, like merge sort, is a divide-and-conquer recursive algorithm. \n\uf0b7 The basic divide-and-conquer process for sorting a sub array A[i..j] is summarized in the following three easy \nsteps: \no Divide: Partition T[i..j] Into two sub arrays T[i..l-1] and T[l+1\u2026 j] such that each element of T[i..l-1] is \nless than or equal to T[l], which is, in turn, less th an or equal to each element of T[l+1\u2026 j]. Compute the \nindex l as part of this partitioning procedure \no Conquer: Sort the two sub arrays T[i..l-1] and T[l+1\u2026 j] by recursive calls to quicksort. \no Combine: Since the sub arrays are sorted in place, no work is needed to combing them: the entire array \nT[i..j] is now sorted. \nAlgorithm \nProcedure pivot (T [i\u2026 j]; var l) \n{Permutes the elements in array T [i\u2026 j] and returns a value l such that, at the end, i<=l<=j, \nT[k] <=P for all i \u2264 k < l, T[l] =P, and T[k] > P for all l < k \u2264 j, where P is the initial value T[i]} \nP \u2190 T[i] \nK \u2190 i; l \u2190 j+1 \nRepeat k \u2190 k+1 until T[k] > P  \nRepeat l \u2190 l-1 until T[l] \u2264 P \nWhile k < l do \n      Swap T[k] and T[l] \n      Repeat k \u2190 k+1 until T[k] > P \n      Repeat l \u2190 l-1 until T[l] \u2264 P \nSwap T[i] and T[l] \nProcedure quicksort (T [i\u2026 j]) \n{Sorts sub array T [i\u2026 j] into non decreasing order} \nif j \u2013 i is sufficiently small then insert (T[i,\u2026,j]) \nelse \n pivot (T[i,\u2026,j],l) \n quicksort (T[i,\u2026, l - 1]) \n quicksort (T[l+1,\u2026,j]", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2167, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8fe4afb-0120-469e-b3d9-8acd70435704": {"__data__": {"id_": "c8fe4afb-0120-469e-b3d9-8acd70435704", "embedding": null, "metadata": {"page_label": "121", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00601f86-0ddc-41eb-aea3-be7b32cb73c4", "node_type": "4", "metadata": {"page_label": "121", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "10fa907c6dbfc14e6cb694093c769820ebb6b2e35f4492e77b6e8b98f8695564", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 9 \n \nProgram \n#include<stdio.h> \nvoid quicksort(int [10],int,int); \nint partition(int [10],int, int); \nvoid main() \n{ \n   int x[20],size,i; \n \n   printf(\"Enter size of the array: \"); \n   scanf(\"%d\",&size); \n \n   printf(\"Enter %d elements: \",size); \n   for(i=0;i<size;i++) \n { \n      scanf(\"%d\",&x[i]); \n } \n \n   quicksort(x,0,size-1); \n \n   printf(\"Sorted elements: \"); \n   for(i=0;i<size;i++) \n { \n      printf(\" %d\",x[i]); \n } \n getch(); \n} \n \nvoid quicksort(int x[10],int first,int last) \n{ \n Int mid; \n if(first<last) \n { \n  mid= partition(int x,int first,int last) \n          quicksort(x,first,mid-1); \n           quicksort(x,mid+1,last); \n } \n} \nint partition(int x[10],int p,int r)  \n{ \n int value, i, j, temp;", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 812, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01cee4fa-a19b-4ae1-a29e-acbd449247f2": {"__data__": {"id_": "01cee4fa-a19b-4ae1-a29e-acbd449247f2", "embedding": null, "metadata": {"page_label": "122", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "07c6c677-f883-4f45-a193-d6850a2c36a3", "node_type": "4", "metadata": {"page_label": "122", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "51df93c78cb9cd1cd22bf15c189e11a91439210422976ed5ec3a65767b72c91e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 10 \n \n value=x[r]; \n i=p-1; \n for(j=p;j<=r-1;j++) \n { \n  If(x[j] \u2264value) \n  { \n   i=i+1; \n   temp=x[i]; \nx[i]=x[j]; \n                    x[j]=temp; \n  } \n } \n temp=x[i+1]; \nx[i]=x[r]; \n               x[r]=temp; \n \n Return (i+1); \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 326, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a42ab1d0-19d0-4489-9959-443103cc76d2": {"__data__": {"id_": "a42ab1d0-19d0-4489-9959-443103cc76d2", "embedding": null, "metadata": {"page_label": "123", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cabcd918-d11d-4dc2-a67d-30a33c6580c8", "node_type": "4", "metadata": {"page_label": "123", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "1df4c2b607789ca977ba9dbbb1d06a4ccf5d5a34778e2d952fcf2ad2534b9ed4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 11 \n \nExample \n \n2 8 7 1 3 5 6 4 \ni P , j r \n2 8 7 1 3 5 6 4 \nj P , i r \n2 8 7 1 3 5 6 4 \nj P , i r \n2 8 7 1 3 5 6 4 \nj P , i r \n(a) \n(b) \n(c) \n(d) \n(e) 2 1 7 8 3 5 6 4 \nj P i Exchange 8 and 1 \n(f) 2 1 3 8 7 5 6 4 \nj P i \nr \nr \n(g) 2 1 3 8 7 5 6 4 \nj P i r \nExchange 7 and 3 \n(h) 2 1 3 8 7 5 6 4 \nP i r \n(i) 2 1 3 4 7 5 6 8 \nP i r Exchange 8 and 4 \n2 1 3 4 7 5 6 8 \nApply same method for left and right sub array finally we will get sorted \narray \nLeft Sub Array Right Sub Array \nSort given array using Quick Sort: 2 8 7 1 3 5 6 4", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 625, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d9469ba2-4254-49a0-a3ff-a828d5eab037": {"__data__": {"id_": "d9469ba2-4254-49a0-a3ff-a828d5eab037", "embedding": null, "metadata": {"page_label": "124", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8b7a95ad-35b3-40e8-ac72-e44a682c9c08", "node_type": "4", "metadata": {"page_label": "124", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "520736e50ca9e30de71c87e3c06d17299f15db4319a2030fd19226d00a896662", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 12 \n \nMerge Sort \n\uf0b7 The merge sort algorithm is based on the classical divide-and-conquer paradigm. It operates as follows:  \no DIVIDE: Partition the n-element sequence to be sorted into two subsequences of n/2 elements each.  \no CONQUER: Sort the two subsequences recursively using the merge sort.  \no COMBINE: Merge the two sorted subsequences of size n/2 each to produce the sorted sequence \nconsisting of n elements.  \n\uf0b7 Note that recursion \"bottoms out\" when the sequence to be sorted is of unit length. \n\uf0b7 Since every sequence of length 1 is in sorted order, no further recursive call is necessary. \n\uf0b7 The key operation of the merge sort algorithm is the merging of the two sorted sub sequences in the \n\"combine step\". \n\uf0b7 To perform the merging, we use an auxiliary procedure Merge (A,p,q,r), where A is an array and p,q and r \nare indices numbering elements of the array such that procedure assumes that the sub arrays A[p..q] and \nA[q+1...r] are in sorted order. \n\uf0b7 It merges them to form a single sorted sub array that replaces the current sub array A[p..r]. Thus finally, we \nobtain the sorted array A[1..n], which is the solution. \nAlgorithm \n \nMERGE (A,p,q,r) \nn1 = q  -p + 1 \nn2 = r \u2013 q \nlet L[1\u2026n1+1] and R[1\u2026n2+1] be new arrays \nfor i = 1 to n1 \n L[i] = A[p+i-1] \nfor j = 1 to n2 \n R[j] = A[q+j] \nL[n1+1] = infinite \nR[n2+1]= infinite \ni=1 \nj=1 \nfor k = p to r \n if L[i] \u2264 R[j] \n  A[k]=L[i] \n  i = i +1 \n else A[k] = R[j] \n  j = j + 1", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1544, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9ad2093-95ca-41e6-ae39-ca6aa71a9199": {"__data__": {"id_": "f9ad2093-95ca-41e6-ae39-ca6aa71a9199", "embedding": null, "metadata": {"page_label": "125", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f337dec-23ad-4ed1-aa32-0fdb166b6aef", "node_type": "4", "metadata": {"page_label": "125", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "0f8e9f669c703d5579ad318a24c0f513c9036d5d8a01a106ad4f3ae116793b69", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 13 \n \n \nProgram \n#include<stdio.h> \nvoid mergesort(int [20],int,int); \nint merge(int [20],int, int, int); \nvoid main() \n{ \n   int x[20],size,i; \n \n   printf(\"Enter size of the array: \"); \n   scanf(\"%d\",&size); \n \n   printf(\"Enter %d elements: \",size); \n   for(i=0;i<size;i++) \n { \n      scanf(\"%d\",&x[i]); \n } \n \n   mergesort(x,0,size-1); \n \n   printf(\"Sorted elements: \"); \n   for(i=0;i<size;i++) \n { \n      printf(\" %d\",x[i]); \n } \n getch(); \n} \n \nvoid mergesort(int x[20],int p,int r) \n{ \n Int q; \n if(p<r) \nMERGE SORT (A,p,r)  \n if p < r  \nthen q<-- [ (p + r) / 2 ]  \nMERGE SORT(A,p,q)  \nMERGER SORT(A,q + 1,r)  \nMERGE(A,p,q,r)", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 726, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aadf292f-1c9b-471d-9c31-7097d6fb4a7c": {"__data__": {"id_": "aadf292f-1c9b-471d-9c31-7097d6fb4a7c", "embedding": null, "metadata": {"page_label": "126", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99b212b5-3e44-44cf-aad3-4be0c8c7c469", "node_type": "4", "metadata": {"page_label": "126", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "656137aac0884a68a44e9c36267f9ee62d0b9898d86d7370c844b640fbd6bf28", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 14 \n \n { \n  q=(p+r)/2;  \n          mergesort(x,p,q); \n           mergesort(x,q+1,r); \n merge(x,p,q,r)  \n \n } \n} \nint merge(int x[20],int p,int q,int r)  \n{ \n Int n1,n2,L[20],R[20],i,j,k; \n n1 = q  -p + 1; \nn2 = r \u2013 q; \n for(i=1; i<=n1;i++) \n { \n  L[i]=x[p+i-1]; \n } \n for(j=1; i<=n2;j++) \n { \n  R[j]=x[q+j]; \n } \n L[n1+1]=NULL; \n L[n2+1]=NULL; \n I=1; \n J=1; \n For(k=p;k<=r;k++) \n { \n  If(L[i]<=R[j]) \n  { \n   X[k]=L[i]; \n   I++; \n  } \n  Else \n  { \n   x[k] = R[j]; \n   j++; \n  } \n } \n}", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 579, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1122aa84-02ba-417e-8e14-43b80a0c6668": {"__data__": {"id_": "1122aa84-02ba-417e-8e14-43b80a0c6668", "embedding": null, "metadata": {"page_label": "127", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "37519b23-1a4e-4e95-a3b6-db1ceefff985", "node_type": "4", "metadata": {"page_label": "127", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "3f4b6b5c3258909387f6f5bd8236d093e9a62a58494c56fe9938daec8f46bf2a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 15 \n \nExample \n \n \n  \n38 27 43 3 9 82 10 \n38 27 43 3 9 82 10 \n38 27 43 3 9 82 10 \n38 27 43 3 9 82 10 \n27 38 3 43 9 82 10 \n3 27 38 43 9 10 82 \n3 9 10 27 38 43 82 \n38 27 43 3 9 82 10 Sort given array using merge sort", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 309, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4c44890-ec60-47e0-bcf9-6a6081485382": {"__data__": {"id_": "a4c44890-ec60-47e0-bcf9-6a6081485382", "embedding": null, "metadata": {"page_label": "128", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5feb506f-bbfb-41c9-978c-e127f107ae17", "node_type": "4", "metadata": {"page_label": "128", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "41093fa47554f9c3fc432fb541b0c05588488db8751b2537abbab604e83c8585", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 16 \n \nLinear/Sequential Search \n\uf0b7 In computer science, linear search or sequential search is a method for finding a particular value in a list that \nconsists of checking every one of its elements, one at a time and in sequence, until the desired one is found.  \n\uf0b7 Linear search is the simplest search algorithm. \n\uf0b7 It is a special case of brute-force search. Its worst case cost is proportional to the number of elements in the \nlist. \nAlgorithm \n \nProgram \n#include <stdio.h> \nvoid main() \n{ \n  int array[100], key, i, n; \n  \n    printf(\"Enter the number of elements in array\\n\"); \n    scanf(\"%d\",&n); \n  \n    printf(\"Enter %d integer(s)\\n\", n); \n  \n    for (i = 0; i < n; i++) \n { \n  printf(\"Array[%d]=\", i); \n        scanf(\"%d\", &array[i]); \n } \n  \n    printf(\"Enter the number to search\\n\"); \n    scanf(\"%d\", &key); \n  \n# Input: Array A, integer key \n# Output: first index of key in A,  \n# or -1 if not found \n \nAlgorith: Linear_Search \nfor i = 0 to last index of A: \nif A[i] equals key: \nreturn i \nreturn -1", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1107, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ada2288a-9a75-4312-98ba-6c62da74f612": {"__data__": {"id_": "ada2288a-9a75-4312-98ba-6c62da74f612", "embedding": null, "metadata": {"page_label": "129", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73efe614-f166-4c88-b88a-5c077707868a", "node_type": "4", "metadata": {"page_label": "129", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "64670618cb4c41cca463518a30afda7d1612b1035a15bd2f856bdd04874dddcb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 17 \n \n    for (i = 0; i < n; i++) \n    { \n        if (array[i] == key)     /* if required element found */ \n        { \n            printf(\"%d is present at location %d.\\n\", key, i+1); \n            break; \n        } \n    } \n    if (i == n) \n{ \n        printf(\"%d is not present in array.\\n\", search); \n } \n getch(); \n} \nExample \n \n2 9 3 1 8 Search for 1 in given array: \n2 9 3 1 8 (a) \ni \nComparing value of ith index with element to be search one \nby one until we get seache element or end of the array \n \n2 9 3 1 8 (b) \ni \n2 9 3 1 8 (c) \ni \n2 9 3 1 8 (d) \ni \nElement found at ith index", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 681, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d2f90e3c-d419-4e88-a1b5-e17b4a6a54d7": {"__data__": {"id_": "d2f90e3c-d419-4e88-a1b5-e17b4a6a54d7", "embedding": null, "metadata": {"page_label": "130", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4a66d1d9-6d1c-4d72-8169-eb138cbb475f", "node_type": "4", "metadata": {"page_label": "130", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8ed2569b966688df768524c731d4ddaca455c45a776fb15541603b154958eba0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 18 \n \nBinary Search \n\uf0b7 If we have an array that is sorted, we can use a much more efficient algorithm called a Binary Search. \n\uf0b7 In binary search each time we divide array into two equal half and compare middle element with search \nelement. \n\uf0b7 If middle element is equal to search element then we got that element and return that index otherwise if \nmiddle element is less than search element we look right part of array and if middle element is greater than \nsearch element we look left part of array. \nAlgorithm \n \nProgram \n#include <stdio.h> \nvoid main() \n{ \n    int i, first, last, middle, n, key, array[100]; \n  \n    printf(\"Enter number of elements\\n\"); \n    scanf(\"%d\",&n); \n     printf(\"Enter %d integers in sorted order\\n\", n); \n     for ( i = 0 ; i < n ; i++ ) \n { \n        scanf(\"%d\",&array[i]); \n } \n     printf(\"Enter value to find\\n\"); \n    scanf(\"%d\",&key); \n# Input: Sorted Array A, integer key \n# Output: first index of key in A, or -1 if not found \n \nAlgorith: Binary_Search (A, left, right) \nwhile left <= right \nmiddle = index halfway between left, right \nif D[middle] matches key \nreturn middle \nelse if key less than A[middle] \nright = middle -1 \nelse \nleft = middle + 1 \nreturn -1", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1298, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c2fc2d23-e86d-4677-b7dd-23d94081cdb1": {"__data__": {"id_": "c2fc2d23-e86d-4677-b7dd-23d94081cdb1", "embedding": null, "metadata": {"page_label": "131", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "790fb162-3bfc-4e05-9376-8365347dc51e", "node_type": "4", "metadata": {"page_label": "131", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2e9d291c9a76f5c4f8f4504b50e88f17988da0b7d79a69e592440cf33208f59d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Sorting and Searching \n \nProf. Pradyumansinh Jadeja (9879461848)  | 2130702 \u2013 Data Structure 19 \n \n  \n    first = 0; \n    last = n - 1; \n    middle = (first+last)/2; \n  \n    while( first <= last ) \n    { \n        if (array[middle] == key) \n  { \n            printf(\"%d found at location %d.\\n\", key, middle+1); \n            break; \n  } \n        else if ( array[middle]>key )  \n        { \n   Last=middle - 1; \n        } \n        else \n            first = middle + 1; \n  \n        middle = (first + last)/2; \n    } \n    if ( first > last ) \n { \n        printf(\"Not found! %d is not present in the list.\\n\", key); \n } \n  getch(); \n } \nExample \n \nFind 6 in {-1, 5, 6, 18, 19, 25, 46, 78, 102, 114}. \nStep 1 --> (middle element is 19 > 6): Search in left part    \n-1  5  6  18  19 25  46  78  102  114 \nStep 2 --> (middle element is 5 < 6):  Search in Right part    \n-1   5   6  18  \nStep 3 --> (middle element is 6 == 6):  Element Found    \n6  18", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 942, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3c61ac5d-dfa7-4a13-b79c-76fa5dd4652a": {"__data__": {"id_": "3c61ac5d-dfa7-4a13-b79c-76fa5dd4652a", "embedding": null, "metadata": {"page_label": "1", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "40be6cf9-a223-4230-ad2e-a6a09c06cba6", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "5f44f5bb9ccba81841aae3b7cbe0e06232d9701ddd3b7fdf2120dc6a3a741129", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1.   \nProposal Prepared for: \n{{Program Name}} \nTricon, CA 94098 \n \nProposal Prepared by: \nAdrta Technologies Pvt. Ltd. \n1209 Satyamev Eminence, Science city \n, GUJ 380060 \nCorporate Office: (+91) 4588454596 \n \nProposal Developed: \n18 January 2025, VERSION 1.0 \n \nProject Name: \nCase Processing for Clinical Trials \n \nClient Contact: \nAndrews Strauss, BSN RN \nHead of PV Operations \nPhone:   \nEmail:  \n \nAdrta Technologies Contact: \nVice President and US Head of Business \nDevelopment \nPhone \nEmail: adrta@yopmail.com  \n \n \nCONFIDENTIAL \nInformation contained in this proposal is confidential and may not be shared with any external party without the prior writte n consent of Adrta \nTechnologies Pvt. Ltd. , Inc.  Any intellectual property, process and innovations suggested in this proposal shall remain the property of Adrta \nTechnologies Pvt. Ltd.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 851, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7603c2e9-7e80-459f-9316-5f59b4ec481f": {"__data__": {"id_": "7603c2e9-7e80-459f-9316-5f59b4ec481f", "embedding": null, "metadata": {"page_label": "2", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1753330a-d2d2-4aaa-8430-5a2ca117b379", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b266c11668d02a4d36e0b4d0c2159b52efdf432690cf581efd1912566ddded46", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 2 of 13  Proprietary and Confidential \nTABLE OF CONTENTS \nEXECUTIVE SUMMARY .........................................................................................................................................3 \nPROPOSED OPERATING MODEL .........................................................................................................................5 \nPHARMACOVIGILANCE SERVICES ....................................................................................................................6 \nRESOURCING AND KEY STAFF ............................................................................................................................7 \nIMPLEMENTATION PLAN AND TIMELINES ...........................................................................................................8 \nTRAINING MANAGEMENT ..................................................................................................................................9 \nGOVERNANCE AND COMMUNICATION STRUCTURE ......................................................................................9 \nQUALITY MANAGEMENT SYSTEM .....................................................................................................................11 \nINFORMATION TECHNOLOGY (IT) INFRASTRUCTURE .....................................................................................11 \nBUSINESS CONTINUITY PLANNING AND DISASTER RECOVERY ......................................................................12 \nBUDGET AND ASSUMPTIONS ............................................................................................................................12 \nImplementation: Next Steps ............................................................................................................................12", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1803, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e81adcc1-02ee-449e-b9c6-e743272944e5": {"__data__": {"id_": "e81adcc1-02ee-449e-b9c6-e743272944e5", "embedding": null, "metadata": {"page_label": "3", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "155fbc54-3d6b-411f-8882-0e8849b86ea7", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "2db90c05fda84b667c2cee694e86cfa9a4fa0e02f238bbf9a2d528cc24230c47", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 3 of 13  Proprietary and Confidential \nEXECUTIVE SUMMARY \nAdrta Technologies Private Limited , Inc. (\u201c ADRTA\u201d) is pleased to present this proposal to ABC Sciences, Inc \n(ABC) for Case Processing for Clinical Trials  for its therapy currently in a Phase III study in Acute Lymphoid \nLeukemia. We currently provide services to biopharmaceutical companies ranging from emerging biotech \ncompanies to some of the largest global organizations and we believe that ADRTA is qualified to support your \nstudy. \nADRTA was established in Jul 2007 in London, United Kingdom (UK) with the goal to respond to the increase in \nregulatory and client requirements around Pharmacovigilance, Medical Information, and Regulatory services. \nWe provide services to ensure compliance for patient safety during  \n\u2022 Development \n\u2022 Launch Preparation \n\u2022 Commercialization and throughout the life cycle of the product(s) \nOur solutions and business models are cost-effective, resilient yet agile, and customized to each client\u2019s needs. \nOur experience and expertise, scalable operations, and consultative approach will serve you today as well as \nexpand with you as you grow. \nADRTA Differentiators for the {{Program Name}} Program \nADRTA is excited to partner with {{Program Name}} to deliver high-quality services that meet and exceed your \nexpectations for your short, medium, and long-term goals. \nWe believe that the following key success factors will help to enable the successful conduct of the {{Program \nName}} program: \n \n1. {{subservice selected}} \n2. Qualified and Experienced staff: At ADRTA, you will have a team of experienced healthcare \nprofessionals and physicians with relevant expertise at your disposal to support your drug safety needs \ntoday and in the future.  \n \n3. Niche Expertise: ADRTA supports clients with their end-to-end safety needs. We are a PV focused life \nsciences organization with resources, technology, processes, and a business approach geared \ntoward delivering the highest quality of safety services. ADRTA\u2019s customer base fosters a blend of \nlarge organizations (with mature processes) and small organizations (responsiveness and agility). ABC \nwill benefit from the right amount of engagement, executive leadership, and responsiveness.  \n \n4. Agility and Collaboration: We have a proven track record of successfully delivering services for clients \nof varying sizes, scales, and requirements. Our long-standing decade-long relationships with many of \nour clients are a testament to our adaptability to changes. \nAt ADRTA, you will receive a sense of urgency, responsiveness, and commitment to ensure we not only meet \nyour expectations but exceed them. We look forward to discussing our proposal with you in further detail. \nWe view our proposal as a working document to initiate planning and collaboration with you. As you read \nthrough the details contained within this proposal, please remember that ADRTA will always find a way to \ndeliver the highest level of quality in a cost-effective manner to meet your expectations.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 3051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4fd1c5a1-ba57-4fcc-b20c-0cf4153ab007": {"__data__": {"id_": "4fd1c5a1-ba57-4fcc-b20c-0cf4153ab007", "embedding": null, "metadata": {"page_label": "4", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3b26c005-9292-43b3-90da-a56e2c2b61a4", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "aaf895e72c6e30e59a1e55ed2a2632a9cb5bf0b0b1759fe5dff12314c3f6d335", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 4 of 13  Proprietary and Confidential \nTimeline \n\u2022 Project award date: {{Project Award Date}} \n\u2022 Project kick-off: {{Project Kick off}} \n\u2022 Go-live: {{Go Live}} \nBudget Summary*", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 183, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "28b84a9e-e5ae-48ac-9e38-e21828f75c79": {"__data__": {"id_": "28b84a9e-e5ae-48ac-9e38-e21828f75c79", "embedding": null, "metadata": {"page_label": "5", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1b10abf-8fb1-4ce3-9c62-3039ae62535b", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "fba19232f12c1344f84f10e8ebfb104270592e9fdb7937fe96869a6e14d79bca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 5 of 13  Proprietary and Confidential \nPROPOSED OPERATING MODEL \nADRTA\u2019s goals align with ABC\u2019s need for high quality, timely and regulatory compliant PV services within \nbudget. The path to clinical development of CGTs/ATMPs (Cellular and Gene Therapies/Advanced Therapy \nMedicinal Products) can be long and arduous because  of implementation of complex trial designs, \nmanufacturing and quality assurance, translational uncertainties  and commercialization, and clinical \nimplementation and acceptance. \nConsidering the above challenges, we understand it may be difficult for ABC to navigate the regulatory and \nsafety requirements. Early engagement with ADRTA as a  strategic partner will alleviate some of the below \nchallenges: \n\u2022 Long-term and unknown safety concerns \n\u2022 Multiple regulations \n\u2022 Product complexity and novelty \nThe ADRTA team will engage with your team to gain a full understanding of defining the path forward, including \nexpectations in terms of content and timelines , and workflow to ensure key milestone expectations are met. \nYour ADRTA team for this program will be carefully selected and will have the following: \n\u2022 Ability to provide customized & tailor-made solutions for clinical case processing   \n\u2022 Ensuring compliance across the product life cycle by keeping well-informed regulatory updates across \nkey regions \n\u2022 Provides regular status updates and schedule review meetings/roundtable meetings with ABC at \nagreed-upon intervals \nBased on our experience, the following are the key operational elements for the successful set-up and delivery \nof the project. Each of these has been detailed in subsequent sections: \n1. Pharmacovigilance Services \u2013 Clinical case processing \n2. Resourcing and key staff \n3. Implementation plan and timelines \n4. Training management \n5. Governance and Communication Structure \n6. Quality Management System  \n7. Information Technology Infrastructure \n8. Business Continuity Planning and Disaster Recovery", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1978, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "25e21a8c-0747-4ff0-8c25-fe2555db3075": {"__data__": {"id_": "25e21a8c-0747-4ff0-8c25-fe2555db3075", "embedding": null, "metadata": {"page_label": "6", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bd2911b7-46d3-4b15-a9f6-c491ea0d4d86", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "f4009493a005aa4c169a1617d169ac15fccf29322252908475d44fc7381dbb39", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 6 of 13  Proprietary and Confidential \nPHARMACOVIGILANCE SERVICES \nCLINICAL CASE PROCESSING \nADRTA will perform Individual Case Study Report (ICSR) processing on behalf of ABC in the ARGUS safety \ndatabase hosted and maintained by ABC bio. Our processes are well established to handle the intricacies of \ncase processing activities and nuances for cases received from clinical trial sources. Our team is flexible to be \ntrained and work as per the client-specific processes and workflows. \nADRTA\u2019s case processing activities would include: \n\u2022 Case intake, duplicate search, data entry, coding, narrative creation, quality control review (for \ncompleteness and accuracy). Medical review will be done by ABC Bio. \n\u2022 Source documents are attached to the case in the safety database for easy retrieval. \n\u2022 ADRTA provides case processing activities, including  7-day and/or 15-day report preparation. \n\u2022 Follow-up with the clinical site and/or reporters will be managed by  ABC and ADRTA team will liaise \nwith ABC until queries are appropriately closed and databased. \n\u2022 Our trained staff members will receive and triage inbound serious adverse event (SAE) cases, initiating \nthe process of detailed case entry. \n\u2022 An AE will be triaged based on whether it is serious, causally related, and reportable. \n\u2022 Every case will be data entered and will undergo a quality review.  \n\u2022 ADRTA will work closely with ABC\u2019s team to streamline the case processing functions.  \n\u2022 The complete clinical case processing activity will be performed as per ABC Bio\u2019s procedural \ndocuments (SOP). \nAs a standard practice, the Turn Around Time (TAT) for each case, depending upon seriousness and \nreportability, will be pre-agreed with ABC at the time of our implementation and transition.  \nFigure 2: Clinical case processing workflow", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1817, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ccc1933d-be8d-42af-ba6c-7a46f1fe144c": {"__data__": {"id_": "ccc1933d-be8d-42af-ba6c-7a46f1fe144c", "embedding": null, "metadata": {"page_label": "7", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9df8c6a3-5497-4792-95ce-6d87fef33e46", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "89f490f59dd0fc9eb062b3c34c2ccc8b93c2c00a5d0640f51e2afa20a089616f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 7 of 13  Proprietary and Confidential \nRESOURCING AND KEY STAFF \nThe ADRTA team that will be responsible for managing the services in scope will be based out in the US as well \nas India. We will leverage the already trained, qualified , and experienced resources to deliver these services \nfor you. Please refer to Figure 3 below for the team structure for this scope of work that we propose for ABC. \n \nFigure 3: Proposed Team Structure for ABC \n \n \n \n \n \n \n \n \n \nOur structured approach with a Delivery Head (DH) based out of the India office will ensure a high quality of \ndeliverables along with timely management of issues or concerns before or as they arise.  \nDr. Deepak Kumar Singh, as the Delivery Head, will be responsible for the overall delivery and ensuring \ncompliance with the processes and Service Level Agreements (SLAs) and be the point of contact for routine \noperational discussions.  \nADRTA will also deploy a Project Manager in the India office, who will be instrumental in the project set-up and \nimplementation activities. \nWe understand the need to provide a solution that brings ABC not only a quality-driven team that is skillful and \ndomain expert but also brings in cost efficiencies and high compliance standards. \nLeadership Profiles \nADRTA is pleased to put forward a highly experienced and qualified team of professionals with medical and \nPV qualifications for ABC. They will be knowledgeable about your program and possess the expertise to support \nyou through this transformative phase in your journey. This operational leadership team is passionate about \nwhat they do and unified in their belief that compliance is our highest priority. Their profiles are shared below. \n \nTEAM MEMBER EXPERTISE \nCo-Founder, Managing Director and \nGlobal Technical Head, UK \nDr. Kacker  is a pharmacologist with a PhD in pharmacology \nfrom All India Institute of Medical Sciences, India. He \ntransitioned his focus from academia to private industry 23 \nyears ago and has managed the regulatory and PV functions", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2038, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7c7e130a-6225-4973-9ed0-e63bcfa3f10c": {"__data__": {"id_": "7c7e130a-6225-4973-9ed0-e63bcfa3f10c", "embedding": null, "metadata": {"page_label": "8", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08a86fc5-6879-434e-80d6-7577f1ddc50f", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "8484ec603ebc0fbb03e37c8d203cecea1d68fbcec4d891f2d6f8e53afa3bc77c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 8 of 13  Proprietary and Confidential \nIMPLEMENTATION PLAN AND TIMELINES \nWe understand that engagement of this nature requires robust planning and prioritization with clearly defined \nmilestones and the involvement of responsible stakeholders right at the outset. Immediately following the kickoff \nmeeting (KOM), we will prepare a Microsoft Project plan to include detailed milestones and timelines. \nBased on our understanding of the scope requirements, we have provided a high -level implementation plan \nand timelines as a starting point for our engagement. Below are a few key project milestones: \n\u2022 Initiation: Governance structure and core implementation formation take place along with the \nexecution of key agreements like master service agreement (MSA) and statement of work (SOW) \n\u2022 Planning: This includes project kick-off meeting, creation of the technical agreement, project-specific \ndocuments, and service level agreement (SLA) finalization \n\u2022 Implementation: This phase includes Argus database setup for ABC and team training \nThis is an estimate only and is subject to change once the final project scope has been determined and agreed \nupon. We would like to acknowledge that the implementation plan can be customized to ABC\u2019s specific \nrequirements.  \n  \nTEAM MEMBER EXPERTISE \nat large pharma organizations in previous roles. He will provide \nexecutive leadership to the ABC project. \n \n \nVice President, Pharmacovigilance, IN \n \nDr. Thakkar is a Physician by qualification and holds a Master\u2019s \nin business administration (MBA) degree. He has over 19 years \nof experience in Clinical Research and PV. He will act as the \nfunctional head of the ABC project. \n \nGeneral Manager, Pharmacovigilance, \nIN \n \nDr. Deepak Kr. Singh is a Physician by qualification. He has over \n19 years of combined experience working as a clinician for 5 \nyears initially, and then as a Pharmacovigilance professional for \n14.5 years now. He will act as delivery head for the ABC project.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 1994, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8f076627-8f17-49f4-8625-5f45c6b77d5d": {"__data__": {"id_": "8f076627-8f17-49f4-8625-5f45c6b77d5d", "embedding": null, "metadata": {"page_label": "9", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "972b767a-d050-456a-a147-125250297d2c", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "6d66c1d4fbf003b0e3e59cdf4ad930487286be18ad989d49f08a0fe0e161e407", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 9 of 13  Proprietary and Confidential \nFigure 4: Detailed Implementation Plan and Timelines \n \nTRAINING MANAGEMENT \nTraining at ADRTA is structured in accordance with applicable global regulations, directives, guidelines, \nstandard operating procedures (SOPs), working practices, and applicable client\u2019s SOPs/conventions. \nAt a broader level, all positions and jobs functions have a defined role attached to them. A role-based Position \nCurriculum (PC) is prepared for all key functions/processes for performing day to day activities. \nTraining, both in product knowledge and understanding of processes, is ongoing, usually on a semi -annual \nbasis. Each individual working on the project will undergo various stages of training as described below, before \nhandling any regulated tasks: \nTable 2: Training Management \nType of Training Description \nOrientation, Induction Training \n\u2022 Role/process-specific PC assigned at the time of joining \nADRTA  \n\u2022 Includes ADRTA\u2019s background, core values, procedures, \nand policies according to their team member\u2019s roles \nPV Training \n\u2022 All new hires undergo PV training to ensure an adequate \nunderstanding of basic principles and global regulations. \n\u2022 Current team members receive it when a procedure from \nexisting PCs is revised or when a new procedure is added \nto the existing PCs \n\u2022 Three types of ongoing training are: \no Overview of product portfolio \no ADRTA Specific Controlled Documents \no Regulatory Updates \no MedDRA Update Trainings \nRefresher and Gap Analysis \nTraining \n\u2022 Designed for current team members to reacquaint them \nwith the processes required to maintain and improve their \nperformance on the job annually \nSkills Enhancement and \nCapabilities Training \n\u2022 A skill-based training approach, which includes \nknowledge-sharing sessions, seminars, conferences, and \nworkshops. \n\u2022 Multiple best-in-class online learning platforms to \nemployees for continuous growth \nLearning Management System  \nADRTA\u2019s learning management system ( LMS) has been validated on GAMP Principles and implemented at \nADRTA as per requirements of Annex 11 and 21 CFR Part 11. Below is the list of documents of an individual \nemployee at ADRTA that are managed through LMS. \n\u2022 Curriculum Vitae (CV)  \n\u2022 Job Responsibility \n\u2022 Position Curriculum  \n\u2022 Training Summary Records  \n\u2022 On the Job Training Records (as applicable) \nGOVERNANCE AND COMMUNICATION STRUCTURE \nFor the in-scope services, we will plan collaboratively with  ABC to understand all needs upfront so that the \nworkflow and delivery go without any disruptions. We will run a collaborative governance platform that is active", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2630, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fdfe103-77c7-4fe5-b8a7-9dff98c8fb03": {"__data__": {"id_": "8fdfe103-77c7-4fe5-b8a7-9dff98c8fb03", "embedding": null, "metadata": {"page_label": "10", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0f8d5d5-e4ea-40af-80a6-f1233de1d67e", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "7902472a4f5b85e400f3e6849286e504f424f8767342822d1c7ac73ed1619030", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 10 of 13  Proprietary and Confidential \nthroughout a project\u2019s life cycle, ensuring that the slightest exception is flagged, considered for long -term \nimpact, and resolved swiftly at an operational level. We will modify the governance structure to ensure that it \ncovers the following: \n\u2022 Implementation \n\u2022 Ongoing operations \n\u2022 Stakeholder communication \n\u2022 Escalation/problem-resolution process \nGovernance and Communication Structure \nBelow are key processes and monitoring steps that would be taken at each of the key stages through the life \nof a project to anticipate, manage, and deal with any matters that affect the success of the project.  \n Figure 5: Governance structure \n \nProject Meetings:  \n1. Service Delivery: During the implementation period, ADRTA will hold weekly service delivery meetings with  \nABC and then monthly to review open issues, pending questions, clarifications, metrics, volumes, resource \nutilization, new requests, updates on deviations, CAPAs, etc. The meeting discussions are reported by way \nof minutes and action items which help to ensure the project\u2019s success.  \n2. Operational Governance: Meetings held monthly with the joint operational management teams, as well \nas Quarterly business reviews (QBRs),  addresses the project performance and status, resources, \nachievements, challenges , and risk mitigation and process improvements help our clients to view our \nrelationship over time and to plan for key events or milestones effectively.  \n3. Executive Steering Committee  (ESC) meetings are held quarterly and would cover a few key areas \nincluding: \n\u2022 A snapshot of our engagement journey \n\u2022 Operational performance reviews \n\u2022 Challenges/priorities and feedback for the success of our engagement \nWe will have a Steering Group/committee which will consist of senior management from ADRTA and ABC to \nenable the execution of this project and to resolve issues of policy, cross-department interaction, and other \nsignificant matters relating to the project. The Steering Group will meet at the start of the project and then \nquarterly after going live. The extended role of this group then goes into annual discussions, negotiations, scope \nextensions, etc.  \nEscalation Pathway \nThere are internal processes set up within ADRTA to inform the senior management of any findings, exceptions, \nmissed timelines or similar service/quality -related matters automatically. We take our commitment to quality \nseriously, and we proactively communicate with our clients should there be any potential issues that may affect \na project. \nWe will structure and set up an escalation pathway with the ABC team anticipating the areas where we would \nneed to communicate with each other to resolve any issues. The matrix also has provisions for notifications to \nsenior management and stakeholders for events where appropriate.  \nFigure 6: ADRTA Escalation Process for ABC", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2909, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8cde47f-b80e-4659-bebb-82d9ece23fef": {"__data__": {"id_": "e8cde47f-b80e-4659-bebb-82d9ece23fef", "embedding": null, "metadata": {"page_label": "11", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e53fafa5-16ea-4408-95bb-d4d86913176c", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "03fa33be6253f6dbe102f6f22ec98d48e699531253b4489d1645aafbd593d222", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 11 of 13  Proprietary and Confidential \n \n \nQUALITY MANAGEMENT SYSTEM  \nWe believe that a strong quality management system (QMS) lays the foundation for safety services and at \nADRTA, our QMS provides cross-functional support to all our projects and will be applicable for ABC as well. \nADRTA has a well-defined and established robust quality management system for the oversight of the project, \nroutine operational activities, responsibilities, and service delivery. Our quality policy is based on four \nfundamental principles:  \n\u2022 Compliance with laws and regulations: Monitoring includes these aspects and is reported objectively \nto our clients \n\u2022 External/Internal Stakeholder Communication Quality: Excellence in everything we do \n\u2022 Accurate, timely identification of delivery outputs and reporting \n\u2022 Quality control ( QC) and Quality assurance  (QA) processes to identify important areas and an \nempowered team to take corrective action wherever necessary \n \nOur Quality System comprises the basic four components of a compliant quality monitoring program: \n\u2022 Procedures \n\u2022 Training \n\u2022 Audit \n\u2022 Corrective and preventive actions \n \nOur team has repeatedly accomplished stringent compliance goals; our organizational quality accuracy and \nregulatory compliance have consistently remained at 99.6% and 99.9%, respectively. \nThe QA team at ADRTA is well -trained and experienced with domain experience of 500+ Good \npharmacovigilance practice (GVP), and Good Clinical Practice (GCP) audits within the QA team. \nIn the last five years, ADRTA has provided support and participated in over 55 inspections by various health \nauthorities including the United States Food and Drug Administration (USFDA).  \nINFORMATION TECHNOLOGY (IT) INFRASTRUCTURE \nWe understand our clients trust us with confidential and sensitive information such as patient data, adverse \nevent information, and other sensitive data that must be kept secure, and to fulfill our obligation in this regard, \nwe have all the necessary security measures in place which include as follows. As mentioned previously, we \nalso have ISO certifications for information security (ISO 27001: 2013) as well as data privacy (ISO 27701: 2019). \nPhysical Security \nWe have the security controls implemented at ADRTA office locations in India (Delhi and Ahmedabad), the US, \nand the UK for our servers and network rooms, such as: \n\u2022 CCTV surveillance \n\u2022 Fire Protection \n\u2022 Biometric (fingerprint) access control (India) \n\u2022 Controlled temperature and humidity control  \n\u2022 Provision of uninterrupted Power Supply \n\u2022 Physical log to record access to the server room or network room \n\u2022 Maintenance   Log for recording maintenance activities \n\u2022 List of authorized personnel who can access the network room \n \nLogical Security \nWe have logical security controls in place to secure IT systems and information at all ADRTA locations and \nthrough virtual means also. Below are the controls in place for logical security.", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2972, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5d4e8af8-5959-4f10-9ebe-9d285cd67c1f": {"__data__": {"id_": "5d4e8af8-5959-4f10-9ebe-9d285cd67c1f", "embedding": null, "metadata": {"page_label": "12", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fcd201db-b526-4dea-ae30-039b08a78f64", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "4db18680c30b697d9c0fa2feb67aa93da9c111f5e7d4643d47da290345c0c268", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 12 of 13  Proprietary and Confidential \n\u2022 Operating System Logon Accounts, Security and Maintenance \n\u2022 Password Storage and transmission \n\u2022 Unique User Identification \n\u2022 Software Security Updates \n\u2022 Internet Firewall \n\u2022 Restricted use of Public Domain Software \n\u2022 Regular Back-up \nBUSINESS CONTINUITY PLANNING AND DISASTER RECOVERY \nADRTA has a defined business continuity plan (BCP) and governance structure to oversee PV activities. Disaster \nrecovery plans (DR) are in place for all business -critical systems. In order to ensure the robustness of our BCP, \nthere are several measures that have been embedded within the way we work and set up and operationalize \nour projects: \n\u2022 Multi-Location: ADRTA has four offices in geographically distant locations and covering major time \nzones globally: New Delhi, India; Ahmedabad, India; London, UK; and Jersey City, NJ. Each location \nhas the capability to serve as the backup site of other locations in times of critical business need. \n\u2022 Emergency Response Plan  and Business continuity plan are in place to tackle natural disasters like \nearthquakes and pandemic situations.   \n\u2022 Redundancy: Safeguards such as periodic offline backup, server/ instance replication, redundant \nnetwork connectivity, etc. , have been implemented to ensure the continuity of IT services in case of \ndisaster. Scenario -based testing is done for all continuity plans on a periodic basis to validate their \neffectiveness. \nADRTA has redundancy via its delivery center locations to ensure the continuity of PV services. Sufficient \nbackup ensures client responsiveness. To date, we have never experienced a loss of service. Our resource \nmanagement methodology considers resource planning with the availability of backup/buffer resources, \nappropriate succession planning, and cross-training of PV resources. \n \nBUDGET AND ASSUMPTIONS \nPlease refer to the attachments for more details regarding budget. \n\u2022 Attachment-1_ ABC _Budget for PV Services_ V 1.0_22May2023 \n \nImplementation: Next Steps \nWe are delighted with the prospect of working with you and would like to host you for an inspection of our \nfacilities and to review our processes.  We are confident we will provide you with the highest level of service \nthat is timely and compliant and ensu res your complete satisfaction. We hope you choose to place your trust \nin us to partner with you for your very important and critical functions.  \nOn behalf of the entire ADRTA Team, thank you for this opportunity to work with you. \n \nVP and US Head of Business Development \nAdrta Technologies Private Limited, Inc. \nadrta@yopmail.com \n+(91) 568989432", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 2643, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afe32d30-e775-4dec-a0e2-a9dc03956058": {"__data__": {"id_": "afe32d30-e775-4dec-a0e2-a9dc03956058", "embedding": null, "metadata": {"page_label": "13", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fcddaa29-c0e5-47a0-8ef6-873ecc40bf39", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "a3ed65dfe558b2603100f8c97be2e7c7d835fb9b5fbd0a317f48c7e1ec0b7761", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Page 13 of 13  Proprietary and Confidential \n \nAccepted Proposal: Subject to the agreement of detailed terms and conditions with respect to the services \nproposed. Both parties have agreed to negotiate reasonable contractual terms of the contract in good faith.  \n \n \n \nFor and on behalf of,  \nABC Sciences, Inc. \n______________________________ \nBy \n______________________________     ________________________ \nName       Date \n______________________________ \nPosition", "mimetype": "text/plain", "start_char_idx": 2, "end_char_idx": 470, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b5b3e09b-460c-4034-a25f-4010a53198f7": {"__data__": {"id_": "b5b3e09b-460c-4034-a25f-4010a53198f7", "embedding": null, "metadata": {"page_label": "1", "file_name": "service.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\service.pdf", "file_type": "application/pdf", "file_size": 60754, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fdc4e473-29b0-4b40-a9dc-cba672f5cec4", "node_type": "4", "metadata": {"page_label": "1", "file_name": "service.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\service.pdf", "file_type": "application/pdf", "file_size": 60754, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}, "hash": "b15641394bdd2232fd589e00618e7c54efe8ed07f54cb05c2424575dfb02892e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "PHARMACOVIGILANCE SERVICES CLINICAL CASE PROCESSING ADRTA will perform Individual Case Study \nReport (ICSR) processing on behalf of ABC in the ARGUS safety database hosted and maintained by ABC \nbio. Our processes are well established to handle the intricacies of case processing activities and nuances \nfor cases received from clinical trial sources. Our team is flexible to be trained and work as per the client-\nspecific processes and workflows. ADRTA\u2019s case processing activities would include: \u2022 Case intake, \nduplicate search, data entry, coding, narrative creation, quality control review (for completeness and \naccuracy). Medical review will be done by ABC Bio. \u2022 Source documents are attached to the case in the \nsafety database for easy retrieval. \u2022 ADRTA provides case processing activities, including 7-day and/or 15-\nday report preparation. \u2022 Follow-up with the clinical site and/or reporters will be managed by ABC and \nADRTA team will liaise with ABC until queries are appropriately closed and databased. \u2022 Our trained staff \nmembers will receive and triage inbound serious adverse event (SAE) cases, initiating the process of \ndetailed case entry. \u2022 An AE will be triaged based on whether it is serious, causally related, and \nreportable. \u2022 Every case will be data entered and will undergo a quality review. \u2022 ADRTA will work closely \nwith ABC\u2019s team to streamline the case processing functions. \u2022 The complete clinic", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1433, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"075db9be-4db7-4235-9453-07458a0334e2": {"node_ids": ["526c3c5b-c4b8-44be-925c-be6af6cff93f"], "metadata": {"page_label": "1", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3c7ccae3-679c-4e79-91f1-069435b17604": {"node_ids": ["0aec2406-0d3b-4629-bd8b-4f4bb36c3e6e", "1b20119a-8194-456f-bbbb-a39c0bac45f7"], "metadata": {"page_label": "2", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "303276ac-e9ce-4e8a-ad87-2c1bee28fdc3": {"node_ids": ["6d480239-1c8c-4d9a-9fe3-41c891d732cf"], "metadata": {"page_label": "3", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7807a46c-17e6-46e5-ad3a-b0c37c7dcafa": {"node_ids": ["d9754a1f-10ae-4406-83b0-953064d0c9a6"], "metadata": {"page_label": "4", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "db822a37-39a6-45b0-9448-40e9c0b9aaf2": {"node_ids": ["ad35dca9-70ba-49e3-9244-4a0655101d14"], "metadata": {"page_label": "5", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ff388589-faee-4399-b5b2-89ef549f38b7": {"node_ids": ["2fa43c30-2f5b-44ba-9df1-1ec234872806"], "metadata": {"page_label": "6", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "700e1f3d-3b73-47c4-b43d-d566d78b8348": {"node_ids": ["afc16323-8713-4059-a052-0d9d7cbecbbc"], "metadata": {"page_label": "7", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0ba4e9a8-7f20-427f-868d-43f0004843d2": {"node_ids": ["32c79e46-3ec2-49f3-ae23-15f9cf115943"], "metadata": {"page_label": "8", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e965e958-d8f7-4c6e-8ed6-9225f92b8d2c": {"node_ids": ["c6606025-9ae2-4c25-baa9-971382aeb477"], "metadata": {"page_label": "9", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "366147aa-09ae-407d-a9ed-1e2ed00422b2": {"node_ids": ["1c337f11-6037-478c-b732-63b587f1e6e6"], "metadata": {"page_label": "10", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b91ed719-57ad-481b-b36f-4f486e1d960b": {"node_ids": ["9a78ecd6-03d8-4716-bb72-28cea8ae65cf"], "metadata": {"page_label": "11", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "980a14fc-88df-47a0-b06f-9c4476a88964": {"node_ids": ["fe96715a-7994-4155-b561-11b89bb90153"], "metadata": {"page_label": "12", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "eb3fa8e7-0dfb-4d6f-9d67-1d340b4cc195": {"node_ids": ["3baf100a-2600-45d8-ab1e-8a0a77aa2b28"], "metadata": {"page_label": "13", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "51623818-44ad-43f2-9bd0-851c7152f063": {"node_ids": ["2e76992b-7e95-465c-bf0b-441968864fd3"], "metadata": {"page_label": "14", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "647b78e3-36ab-4c7b-abf4-3277a73226d7": {"node_ids": ["e2efd193-fa20-407a-b98e-13453d31ac96"], "metadata": {"page_label": "15", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e979c1e6-7e72-4b1b-86b9-7b5b99ee624b": {"node_ids": ["8fb2257f-95b5-4d78-82a5-ec72d814bbe5"], "metadata": {"page_label": "16", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "45aea9f9-0962-4a0c-add1-d0928daa150e": {"node_ids": ["9fe7a86d-7784-4de5-bb82-a90e7dda0667"], "metadata": {"page_label": "17", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "091634d6-963b-40fe-b822-680a060e934d": {"node_ids": ["b9bbfd14-a892-4200-9159-a5998fef36c7"], "metadata": {"page_label": "18", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "90767b8d-058a-49f8-a42d-05f4469ea04c": {"node_ids": ["1b94c38d-1004-4dff-8913-b2e480f438eb"], "metadata": {"page_label": "19", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d8ef5243-6fea-472a-a550-f3cd1353883c": {"node_ids": ["72975597-5007-4a9c-a4c8-00404ccf46b6"], "metadata": {"page_label": "20", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fec2d1e4-fd7f-40d4-b5c9-a69d722654e1": {"node_ids": ["420b9361-fee8-472b-ae33-50a8887603c9"], "metadata": {"page_label": "21", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "93da667f-52c2-41cc-a649-e9ca7b46a0cf": {"node_ids": ["5ef98096-335a-46ca-a9d5-47b2f3d66aa2"], "metadata": {"page_label": "22", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "383bf45c-83f8-45d5-b6a5-756cae3e8989": {"node_ids": ["c4020200-a44a-42bb-85ee-b2ecafe28728"], "metadata": {"page_label": "23", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bfa0c1b9-f964-4956-a67f-12eac5f659ff": {"node_ids": ["458a3b13-e0a7-4b00-a0c9-a282153ed702", "1122ae01-74ec-448f-8a20-7c0a4f357bf4"], "metadata": {"page_label": "24", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e76c156d-3ad9-46d8-ab12-8a8ff441619a": {"node_ids": ["2ef57f86-47fd-4240-a15e-df75846880db"], "metadata": {"page_label": "25", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4fb35324-6458-4eb7-b08d-ce065ce9cbd4": {"node_ids": ["d1d51558-9f4f-46ba-ba8a-04824fb3a16c"], "metadata": {"page_label": "26", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "54848abb-2367-4766-a30e-57c75f45870d": {"node_ids": ["5cb1c2ee-8cbf-4704-b578-52333804ab10"], "metadata": {"page_label": "27", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1ff3db94-a69c-4747-9cf6-d93725161af3": {"node_ids": ["c74fc8f6-f6a7-4781-a4a7-0a28b7eb3cd5"], "metadata": {"page_label": "28", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "34e83e49-6a80-40b7-b033-ecbd1b8f3edd": {"node_ids": ["fc5861d4-a7e0-467a-8436-5342b71b8e0a"], "metadata": {"page_label": "29", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0e4262c3-6284-4f28-af62-08877c89c68d": {"node_ids": ["617b2c11-fa3d-4382-bc29-69ea80f26192"], "metadata": {"page_label": "30", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "64e57666-bc7b-4175-93ac-f7f13f95e214": {"node_ids": ["688ae55e-c1fd-46f3-8af9-b201a88e7c08", "71c2ad04-5856-4b19-b597-0b225a3ae743"], "metadata": {"page_label": "31", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e98e7cd9-bbd0-40c9-80b2-9968238e8538": {"node_ids": ["df38a0e3-a322-464d-98d7-0bdd0a49878c"], "metadata": {"page_label": "32", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "84b7f95b-eb85-4b7b-b8a7-0717d0b7442f": {"node_ids": ["efd5d951-a3bb-4598-b9fa-ac7ecc2ff03d", "52579ebc-66ed-403b-8c02-67faaa70f2dd"], "metadata": {"page_label": "33", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2dfb9ef0-3f4b-4eb0-b082-5bb853c5abc9": {"node_ids": ["afbb7d91-9b80-4ace-80e5-1e92d78745a8"], "metadata": {"page_label": "34", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "066c3e72-7c84-4af2-9740-655bb40a354b": {"node_ids": ["1351cde3-006f-4ff9-9413-52fafc10dc02"], "metadata": {"page_label": "35", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2901853c-c1de-4047-bd27-e8a29c03175a": {"node_ids": ["15612915-915c-437d-b99e-1cc3d0a324fd"], "metadata": {"page_label": "36", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7483544b-7d1d-4169-96d5-e983902e3074": {"node_ids": ["02921768-2819-4f45-a737-0f1ea9038902"], "metadata": {"page_label": "37", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3b64a1cd-3fa4-47ff-8611-a179d5405894": {"node_ids": ["39420bb5-bef6-4d9e-9aa8-660b7435b39c"], "metadata": {"page_label": "38", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "56f07191-dfa5-4026-b635-a76198674925": {"node_ids": ["9b4e38ce-6a4b-47b5-b120-d131c66820ec"], "metadata": {"page_label": "39", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e0e64cb1-d8c7-4cc7-90f1-3ee0a552b5f6": {"node_ids": ["dc7ca1bb-41c3-4e80-83db-38e72a4637ef"], "metadata": {"page_label": "40", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bcbb7997-ba2a-4339-a5da-2c571bd38e24": {"node_ids": ["e15f50f9-4ee6-472d-89cc-fdf98ceaf2d3"], "metadata": {"page_label": "41", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e826982c-d87f-4f5e-8d0c-649292b35249": {"node_ids": ["d61f18ef-ef2a-4c01-86d2-053493b44204"], "metadata": {"page_label": "42", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ea553dd9-611e-4fb4-a02b-e8b1cb0747d5": {"node_ids": ["d4069b43-ec9a-421c-88fb-75fae23e0f90"], "metadata": {"page_label": "43", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "900eb617-93ab-4560-9363-e2ebd3c61365": {"node_ids": ["14b831cb-9955-44b6-959e-ed8568fca34d"], "metadata": {"page_label": "44", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "80159f92-b959-44fe-aa16-52daf54003cc": {"node_ids": ["ca1d8d0a-aa0c-46b5-8da2-855c7b57e27f"], "metadata": {"page_label": "45", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "75fb3ec5-106d-4d38-89f7-9232f3efeb21": {"node_ids": ["dc0c0cb8-bd52-498a-adaa-46c10895c958"], "metadata": {"page_label": "46", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "95eea06c-6e4a-4ed1-9f25-6ba620f7b527": {"node_ids": ["0dae402e-c028-4729-b541-5ac6a7262eb2"], "metadata": {"page_label": "47", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0564509e-ae0f-43c6-b2c9-ffa5faf49365": {"node_ids": ["63127fe8-b98f-4014-a586-0e94af2c1eff"], "metadata": {"page_label": "48", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fc7405c0-20be-430f-9b50-46135d6fd268": {"node_ids": ["5ff6094f-d1d5-43c7-8203-3ab0f03ef667"], "metadata": {"page_label": "49", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8a08184c-5b08-430c-86db-f6cece85978e": {"node_ids": ["0567755d-3673-4388-846d-d8a0ff9a3f0b"], "metadata": {"page_label": "50", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f0531017-0b02-49f4-ab25-c8018e763615": {"node_ids": ["621c33a7-d2e4-4871-b21f-50244eaebb41"], "metadata": {"page_label": "51", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5802b44d-ab6a-4047-a6fa-5dfeaae680b4": {"node_ids": ["a070f4e4-2b1b-4824-8155-f65e2caf3c06", "e448223e-7d82-4079-a3dc-352947940a1b"], "metadata": {"page_label": "52", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3f279c0f-c197-4ce2-b8ab-a6184a28a90f": {"node_ids": ["3bc161b1-54c3-4d70-b58f-5361f5aa7e65"], "metadata": {"page_label": "53", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "82476317-a5d0-4f0f-84a4-62b22410fcb4": {"node_ids": ["e8743e81-a413-460b-8ade-7b919a3ceea5"], "metadata": {"page_label": "54", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "90ea538b-b255-480c-8e8b-048310fd8803": {"node_ids": ["ee23c338-f702-4027-9e16-614b15d575a5"], "metadata": {"page_label": "55", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "71dca858-631a-477c-b413-3223854639f0": {"node_ids": ["7b3d686b-1ef5-4449-90a0-4d8d79ae565d", "798a72cf-a2c7-497f-a6e6-50b407f639bd"], "metadata": {"page_label": "56", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2e745575-9b4d-4256-a67f-4e7cf876204d": {"node_ids": ["f80a1ad9-0d34-4b33-95e2-556a3f977d56"], "metadata": {"page_label": "57", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cfb632d3-dd2b-49a9-84d7-423771ae8a9e": {"node_ids": ["e948857a-c567-4fc4-b3ca-f3fbfdb9ff3e", "82d8b0ae-11a3-4e78-b5c7-cd8c15cb3618"], "metadata": {"page_label": "58", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c56c1a68-488f-4835-9ff3-4db7672e8e8f": {"node_ids": ["b4f069d5-4d1f-446d-aca5-d4e1e77a6388"], "metadata": {"page_label": "59", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8cd35e64-a184-43dc-bdb2-a9ce9ec3beb6": {"node_ids": ["e1d26386-7e1c-4f28-88e6-7681430f12a5"], "metadata": {"page_label": "60", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "324dcdbf-2be8-4e1c-bc86-821c1548b27f": {"node_ids": ["4040f999-0ddd-4386-afd8-8be89c42ff7e"], "metadata": {"page_label": "61", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "940432f0-16a3-42b2-a84b-89d06c35c3b8": {"node_ids": ["3b47287f-89d0-4059-82fe-26daaa7c0148"], "metadata": {"page_label": "62", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "76a8f7dc-872b-45df-95f1-446323ae832e": {"node_ids": ["5cf41f68-291a-47a9-9558-6645c51d5644", "aaef0a2d-a3be-4337-b844-36ba295ef9ce"], "metadata": {"page_label": "63", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0a99e186-a6e8-451b-a995-b702e942d7d8": {"node_ids": ["d3527a2f-2c1f-4dfe-9f03-165eac4b7640"], "metadata": {"page_label": "64", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6597ed24-9894-450c-b81d-2acf0e51a872": {"node_ids": ["e5b6d6c2-bd32-44b7-865b-c8b3fd14f1dc"], "metadata": {"page_label": "65", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "878538be-5da7-4df1-9f3e-57f44cb10781": {"node_ids": ["9b5ae2d5-0246-4e52-a95a-236e0e3be597"], "metadata": {"page_label": "66", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9c6f062b-9a97-41ac-96e3-85a628d0c559": {"node_ids": ["608b586e-f845-4802-88f0-0050c6f8c2b1"], "metadata": {"page_label": "67", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9cf06106-de31-4156-83e5-73df731496ba": {"node_ids": ["580670f1-4006-49fc-a83b-e944356aca7f"], "metadata": {"page_label": "68", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "144b1a39-1b3d-4ed9-8439-18288484aac4": {"node_ids": ["5af8f194-fe35-409e-adca-12377bc7cb3c"], "metadata": {"page_label": "69", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8a0598a4-cfd2-436d-b7ad-8966458e1471": {"node_ids": ["f830c010-6a07-4fd4-9a32-75e86ea3a692"], "metadata": {"page_label": "70", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "adb0856b-f387-455a-9906-1f864643e493": {"node_ids": ["d8a83375-342b-475c-819b-0e6182d3a313", "e28a7288-e39f-4fc2-97a0-519ff44922c9"], "metadata": {"page_label": "71", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0b63b601-b0bc-4ddc-9d47-975420677787": {"node_ids": ["e7ab5664-f663-4c91-a775-6cde33bcda76"], "metadata": {"page_label": "72", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f0f81dfd-9dfe-410e-9b57-ccfbbdf49631": {"node_ids": ["36f88654-f2c3-465d-adb8-ad4d3a7dfba5"], "metadata": {"page_label": "73", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9ff633c7-1183-4329-bb52-57fa2a400581": {"node_ids": ["d34f8eee-e49d-4be2-b3f9-1dac2df36b47"], "metadata": {"page_label": "74", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5ea4b656-39b3-40fa-aa00-8c1b23cf16e0": {"node_ids": ["5f74155d-823d-47a1-85ba-bdce22fe0b57"], "metadata": {"page_label": "75", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e5aa79fa-2c16-4962-86d8-d67e34f342eb": {"node_ids": ["7c88de0b-00a5-4b97-8b9f-62d1e7cf72c6", "d0a7255f-0600-4e38-8c9a-5c99ea8c3a2b"], "metadata": {"page_label": "76", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2dbf738b-e3eb-4456-b428-e5dadcf5faf4": {"node_ids": ["9173dd7f-89ec-44b6-8c8d-578ce1fc8340"], "metadata": {"page_label": "77", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cfc65701-b890-408b-a641-bc27885335ad": {"node_ids": ["aac797bd-48a1-4fe0-aad2-38d3c71aa0d7"], "metadata": {"page_label": "78", "file_name": "2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\2180712_CIS_GTU_Study_Material_e-Notes_All-Units_17062020050424AM.pdf", "file_type": "application/pdf", "file_size": 8784752, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "89345f47-f421-4f8d-9bca-ee4334046c3c": {"node_ids": ["4edca1af-596b-45b8-bb03-8bfae277ee7c"], "metadata": {"page_label": "1", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5204f85c-1384-45b1-bcc6-0c7e701c18da": {"node_ids": ["a45a1268-a23b-4dd6-8386-d337db643406"], "metadata": {"page_label": "2", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ce1807f5-fa58-44d4-ad52-ff1e9f650138": {"node_ids": ["ca986b56-f434-47ee-ac26-e8091ce70991"], "metadata": {"page_label": "3", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "861c7347-7699-40a3-a71e-beb5176f4823": {"node_ids": ["0fbd9597-9d61-4320-8a41-02de374eae69"], "metadata": {"page_label": "4", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e1a27ae5-8d9c-4330-aec9-20b227981819": {"node_ids": ["1735010d-1585-4a4a-bc1c-b81220bd5889"], "metadata": {"page_label": "5", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5e98addd-2a04-4921-97f3-dfb6ffa1b013": {"node_ids": ["22428784-9b75-46ca-b7db-46562ba7f158"], "metadata": {"page_label": "6", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c1709054-8668-45f3-9eab-9a4e260f987f": {"node_ids": ["11e1fa9a-39d1-4e3f-ab43-fc81b536a520"], "metadata": {"page_label": "7", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "696153ec-8995-42f8-a354-86d8817bfd1d": {"node_ids": ["c5139829-9765-49fa-adeb-0047468129ad"], "metadata": {"page_label": "8", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "06ae15e2-be6e-4207-8d25-2d34c5c19fb8": {"node_ids": ["718b47a3-157a-414d-9fdd-67fbc40646ee"], "metadata": {"page_label": "9", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9e625475-80e7-49a2-9a20-9b9a5a6f56f5": {"node_ids": ["d9e89426-c090-43b1-9e40-2bf6df420dd7"], "metadata": {"page_label": "10", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "78cee554-7b6f-4c00-801d-c6834655dc37": {"node_ids": ["2bcc3295-5e4f-44ed-be33-eca078f1daa7"], "metadata": {"page_label": "11", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ac10c795-8942-4d10-b0f9-bd0fb9115bb5": {"node_ids": ["70e1de84-e2b5-49ff-a92d-223e25d32867"], "metadata": {"page_label": "12", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7833e948-0bea-4be2-a28f-f7b8fd2d9d81": {"node_ids": ["d1517016-271f-4d24-9c8d-29287965a684"], "metadata": {"page_label": "13", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fefc01b9-e391-43f2-9688-a6adf7ce4991": {"node_ids": ["a356a7b9-17fe-4ab1-9278-8a8507cf6a25"], "metadata": {"page_label": "14", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "96ed40d4-f957-4dd1-8b71-62ad5944e4cf": {"node_ids": ["ab2f3092-86f9-4a30-ba1d-1f4bf76fa8b3"], "metadata": {"page_label": "15", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d9556498-df47-4918-ad36-bf1595044d6c": {"node_ids": ["dfc10e13-b91b-49f3-93d3-56fe48cfac82"], "metadata": {"page_label": "16", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5225adbb-dd33-43c3-abb6-b3a31f2ba2ed": {"node_ids": ["c9bb7289-dcfa-4922-a8cb-85c492f8b691"], "metadata": {"page_label": "17", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6cfebddf-e926-44f2-a4d1-abda904341be": {"node_ids": ["b7cb82b0-5352-4950-a5e4-8823b87d95c1"], "metadata": {"page_label": "18", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f6ecc8c1-6a8b-4059-adaf-4ba635c13943": {"node_ids": ["c3da5861-c3ed-4929-aa8f-df31fc0f5f92"], "metadata": {"page_label": "19", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "32b8c4d9-d720-47cf-a0df-1b4e8af5e3a4": {"node_ids": ["7fdb741a-7973-4b5c-8af4-a3830c022963"], "metadata": {"page_label": "20", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "908fb9c6-634d-4f78-a3a6-34fd213998ab": {"node_ids": ["4485818d-698c-4acc-9908-6033abc4c01d"], "metadata": {"page_label": "21", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e23e11a9-4c5f-4e21-ae69-0b26d3563dcc": {"node_ids": ["dbe33a52-1c35-48b4-9202-462e23819459"], "metadata": {"page_label": "22", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6157f50a-5166-4184-a6c2-c23c153630c2": {"node_ids": ["ebaa9494-4d74-4a3d-9617-0c2076295998"], "metadata": {"page_label": "23", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "dbdc7594-bd7e-4b3d-981f-9c68fb9dd3e5": {"node_ids": ["b8ff9687-5a78-49a6-95c2-e3009b1b90b9"], "metadata": {"page_label": "24", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a3042550-4bc6-45c1-b23e-21fffed5ae30": {"node_ids": ["2372a8e2-8c35-4e6b-b1f0-86d3ac577cdd"], "metadata": {"page_label": "25", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "abfc535f-e449-483e-ae2d-024f1b220c4f": {"node_ids": ["ab97a4fb-5410-406e-93bd-967003265df0"], "metadata": {"page_label": "26", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b0862230-1e5b-4799-a1d4-238ae9925d7c": {"node_ids": ["581ecc59-4022-41e4-b894-88c6881d1232"], "metadata": {"page_label": "27", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7235bdcb-c70f-4d80-b12d-ac6c80d89de9": {"node_ids": ["5a0b4547-8b5a-4290-878a-4def7d1fd0b5"], "metadata": {"page_label": "28", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a28f6c02-f15a-4b90-b459-16883fb0484d": {"node_ids": ["ca71126b-6a6a-4139-b317-321e8999d8eb"], "metadata": {"page_label": "29", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a15d4f20-a0d1-40ff-afdb-a06d16092107": {"node_ids": ["6602c73b-d2ce-4c5a-8c82-1061c53a0ec5"], "metadata": {"page_label": "30", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "52d5484a-0672-4188-98f8-e0ca2301263d": {"node_ids": ["73d72308-9981-4265-876d-5a7584b2f3da"], "metadata": {"page_label": "31", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "78103799-7613-4407-945e-94a9150a80f0": {"node_ids": ["13d065cd-2386-45a4-b57a-ee34c706ae0e"], "metadata": {"page_label": "32", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f5ed3e2a-2b50-45df-80e5-8411d92c477a": {"node_ids": ["f4afc7b6-b821-4097-bf3e-33b89340266a"], "metadata": {"page_label": "33", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "49d9c393-83fe-4760-a270-6657ed21cc2b": {"node_ids": ["2650b159-85bc-4615-a56c-f40f098ae1f6"], "metadata": {"page_label": "34", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1079c78f-53f1-40e0-9e5b-9e0fdaf38c44": {"node_ids": ["9d32ce50-43d6-412a-8645-daeef5737aee"], "metadata": {"page_label": "35", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "76ce7475-d630-4051-9a77-14cbb43c4a7f": {"node_ids": ["726f0e23-9128-4fe6-99bc-74fc9003fb66"], "metadata": {"page_label": "36", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e9ad0c96-688d-4857-8d6a-3d9b9c812be9": {"node_ids": ["66058e73-8f5d-4bea-8c62-1d70ff1b6647"], "metadata": {"page_label": "37", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "83567cf1-470f-4e90-b2cf-3fa62d3aa504": {"node_ids": ["5ee7ce2c-812c-49b7-8bba-f268106518f1"], "metadata": {"page_label": "38", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7e04ba52-0b0c-4a6d-8bce-83e9379865f3": {"node_ids": ["c133d795-5ce4-4f5a-a43d-2c0f1fab6979"], "metadata": {"page_label": "39", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fce3a458-297e-4f35-bd27-c75230b76427": {"node_ids": ["d9bb1118-e94f-457f-91b3-5b9f2a4844e3"], "metadata": {"page_label": "40", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "564770a3-2cb1-468a-ad96-d667d0746f3a": {"node_ids": ["ab68a0c6-3831-4683-9d0a-2e33e9f60866"], "metadata": {"page_label": "41", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3a17c383-a0ae-44a0-a24a-d61cea00ba60": {"node_ids": ["dbe06757-2df7-46e3-aaa6-8a2d8c768822"], "metadata": {"page_label": "42", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7e3a8dee-0b72-42d1-80b4-483dd1820252": {"node_ids": ["fac961eb-8fdb-49d7-9e92-ec1d59e73e0a"], "metadata": {"page_label": "43", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "457124bb-7086-4e5e-982a-87329735e09b": {"node_ids": ["c061e1f6-43ec-48e0-b7fc-de6548d17f2e"], "metadata": {"page_label": "44", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "dae985b2-2307-42bb-b856-7066c6347b55": {"node_ids": ["1800ce8a-21d3-4ac7-8448-3662a737b7e1"], "metadata": {"page_label": "45", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0050b886-f95f-4df4-af3e-9c55ee983186": {"node_ids": ["e08db5aa-26f5-4a13-a995-70619c97b946"], "metadata": {"page_label": "46", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2514a873-f337-40aa-bc70-b32e5789bc96": {"node_ids": ["7b0c2ede-4f53-4069-94cc-6216b071594f"], "metadata": {"page_label": "47", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "536ca54f-82b3-45e2-8504-c37550f6ee08": {"node_ids": ["c8688bed-0e56-4141-a041-a3b17e1d606f"], "metadata": {"page_label": "48", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0a99f145-3fe6-486c-bdf1-bd00041c0b62": {"node_ids": ["32fb41df-752f-4385-8dd1-2087a2c6c18d"], "metadata": {"page_label": "49", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d55c31d3-22e5-45e9-bc98-d7a39955f214": {"node_ids": ["8862eb2e-781a-4e32-9849-3f6822c27771"], "metadata": {"page_label": "50", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d8c04afa-9dc7-47d3-bab7-1b965644032f": {"node_ids": ["51c0d53f-a883-4f56-8079-9bbce223ef24"], "metadata": {"page_label": "51", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4ee7901a-cb2e-4af0-9e91-9ba796a8e75a": {"node_ids": ["ece149d9-6598-4793-a254-47a5eeccc090"], "metadata": {"page_label": "52", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b8c13c66-1012-4036-9f2d-256c03117b26": {"node_ids": ["b3d821be-663b-4401-a243-8c41608c391b"], "metadata": {"page_label": "53", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c79798b1-451a-43d3-86d6-fa0df6b24c05": {"node_ids": ["6f2f7d8b-0e86-4236-afae-fd5d976d7202"], "metadata": {"page_label": "54", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9662899b-9ddd-4928-8fab-0c81b3b417c5": {"node_ids": ["26db0622-eb05-4eb7-9f20-857aa91d20ee"], "metadata": {"page_label": "55", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1cf954d2-a0a2-4a90-9e97-36400b8c1652": {"node_ids": ["818b1703-eea0-4efd-8e7c-f589f16793f2"], "metadata": {"page_label": "56", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fe24141f-6c6f-4216-b2b5-32ec15520587": {"node_ids": ["887c0d11-96de-4631-8bf5-a6b6fb8a1ea0"], "metadata": {"page_label": "57", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6e8c68b6-f61f-4872-92e7-504eab0132d6": {"node_ids": ["46de473a-11bf-4f4b-b769-2cfb3d4238f0"], "metadata": {"page_label": "58", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e000f48a-aaaa-462a-aac0-0cc695c8c061": {"node_ids": ["1580cd8f-1013-4355-8313-efa590406574"], "metadata": {"page_label": "59", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "da08a124-f7fe-4afd-b64f-93b422f4b831": {"node_ids": ["2af48ccb-0a5e-4b83-91dc-d7067a58ae62"], "metadata": {"page_label": "60", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "888cc36f-35ab-426b-a27b-394bbd03e02a": {"node_ids": ["accf1851-0c9b-4f43-b445-f4db17f9bfe7"], "metadata": {"page_label": "61", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b308015d-0bcd-426b-82fd-04c5cf0b3f69": {"node_ids": ["c7937d2b-7f65-4bbd-a22f-a012fd87eb01"], "metadata": {"page_label": "62", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bc5ef580-785a-4ca8-b302-b675286b71eb": {"node_ids": ["c1d84dba-339a-4c21-834a-a87379cd294c"], "metadata": {"page_label": "63", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "93030057-49af-4768-9481-c5d99e024146": {"node_ids": ["f0b82ffe-7bde-4693-8057-9af248219ec7"], "metadata": {"page_label": "64", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "dbf1fafd-2a61-4fc0-8511-97efbf8f77e4": {"node_ids": ["fff754c0-01fc-4cc2-9b62-e4dbe4b1a845"], "metadata": {"page_label": "65", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5c2051a7-0c5d-4f93-b8c5-b9ab9816071a": {"node_ids": ["4716bbba-4ca7-4aa8-a903-0a078c4f22cf"], "metadata": {"page_label": "66", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "31cbb412-e76f-47e1-9990-00667bfaa5a5": {"node_ids": ["a16c88d4-09b2-401a-b405-0eeebaef577f"], "metadata": {"page_label": "67", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9632360f-3bce-4b58-9ec7-e62b86086cf1": {"node_ids": ["e74a1021-7937-4327-b921-dfe42a7d8af5"], "metadata": {"page_label": "68", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "71d871bb-5f2a-4d9c-941c-6ad7aa3451f4": {"node_ids": ["a491eaf2-a96c-4226-9241-b1afea6c9b6e"], "metadata": {"page_label": "69", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0b939f2c-e1a0-4f73-9296-3aff5dc4e35b": {"node_ids": ["b21344ef-3d24-4f30-88cb-ee868ca3cbf6"], "metadata": {"page_label": "70", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8f5507c0-bf08-453c-8b28-8b15218dee87": {"node_ids": ["d7792318-54fe-4d6d-8f6c-1b39e24692d3"], "metadata": {"page_label": "71", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e80fb77f-18b0-4d0e-93c9-67f2627fc319": {"node_ids": ["b6fae8ea-8a42-4f18-a834-c4aae19cd802"], "metadata": {"page_label": "72", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "36fdc9e4-1f60-40d5-80f9-95d5324d6802": {"node_ids": ["6294c955-8ad3-4531-bb26-6426f7f85191"], "metadata": {"page_label": "73", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "08b5d0c7-3abb-4609-9f50-fc63cf85a4a6": {"node_ids": ["b45d5071-7d46-4515-9fdb-4f9715691d1d"], "metadata": {"page_label": "74", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "736c8476-3c79-47fc-baf1-ce0f6bc2c252": {"node_ids": ["cec251bd-fe7c-4858-845b-3ed524c8e61b"], "metadata": {"page_label": "75", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "0d7beb1c-030c-49c9-a521-744190aa9861": {"node_ids": ["cfc0fe45-f4a2-4cdc-b143-e1add1e1c340"], "metadata": {"page_label": "76", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5eb5dadb-c00d-4d92-851d-204296e3c65c": {"node_ids": ["511132cf-6218-40e3-aa54-8709facdd2c0"], "metadata": {"page_label": "77", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "094592ff-ca76-45b1-9899-d10bf5084415": {"node_ids": ["01af1717-58fd-4770-acc9-67814326d42f"], "metadata": {"page_label": "78", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bc83e3fb-74cb-4070-b244-b58db0fdf8fa": {"node_ids": ["3857dbc3-0c96-4ec7-be82-4cd2f95e1545"], "metadata": {"page_label": "79", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c187e14d-2843-4e88-abb2-ed7ebcd97d34": {"node_ids": ["e1a78f10-b94c-4952-ba60-0a74e2b59785"], "metadata": {"page_label": "80", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "85618e65-c3af-474d-8eb7-667f8acd02eb": {"node_ids": ["0f81e678-539a-4e49-89a5-09655665aeae"], "metadata": {"page_label": "81", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d8a18c18-56ef-4ffd-9e06-03bd4eece34c": {"node_ids": ["923de7a4-2eb2-4560-a0b9-857144a3f170"], "metadata": {"page_label": "82", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4dff270a-b6a4-48a7-a91d-d4621104c33e": {"node_ids": ["79f1461a-9900-494b-9a40-8df36914b427"], "metadata": {"page_label": "83", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "93b1bc81-6a2a-4de7-ae6c-e18df843af9f": {"node_ids": ["4dffbe38-e457-427f-a9e0-f67e394086fe"], "metadata": {"page_label": "84", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "51faaea8-4329-4396-b806-f4d6117810cf": {"node_ids": ["39ca05ae-168e-46d3-b778-b7fa34c9357e"], "metadata": {"page_label": "85", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f5636b0c-4054-4c3d-9129-bb4d03da6f83": {"node_ids": ["9e53d180-1b2a-4c59-bff1-d49e25d0c3b3"], "metadata": {"page_label": "86", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8ec0f30d-99a1-441d-a34d-48d6b7604b02": {"node_ids": ["84fb5f29-1d56-4bcd-8e2b-3558bea169ec"], "metadata": {"page_label": "87", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "05e834e0-22f7-47c5-a86f-0d4ef71dd284": {"node_ids": ["752f322b-2dde-468f-a73c-21a1be3704a3"], "metadata": {"page_label": "88", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "16f2c195-a0ae-41d6-a5e4-1aa991095497": {"node_ids": ["80b264a6-2305-4c8f-9fc4-4c9f87a92370"], "metadata": {"page_label": "89", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "15255d20-a991-4b93-95f4-61cf1edbbfd5": {"node_ids": ["83a4b02f-4df5-4f9b-bb4d-693b8697eaf8"], "metadata": {"page_label": "90", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cb394b6e-8745-42d9-b987-b20235bbd12c": {"node_ids": ["119554d3-0087-4e74-a1fc-7743599ea83c"], "metadata": {"page_label": "91", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "91a47347-385a-4bcc-8ff9-18d119c370e5": {"node_ids": ["daf9808a-bf79-488b-a3da-099e81c51f3c"], "metadata": {"page_label": "92", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "82cfcfb3-b754-40be-ae20-52cf132abb8b": {"node_ids": ["dd62a585-c02e-4a9d-aaf4-9ffd4439b7be"], "metadata": {"page_label": "93", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c5ff7c4d-74ea-42e1-975e-51ef995367f5": {"node_ids": ["b2d2c724-28a3-4275-a5a1-59ef9ef713ca"], "metadata": {"page_label": "94", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c8f94c17-6d76-47aa-a97a-745f76f2864e": {"node_ids": ["3e9ab179-3cda-4a19-8c6c-f49b88a1863f"], "metadata": {"page_label": "95", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "90c9ddc4-2748-4720-960f-381a5280db47": {"node_ids": ["5b3c5b17-dfe5-46b2-b1b7-b6dcf1512dba"], "metadata": {"page_label": "96", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f281ebc7-7b94-4f30-85d6-aff0f2f404b3": {"node_ids": ["8fc185ee-b16c-412c-b478-447cca0fe5f3"], "metadata": {"page_label": "97", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5319a5b9-d85d-417a-b724-d30ee5b64ca6": {"node_ids": ["b889c51e-3104-40d0-b280-d671e50cb7a1"], "metadata": {"page_label": "98", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "671eb83d-2cbd-46c6-8cc2-46bc47146b4f": {"node_ids": ["c7af7990-8be0-4010-af47-281891342db5"], "metadata": {"page_label": "99", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ce2cdce3-5457-4e81-b2ca-ff8ed85946d9": {"node_ids": ["92ca2f04-457e-4611-8ebd-83fb550e5937"], "metadata": {"page_label": "100", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "65ef7e3e-ba2a-4986-825e-c34d9a907d01": {"node_ids": ["fa80bb22-e0b4-41a2-b070-fb2171b1509b"], "metadata": {"page_label": "101", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "986c7444-2e5b-40c7-8f00-35a1b20c3914": {"node_ids": ["d19a24ee-9587-4cbe-8f45-e7e7d8424cd6"], "metadata": {"page_label": "102", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d4d345eb-ead8-4da3-a32d-62e01175934a": {"node_ids": ["5a73c747-9d03-4297-b3fb-fa9131fb25ec"], "metadata": {"page_label": "103", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3164f871-e248-4348-942f-b57f0f459974": {"node_ids": ["399734c1-bf89-43ae-ab1a-d8bdc76287ee"], "metadata": {"page_label": "104", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e77a5c31-ee02-4d95-9054-aed9803ca9fb": {"node_ids": ["720f92a0-9161-4622-a09c-173ff6a3b7da"], "metadata": {"page_label": "105", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "848aa548-f1bc-4ca7-97f2-9cd6d4065210": {"node_ids": ["954c7471-d57b-46b4-9c59-9852ca881400"], "metadata": {"page_label": "106", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "23f769ff-7bd8-4b4f-9cdf-6acdb0f609e9": {"node_ids": ["b28b651a-4b18-4489-9871-23ad11cd58a5"], "metadata": {"page_label": "107", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4971e5ef-698f-464c-8958-128f8ef4f2ef": {"node_ids": ["71ffe8d6-300e-48b1-b872-5fb8c54f0611"], "metadata": {"page_label": "108", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b7df6724-9d5d-4e0b-9c41-88a706675cce": {"node_ids": ["fc1ee5d9-61a7-44a7-8b30-2d1443b7d844"], "metadata": {"page_label": "109", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3eab9638-1d48-4c0a-a80c-4ddff47d225c": {"node_ids": ["21cb6b2f-5154-4c86-8113-5df0c5295112"], "metadata": {"page_label": "110", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "421207d8-0e6f-484f-967f-2555d2bfcd95": {"node_ids": ["ef275ebd-cf66-4950-a016-bbd35cfb6e7d"], "metadata": {"page_label": "111", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2c3e354b-ee7a-4678-83c8-7d7a572c298e": {"node_ids": ["3fa92031-c919-4de4-9545-f4faac7e7b39"], "metadata": {"page_label": "112", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8c50c304-e2f3-41ef-b6b3-c32a0eeb6a4e": {"node_ids": ["f2eb5de4-8312-4a53-a314-4e4fea3e0cd3"], "metadata": {"page_label": "113", "file_name": "3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\3140705_OOP---I_GTU_Study_Material_e-Notes_Unit-1-to-5_11062022015400PM (1).pdf", "file_type": "application/pdf", "file_size": 9847769, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "34f32bf2-cab4-4f29-988a-d8e3d83bb064": {"node_ids": ["4647e945-117a-4a58-8ff2-da92f53a862a"], "metadata": {"page_label": "1", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4a84acb4-157e-4903-b272-0ce07c3295cb": {"node_ids": ["2fa3c04c-622f-41f2-9ed8-09a8b662beaa"], "metadata": {"page_label": "2", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "759569dd-8a42-4a3a-b2ce-2b47a3da9fca": {"node_ids": ["036aa7d3-51dd-467e-9028-0f26ea6c4b1d"], "metadata": {"page_label": "3", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6687b18a-5ac5-4152-8b02-86c80392a504": {"node_ids": ["84fdbae2-e521-4d37-a300-974d68f5502f"], "metadata": {"page_label": "4", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "04686cde-dba4-4e88-befe-d0926f8ec288": {"node_ids": ["10b4ba33-ec5b-4fee-8114-fe507c446de1"], "metadata": {"page_label": "5", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "23bd9ee1-80fa-41dd-970e-6f787832ce05": {"node_ids": ["669a5a06-8a63-44df-bcd6-aac64626da6d"], "metadata": {"page_label": "6", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9fc7ece1-0583-4b38-b5f3-7edba87a2661": {"node_ids": ["8fcd4ff7-8d8e-458c-9d4e-f5e79ec3f078", "41a756a3-df54-4afb-989e-48d3d1e16b59"], "metadata": {"page_label": "7", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "39647dc8-1c5e-4848-b5bd-fa75426bf8ed": {"node_ids": ["23ff13f1-fe3b-46f0-9f27-f6b1193f10be"], "metadata": {"page_label": "8", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8a585341-1cf5-481d-8733-640349525f36": {"node_ids": ["9e790f68-bbef-4c8c-857f-0412234597d4"], "metadata": {"page_label": "9", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4c5e26fa-87e9-4d59-a276-dd11e42a6171": {"node_ids": ["29a770ca-3da3-4766-8227-030e8e319f0c"], "metadata": {"page_label": "10", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b640d3b8-9248-4d35-b236-1bf5ea09d95a": {"node_ids": ["b01154d2-2de2-47b1-aa50-87543f9098a8"], "metadata": {"page_label": "11", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e8b9ad8c-8c87-485b-9867-8037a19ebb71": {"node_ids": ["32e93560-36f4-4713-bd63-9eb55be73842"], "metadata": {"page_label": "12", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cd794995-95cf-4b17-abc3-b99a96104a76": {"node_ids": ["52001f1f-c916-4534-9ef8-1a08c7a1fb56"], "metadata": {"page_label": "13", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e42c261f-57d1-4f6f-b053-d951e204452f": {"node_ids": ["a28b43ba-ada3-4605-95d4-635094f890ef"], "metadata": {"page_label": "14", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "65ea5242-fc03-4812-9c50-d344ec8aa34e": {"node_ids": ["a39d8ad8-3094-4d55-ad2f-9dba58ce8edf"], "metadata": {"page_label": "15", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "313caba2-2ca9-4c7d-8913-5ed637b56202": {"node_ids": ["a5f22dc8-a7a2-4afa-acfe-475a497dc378"], "metadata": {"page_label": "16", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f3c3c96c-1b5c-4b15-9dcc-6cdbe0a2b177": {"node_ids": ["3f9e2976-7e8e-48e4-bdc2-c497350f6c11"], "metadata": {"page_label": "17", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c8b472e0-19d7-4920-b84e-774c179474d5": {"node_ids": ["146a297a-4b40-4215-9c97-454783f0ac7f"], "metadata": {"page_label": "18", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6e8b8192-6f90-4f8d-a340-99aec4cfac97": {"node_ids": ["bb53ea6c-c216-486c-af25-b879cd5057ee"], "metadata": {"page_label": "19", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7b2420bf-3bc2-427b-aa97-d45c5986bc58": {"node_ids": ["fa44957c-3f09-42f1-bfdd-ebb20e592eb3"], "metadata": {"page_label": "20", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cf2e3917-119a-4419-8e54-8178604254f1": {"node_ids": ["d34329d4-e72a-4d94-a7c2-41b1eb37a7a3"], "metadata": {"page_label": "21", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2e045ffb-2b21-4d98-8918-902afa0005d8": {"node_ids": ["7c6cc4aa-0006-4808-a29b-3ec3a18077b2"], "metadata": {"page_label": "22", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "24fbf627-2dbe-4a37-a748-fa078df5340b": {"node_ids": ["899ff6e6-bbb6-45d0-91ae-2482977323d0"], "metadata": {"page_label": "23", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4cb3a510-74af-40b4-82c3-f91ce31dc470": {"node_ids": ["106007db-a340-470d-93fb-7f6e3ede7b04"], "metadata": {"page_label": "24", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3f0578ee-430d-4e71-a822-08e5117f7c62": {"node_ids": ["05e1f3f0-2aa9-4c8b-a195-0e04e5b5027d"], "metadata": {"page_label": "25", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bba18de0-9b21-4f60-8250-90ee946924f3": {"node_ids": ["c96a04ad-990b-4065-a0d8-c67816fc1eec"], "metadata": {"page_label": "26", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7e164236-1d6e-4898-a211-b5f79a7eb159": {"node_ids": ["cff6cc55-3fbf-4704-ad6b-1407e28c02a0"], "metadata": {"page_label": "27", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2877f444-b4f5-41b5-90a9-2c8188d18185": {"node_ids": ["643eb482-426e-454f-b0fe-5d4312b69889"], "metadata": {"page_label": "28", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8afe21ed-9eaf-4759-bf1b-1018317c3d44": {"node_ids": ["8fecb449-e6dc-4663-84d1-075f1bdcd716"], "metadata": {"page_label": "29", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "41b095dd-be22-4b0d-9191-ee78173e7ea2": {"node_ids": ["98a22333-59d6-4d2a-8798-b658894e1111"], "metadata": {"page_label": "30", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1ca2d922-1dd6-4921-9462-443f21b09d62": {"node_ids": ["76c55d8a-c8c0-4c77-8ece-99b42e6b81cf"], "metadata": {"page_label": "31", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f787c46b-f23d-42c1-a1c0-60010aebf495": {"node_ids": ["63bfa806-2daf-41c2-87a7-1ff5ca8042d6"], "metadata": {"page_label": "32", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "406d81d5-31e6-4e5e-8a7d-b3cae5507b91": {"node_ids": ["c10e25a2-a13e-42af-a7ce-1e2494505c2a"], "metadata": {"page_label": "33", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e2bccf67-3755-475a-9275-7c4838b08f16": {"node_ids": ["539b269e-fa99-4b1e-9dc2-c57baad0d963"], "metadata": {"page_label": "34", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9c7c7579-cdb5-4587-b652-859681926de5": {"node_ids": ["f795a631-e2b4-4507-81bd-7d37afab3087"], "metadata": {"page_label": "35", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "dc2b8ff5-4d14-4459-ba60-0eb9a56a0482": {"node_ids": ["5c7d3978-4b77-445e-8539-db353a8d7257"], "metadata": {"page_label": "36", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1b2e37fd-919b-4c45-a1af-2591f5a5c5dd": {"node_ids": ["b639ef65-d996-4a98-b1da-4a875d361ef8"], "metadata": {"page_label": "37", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d439e9da-880b-4b29-8ecd-f9f7de5746b6": {"node_ids": ["b482b793-da6f-4b48-b851-8b6c1e9a9b39"], "metadata": {"page_label": "38", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b180d3af-fda9-47ff-aaca-fb2f9e88ff04": {"node_ids": ["53e2ca6d-31c5-437e-8b78-b911b7804f05"], "metadata": {"page_label": "39", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "62ab44a7-f57e-403b-8d83-94624f97e047": {"node_ids": ["e6b1c302-8b5e-4ff2-b255-a1c5465a9fc8"], "metadata": {"page_label": "40", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "322b5a21-e936-4afd-850e-0827bff193da": {"node_ids": ["350b05f6-a561-4109-845b-74e379989c4e"], "metadata": {"page_label": "41", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "509fae49-3c78-45f2-9fe3-58ec5be78a2e": {"node_ids": ["d97b9eb6-cd07-4e09-9e02-513aa247b054"], "metadata": {"page_label": "42", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fae5ff2c-3e6c-49f4-bc28-1deb19a2b22e": {"node_ids": ["20191aeb-f118-466e-8a59-3b1652f7f1f2"], "metadata": {"page_label": "43", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6acb5c0e-d2f8-4f1b-8ce4-cc341f2fe151": {"node_ids": ["68e68186-69c2-43c9-87fd-d05aa153eff2"], "metadata": {"page_label": "44", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "13f6fa16-111c-47b9-a430-03c29a6529d4": {"node_ids": ["9f09f6e1-2467-419f-95eb-e0d73a7cd922"], "metadata": {"page_label": "45", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d5033829-430e-4970-b337-62efb928356f": {"node_ids": ["69d3ced4-1cc1-4bf6-b4c0-b0b22b910fc4"], "metadata": {"page_label": "46", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "887b71da-2a04-4b2c-852b-66fd48c2fbef": {"node_ids": ["e5471d4c-1f54-46c4-9186-3860628ffe7d"], "metadata": {"page_label": "47", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1c14d526-eaac-4c87-9c44-dcd7563067bb": {"node_ids": ["2ce58c41-4e12-4b99-b33e-a3145c806201"], "metadata": {"page_label": "48", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "de39209f-2ad4-4396-a9e3-cf580373aa07": {"node_ids": ["1aac1b31-4527-40b6-b43a-ac4743532287"], "metadata": {"page_label": "49", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "65778cfd-ebb6-4723-acb4-2c52e34f8b32": {"node_ids": ["7cd9dced-4269-49c2-8da1-7ca84aa3990f"], "metadata": {"page_label": "50", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3fe721bf-5a65-43c2-bc70-5c746e91baa7": {"node_ids": ["f9767c89-8ce2-4e78-84fc-ef7532110351"], "metadata": {"page_label": "51", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d2841ce0-1c11-4015-b493-a80b13234b8e": {"node_ids": ["873e644e-4a4d-42c3-a35e-3f083ff33f66"], "metadata": {"page_label": "52", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ff3989b0-eb6b-4068-94d1-7a8ac88552f2": {"node_ids": ["7bce55f4-3019-4cc1-92ba-45092fce0ffc"], "metadata": {"page_label": "53", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e46489f8-99dc-418e-83e7-3c8c6e7d929f": {"node_ids": ["84948ac8-0359-4306-a2a0-30e063ea0d05"], "metadata": {"page_label": "54", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ac1bd129-f08d-4b65-97db-de3cee2ecd9e": {"node_ids": ["471fa105-2b1b-44fd-a3b7-7425f2cae55a"], "metadata": {"page_label": "55", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1c9c5307-7536-412e-a581-0d42fdb27a1d": {"node_ids": ["227ae7b0-f03e-4405-b7ac-3c15a4843ebd"], "metadata": {"page_label": "56", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6e139717-fba0-42b0-a1c1-50f9ef0c450d": {"node_ids": ["72c1712a-5cc0-4ae2-a405-3dab32d0b970"], "metadata": {"page_label": "57", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b8dccb29-1eb4-4bd2-a339-6369b49c40e8": {"node_ids": ["43adff97-0bb2-4e77-8809-d9f84544c2aa"], "metadata": {"page_label": "58", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ba85b95e-9910-4acf-85fd-c1ef99a9900d": {"node_ids": ["44cfc5f6-96c0-485d-871f-c26189ffccaf"], "metadata": {"page_label": "59", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d3732f42-39a2-4c03-80c8-cd62bee7e5a7": {"node_ids": ["730077b9-bcff-4bdb-99fd-31de7688b1a3"], "metadata": {"page_label": "60", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c66222b2-690e-42ac-bcb4-b4c78a3d70cb": {"node_ids": ["1b528f48-b9c6-4f8c-ae19-e6d908c8e5a9"], "metadata": {"page_label": "61", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2056e5bb-1096-45e4-bfd5-0773d9085022": {"node_ids": ["496c9156-aa33-40b5-8cc1-71943c523ed6"], "metadata": {"page_label": "62", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "751b8b57-1a12-41a9-9423-9b93a2a8c77c": {"node_ids": ["b4f8a8d8-32f0-4673-a3c8-b8764d7e56e4"], "metadata": {"page_label": "63", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "402ac11c-c255-440e-9981-5a8da6facbdd": {"node_ids": ["454535a8-012f-4406-81d2-6aa7d907a49d"], "metadata": {"page_label": "64", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4aad530e-3a0f-4fa7-a8d0-b8ed4e4544fc": {"node_ids": ["1450a50a-2097-46ef-be30-f0115149c071"], "metadata": {"page_label": "65", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d915967a-31b6-4121-95a6-3bc2291bf20c": {"node_ids": ["f4e514c0-0641-4668-804e-c1dc9147f419"], "metadata": {"page_label": "66", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "325090a3-b490-4930-9b31-406df6830450": {"node_ids": ["6d68f731-ba18-43ee-8b9b-983b823b1d38"], "metadata": {"page_label": "67", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8c2e6927-d5e0-47f3-b11b-e575ca8b34e7": {"node_ids": ["1a937ce0-1a78-47a2-924b-15d8a4cb57a5"], "metadata": {"page_label": "68", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "37317fc2-ac3b-4ad7-a748-896f3b995e38": {"node_ids": ["bf739ad9-ade9-4105-a0e9-b5ed8cced777"], "metadata": {"page_label": "69", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "09098469-d921-43ed-812b-63f532cc824d": {"node_ids": ["98c479b9-63b3-42a7-b98b-b2269ebb233d"], "metadata": {"page_label": "70", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "be438d4e-c754-4b6b-b1a7-0d67b08de814": {"node_ids": ["8cfa3901-2bee-4375-a9fc-e771b5757261"], "metadata": {"page_label": "71", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3a099732-9505-4e42-bf00-0dcc353efb07": {"node_ids": ["fee4591e-6a54-4536-a6a6-9dec9b02b7d4"], "metadata": {"page_label": "72", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7434995a-f7d4-4671-bb11-2694345a5d0d": {"node_ids": ["c783b6d6-2e3d-4624-b3ea-44bc50ab9b82"], "metadata": {"page_label": "73", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5d5484cb-5d32-4a9a-8ff2-848d2c786d5e": {"node_ids": ["49c70a22-f2e9-4be9-856b-3536cbd3caaa"], "metadata": {"page_label": "74", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e932be7e-0fd1-4a1d-82bd-5658d13fdace": {"node_ids": ["03d740d4-7bb4-4227-8c40-f5f867a5fea3"], "metadata": {"page_label": "75", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e6783ce8-e9d9-4c06-b016-334fd0e03277": {"node_ids": ["2777bd7c-8627-4e86-931f-2cd58ac2b35c"], "metadata": {"page_label": "76", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6d8c5f22-340f-4c6b-ad9d-c16fb0ea82e0": {"node_ids": ["fb151534-eaab-4a98-b86c-08fa0ed44dd3"], "metadata": {"page_label": "77", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c5a2620e-0cd8-45ae-83eb-498ebe8814e8": {"node_ids": ["80df4762-ffe4-499f-9fab-90d0eb43804c"], "metadata": {"page_label": "78", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e3d4eab0-48fc-4bef-b93b-4a4b81d1cfe3": {"node_ids": ["93ae1d16-79ef-4c89-96a1-d7a772f44694"], "metadata": {"page_label": "79", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9548f2d2-beb4-4605-9c43-0dcc70d802ea": {"node_ids": ["63bf7b77-7f25-4581-a570-30ba6a9730b9"], "metadata": {"page_label": "80", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d805dc8f-769c-4b70-bc88-5414d8f7335c": {"node_ids": ["d17c55f0-5bfa-426c-b3b6-63d37dd2a634"], "metadata": {"page_label": "81", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a7b3123f-1f0c-4d2b-8a73-a2da8f641e2a": {"node_ids": ["32675d9a-9da2-4f0f-8339-ac9d7390ef59", "b457072b-45cb-41cb-b904-0603839c9cb7", "0a285d43-a9ab-4f59-bc1a-875cab137a7c"], "metadata": {"page_label": "82", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "2fe0eb23-0aab-4a53-82ac-4a4171d3e0b5": {"node_ids": ["0074b5a6-fb47-43a9-ae98-0b5206139740"], "metadata": {"page_label": "83", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9a21361d-21d4-4175-87e1-8c0f1882d11d": {"node_ids": ["24466767-56e3-4421-bab1-e7e72318521b"], "metadata": {"page_label": "84", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b35600a0-70a7-4785-86de-dfabc06a0320": {"node_ids": ["1df07e0a-1c43-435b-80bb-29fb84cc61d3"], "metadata": {"page_label": "85", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "29332cde-0296-4f75-8025-e8accf6e30c8": {"node_ids": ["81f07e4f-4779-4f5f-9ee3-3f4efa30583b"], "metadata": {"page_label": "86", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "95168cbf-9b7f-4f67-ae55-8dc338c7524d": {"node_ids": ["ffd4f6c6-7803-4c7b-86b4-823ea5524d94"], "metadata": {"page_label": "87", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c5a2dc22-e171-4dd3-9390-64b754e2be6a": {"node_ids": ["31e54fcc-7fed-476c-ba89-06b572e3a5d3"], "metadata": {"page_label": "88", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ef5c9240-2a8c-44a5-ba88-f822935c979c": {"node_ids": ["b7d90a8e-6731-4442-a89c-637b9899c710"], "metadata": {"page_label": "89", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "87573574-2b28-4323-bcb4-f31c56c10833": {"node_ids": ["643ab2f8-fe1a-4781-9886-25d6e423a29a"], "metadata": {"page_label": "90", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "c45a1e09-0190-4dfa-8e79-0175563d5a1f": {"node_ids": ["84a9412a-0a75-43f7-b05c-52580a5cacc5"], "metadata": {"page_label": "91", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9f2fe297-37f4-47c8-a289-0616bace1614": {"node_ids": ["7a74cd87-9767-4436-b515-228be70f816b"], "metadata": {"page_label": "92", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "99b33dc8-e380-40f2-8e82-558638272fdc": {"node_ids": ["d9566454-accc-4724-bf9e-da0349b1a854"], "metadata": {"page_label": "93", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "35dd6f66-043b-436a-92bd-f5329854c232": {"node_ids": ["e15c2109-9d40-47c1-aebf-b09bfabd4b73"], "metadata": {"page_label": "94", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4d09ad6d-3316-4a67-a68d-e83197ea7ae5": {"node_ids": ["842c3f5d-1ffe-44bf-a129-24ea711566ca"], "metadata": {"page_label": "95", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6c806eff-2488-4e7e-954b-1a632c9871ca": {"node_ids": ["da3046a4-4e7f-4e14-9de8-5ba58423846a"], "metadata": {"page_label": "96", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9064fc42-fd50-4f8f-ae20-14f4c3ca5498": {"node_ids": ["94e88b1b-0056-4e01-bd96-6a9321d17aad"], "metadata": {"page_label": "97", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "dab284ac-d324-4a92-a9db-6483b48c1060": {"node_ids": ["8a05d447-9f83-43f7-84be-d0e7606a5e87"], "metadata": {"page_label": "98", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7f1bfd5f-1d39-40fe-aaae-f1709f2bb355": {"node_ids": ["50ee10c6-2613-42af-b7b9-b89595f70905"], "metadata": {"page_label": "99", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "06a52a33-36c3-441a-b9db-5a7ab76ec97e": {"node_ids": ["b140ddde-6734-4b59-8d42-1129490956ca"], "metadata": {"page_label": "100", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5cda8219-3b8e-44a2-a15c-9455b5ecac31": {"node_ids": ["1525135f-84b3-47d5-bfd3-fe7d6750bc02"], "metadata": {"page_label": "101", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "b0cd3c0f-10a7-4db8-9add-00d932ee09c1": {"node_ids": ["16bc54ff-113a-4ad0-8f67-b8e16eaaeca8"], "metadata": {"page_label": "102", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "272a27d7-5136-446b-be48-d91825820c1c": {"node_ids": ["1a6545d6-b0b1-45f9-ab5f-181ee4167e7a"], "metadata": {"page_label": "103", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "89d98756-092f-4f3b-8061-9719a85a345c": {"node_ids": ["4327605e-1a35-403c-9ab4-895483afe13b"], "metadata": {"page_label": "104", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f064e59e-8ffc-4464-8fee-b7544b4167d7": {"node_ids": ["d40f77fe-1663-41c4-b63d-e4f0c7977f9f"], "metadata": {"page_label": "105", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "f6eb0495-05b0-4dee-8ad7-0cfffe291b93": {"node_ids": ["c29c7a8b-09aa-46f9-934e-1fcc54bf1b6b"], "metadata": {"page_label": "106", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "387d8d3d-f766-45d4-b962-0ab54bbb16aa": {"node_ids": ["f2073696-243f-49e9-a67a-dd17cbfc60a0"], "metadata": {"page_label": "107", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bbc4a50b-73af-455d-93a7-d5b349afe919": {"node_ids": ["5a599e4c-473d-446e-9cd7-5216c49dd792"], "metadata": {"page_label": "108", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "361d9bea-66c6-42e9-82ec-bb3b6ccd16dd": {"node_ids": ["ce4639f5-ac76-42b7-8594-f5803977c812"], "metadata": {"page_label": "109", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3975ea40-3c45-42b7-b85a-497ca1880410": {"node_ids": ["ff3ab2bc-e78b-4db0-8198-cbcc8eb142b8"], "metadata": {"page_label": "110", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "68ab3efe-b49e-46e2-afc1-7ed5a93cfad0": {"node_ids": ["c57ab38e-0b1a-46fd-802b-de65f4f8aa1e"], "metadata": {"page_label": "111", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "ea9e7466-18c6-4ec4-8916-e97a04d0ec28": {"node_ids": ["7b45e66e-84c0-4963-8bd1-ba2612135cc2"], "metadata": {"page_label": "112", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7ce17e4b-b923-4d7b-b864-65b8e26ead2f": {"node_ids": ["d10b53c1-6e0a-4c7d-bdd2-1deae9e1c1fc"], "metadata": {"page_label": "113", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8d101230-b818-4c70-9098-bd65cf03a7d6": {"node_ids": ["60986e95-24b7-48a6-9824-239f4303b9a6"], "metadata": {"page_label": "114", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "622640e1-9a40-4d7c-b502-c5a3624a089c": {"node_ids": ["f5ec3f61-f1c2-422e-b449-8b2de31e5e30"], "metadata": {"page_label": "115", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1f7db7cb-027e-4cf3-86b5-a5521b134561": {"node_ids": ["170009c3-b70e-441b-a7db-fa3838c315cf"], "metadata": {"page_label": "116", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "040820e5-4f9b-41e7-afdb-9fc9d9760eb9": {"node_ids": ["14a3de3e-550c-4b44-9c6a-d40a900ecf25"], "metadata": {"page_label": "117", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "6f050d70-c5f5-4633-9909-c2583ab0d73a": {"node_ids": ["3c9a9215-f79b-469f-83bf-12a60ef5b5db"], "metadata": {"page_label": "118", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "d05f5b6e-0669-4aba-8401-871f0e6e3ebb": {"node_ids": ["23fc28da-0dca-440b-8eb2-b833e99c8ddd"], "metadata": {"page_label": "119", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8e4bf0a7-0de2-4435-97e1-b85caf8b3ce5": {"node_ids": ["8f51513b-c02e-4d99-8d7d-15e8363ca37b"], "metadata": {"page_label": "120", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "00601f86-0ddc-41eb-aea3-be7b32cb73c4": {"node_ids": ["c8fe4afb-0120-469e-b3d9-8acd70435704"], "metadata": {"page_label": "121", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "07c6c677-f883-4f45-a193-d6850a2c36a3": {"node_ids": ["01cee4fa-a19b-4ae1-a29e-acbd449247f2"], "metadata": {"page_label": "122", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "cabcd918-d11d-4dc2-a67d-30a33c6580c8": {"node_ids": ["a42ab1d0-19d0-4489-9959-443103cc76d2"], "metadata": {"page_label": "123", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "8b7a95ad-35b3-40e8-ac72-e44a682c9c08": {"node_ids": ["d9469ba2-4254-49a0-a3ff-a828d5eab037"], "metadata": {"page_label": "124", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "7f337dec-23ad-4ed1-aa32-0fdb166b6aef": {"node_ids": ["f9ad2093-95ca-41e6-ae39-ca6aa71a9199"], "metadata": {"page_label": "125", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "99b212b5-3e44-44cf-aad3-4be0c8c7c469": {"node_ids": ["aadf292f-1c9b-471d-9c31-7097d6fb4a7c"], "metadata": {"page_label": "126", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "37519b23-1a4e-4e95-a3b6-db1ceefff985": {"node_ids": ["1122aa84-02ba-417e-8e14-43b80a0c6668"], "metadata": {"page_label": "127", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "5feb506f-bbfb-41c9-978c-e127f107ae17": {"node_ids": ["a4c44890-ec60-47e0-bcf9-6a6081485382"], "metadata": {"page_label": "128", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "73efe614-f166-4c88-b88a-5c077707868a": {"node_ids": ["ada2288a-9a75-4312-98ba-6c62da74f612"], "metadata": {"page_label": "129", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "4a66d1d9-6d1c-4d72-8169-eb138cbb475f": {"node_ids": ["d2f90e3c-d419-4e88-a1b5-e17b4a6a54d7"], "metadata": {"page_label": "130", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "790fb162-3bfc-4e05-9376-8365347dc51e": {"node_ids": ["c2fc2d23-e86d-4677-b7dd-23d94081cdb1"], "metadata": {"page_label": "131", "file_name": "e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\e-Notes_PDF_All-Units_24042019090707AM.pdf", "file_type": "application/pdf", "file_size": 5913980, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "40be6cf9-a223-4230-ad2e-a6a09c06cba6": {"node_ids": ["3c61ac5d-dfa7-4a13-b79c-76fa5dd4652a"], "metadata": {"page_label": "1", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "1753330a-d2d2-4aaa-8430-5a2ca117b379": {"node_ids": ["7603c2e9-7e80-459f-9316-5f59b4ec481f"], "metadata": {"page_label": "2", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "155fbc54-3d6b-411f-8882-0e8849b86ea7": {"node_ids": ["e81adcc1-02ee-449e-b9c6-e743272944e5"], "metadata": {"page_label": "3", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "3b26c005-9292-43b3-90da-a56e2c2b61a4": {"node_ids": ["4fd1c5a1-ba57-4fcc-b20c-0cf4153ab007"], "metadata": {"page_label": "4", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a1b10abf-8fb1-4ce3-9c62-3039ae62535b": {"node_ids": ["28b84a9e-e5ae-48ac-9e38-e21828f75c79"], "metadata": {"page_label": "5", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "bd2911b7-46d3-4b15-a9f6-c491ea0d4d86": {"node_ids": ["25e21a8c-0747-4ff0-8c25-fe2555db3075"], "metadata": {"page_label": "6", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "9df8c6a3-5497-4792-95ce-6d87fef33e46": {"node_ids": ["ccc1933d-be8d-42af-ba6c-7a46f1fe144c"], "metadata": {"page_label": "7", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "08a86fc5-6879-434e-80d6-7577f1ddc50f": {"node_ids": ["7c7e130a-6225-4973-9ed0-e63bcfa3f10c"], "metadata": {"page_label": "8", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "972b767a-d050-456a-a147-125250297d2c": {"node_ids": ["8f076627-8f17-49f4-8625-5f45c6b77d5d"], "metadata": {"page_label": "9", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "a0f8d5d5-e4ea-40af-80a6-f1233de1d67e": {"node_ids": ["8fdfe103-77c7-4fe5-b8a7-9dff98c8fb03"], "metadata": {"page_label": "10", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "e53fafa5-16ea-4408-95bb-d4d86913176c": {"node_ids": ["e8cde47f-b80e-4659-bebb-82d9ece23fef"], "metadata": {"page_label": "11", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fcd201db-b526-4dea-ae30-039b08a78f64": {"node_ids": ["5d4e8af8-5959-4f10-9ebe-9d285cd67c1f"], "metadata": {"page_label": "12", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fcddaa29-c0e5-47a0-8ef6-873ecc40bf39": {"node_ids": ["afe32d30-e775-4dec-a0e2-a9dc03956058"], "metadata": {"page_label": "13", "file_name": "Proposal markup Template - Adrta new.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\Proposal markup Template - Adrta new.pdf", "file_type": "application/pdf", "file_size": 378657, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}, "fdc4e473-29b0-4b40-a9dc-cba672f5cec4": {"node_ids": ["b5b3e09b-460c-4034-a25f-4010a53198f7"], "metadata": {"page_label": "1", "file_name": "service.pdf", "file_path": "E:\\RFI\\RFI_SNEH\\DEMO_RAG\\Data\\service.pdf", "file_type": "application/pdf", "file_size": 60754, "creation_date": "2025-03-20", "last_modified_date": "2025-02-18"}}}}